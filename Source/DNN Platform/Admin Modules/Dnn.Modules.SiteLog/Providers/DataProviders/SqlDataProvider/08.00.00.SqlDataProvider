IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddSiteLog]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}AddSiteLog
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}DeleteSiteLog]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}DeleteSiteLog
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog1]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog1
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog2]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog2
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog3]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog3
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog4]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog4
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog5]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog5
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog6]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog6
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog7]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog7
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog8]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog8
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog9]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog9
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog12]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog12
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SiteLog]') AND type in (N'U'))
	DROP TABLE {databaseOwner}[{objectQualifier}SiteLog]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}SiteLog]
(
    [SiteLogId] [int] NOT NULL IDENTITY(1, 1),
    [DateTime] [smalldatetime] NOT NULL,
    [PortalId] [int] NOT NULL,
    [UserId] [int] NULL,
    [Referrer] [nvarchar] (255)   NULL,
    [Url] [nvarchar] (255)   NULL,
    [UserAgent] [nvarchar] (255)   NULL,
    [UserHostAddress] [nvarchar] (255)   NULL,
    [UserHostName] [nvarchar] (255)   NULL,
    [TabId] [int] NULL,
    [AffiliateId] [int] NULL
)
ALTER TABLE {databaseOwner}[{objectQualifier}SiteLog] ADD CONSTRAINT [PK_{objectQualifier}SiteLog] PRIMARY KEY CLUSTERED  ([SiteLogId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}SiteLog] ON {databaseOwner}[{objectQualifier}SiteLog] ([PortalId])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSiteLog
    @DateTime                      DATETIME, 
    @PortalID                      INT,
    @UserID                        INT                   = NULL,
    @Referrer                      NVARCHAR(255)         = NULL,
    @Url                           NVARCHAR(255)         = NULL,
    @UserAgent                     NVARCHAR(255)         = NULL,
    @UserHostAddress               NVARCHAR(255)         = NULL,
    @UserHostName                  NVARCHAR(255)         = NULL,
    @TabId                         INT                   = NULL,
    @AffiliateId                   INT                   = NULL
AS
 
    DECLARE @SiteLogHistory INT

    INSERT INTO {databaseOwner}{objectQualifier}SiteLog ( 
        DateTime,
        PortalId,
        UserId,
        Referrer,
        Url,
        UserAgent,
        UserHostAddress,
        UserHostName,
        TabId,
        AffiliateId
    )
    VALUES (
        @DateTime,
        @PortalID,
        @UserID,
        @Referrer,
        @Url,
        @UserAgent,
        @UserHostAddress,
        @UserHostName,
        @TabId,
        @AffiliateId
    )
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSiteLog]
	@DateTime                      DATETIME, 
	@PortalID                      INT

AS
	DELETE FROM {databaseOwner}{objectQualifier}SiteLog WITH(READPAST)
	WHERE  PortalId = @PortalID
		AND    DateTime < @DateTime
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog1
	@PortalID 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
	BEGIN
		SELECT Convert(VarChar, DateTime, 102)   AS 'Date',
			   Count(*) 						 AS 'Views',
			   Count(Distinct L.UserHostAddress) AS 'Visitors',
			   Count(Distinct L.UserId)          AS 'Users'
		FROM {databaseOwner}{objectQualifier}SiteLog L
		WHERE PortalId = @PortalID
		  AND L.DateTime BETWEEN @StartDate AND @EndDate
		GROUP BY Convert(VarChar, DateTime, 102)
		ORDER BY Date DESC
	END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog2
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- Portal Alias to be eliminated FROM Referrer
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
	BEGIN
		SELECT L.DateTime, 
		U.DisplayName AS 'Name',
		{databaseOwner}[{objectQualifier}AdjustedReferrer](L.Referrer, @PortalAlias) AS 'Referrer', 
		{databaseOwner}[{objectQualifier}BrowserFromUserAgent](L.UserAgent) AS 'UserAgent',
		L.UserHostAddress,
		T.TabName
		FROM      {databaseOwner}{objectQualifier}SiteLog L
		LEFT JOIN {databaseOwner}{objectQualifier}Users   U ON L.UserId = U.UserId 
		LEFT JOIN {databaseOwner}{objectQualifier}Tabs    T ON L.TabId  = T.TabId 
		WHERE L.PortalId = @PortalId
		  AND L.DateTime BETWEEN @StartDate AND @EndDate
		ORDER BY L.DateTime DESC
	END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog3
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT U.DisplayName AS 'Name',
           count(*)      AS 'Requests',
           Max(DateTime) AS 'LastRequest'
	FROM       {databaseOwner}{objectQualifier}SiteLog L
	INNER JOIN {databaseOwner}{objectQualifier}Users   U on L.UserId = U.UserId
	WHERE L.PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY U.DisplayName
	ORDER BY Requests DESC
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog4
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- Portal Alias to be eliminated FROM Referrer
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT Referrer,
	Count(*)      AS 'Requests',
	Max(DateTime) AS 'LastRequest'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE L.PortalId = @PortalID
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	  AND L.Referrer IS Not Null
	  AND L.Referrer Not Like '%' + @PortalAlias + '%'
	GROUP BY Referrer
	ORDER BY Requests DESC
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog5
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT {databaseOwner}[{objectQualifier}BrowserFromUserAgent](L.UserAgent) AS 'UserAgent',
		   Count(*)      AS 'Requests',
		   Max(DateTime) AS 'LastRequest'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY {databaseOwner}[{objectQualifier}BrowserFromUserAgent](L.UserAgent)
	ORDER BY Requests DESC
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog6
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT
		DatePart(Hour, DateTime)          AS 'Hour',
		Count(*)                          AS 'Views',
		Count(Distinct L.UserHostAddress) AS 'Visitors',
		Count(Distinct L.UserId) 		  AS 'Users'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY DatePart(Hour, DateTime)
	ORDER BY Hour
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog7
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT 
		DatePart(weekday, DateTime) 	  AS 'WeekDay',
		Count(*)                          AS 'Views',
		Count(Distinct L.UserHostAddress) AS 'Visitors',
		Count(Distinct L.UserId) 		  AS 'Users'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY DatePart(weekday, DateTime)
	ORDER BY WeekDay
END
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog8
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS	
BEGIN
	SELECT 
		DatePart(month, DateTime) 		  AS 'Month',
		Count(*)                          AS 'Views',
		Count(Distinct L.UserHostAddress) AS 'Visitors',
		Count(Distinct L.UserId) 		  AS 'Users'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY datepart(Month, L.DateTime)
	ORDER BY Month
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog9
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS	
BEGIN
	SELECT 
		T.TabName     AS 'Page',
		Count(*)      AS 'Requests',
		Max(DateTime) AS 'LastRequest'
	FROM       {databaseOwner}{objectQualifier}SiteLog L
	INNER JOIN {databaseOwner}{objectQualifier}Tabs    T ON L.TabId = T.TabId
	WHERE L.PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	GROUP BY T.TabName
	ORDER BY Requests DESC
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSiteLog12
	@PortalId 	 Int,			-- not Null
	@PortalAlias nVarChar(50),  -- ignored
	@StartDate   DateTime,      -- Not Null
	@EndDate 	 DateTime		-- Not Null
AS
BEGIN
	SELECT AffiliateId,
		Count(*) 		AS 'Requests',
		Max(DateTime) 	AS 'LastReferral'
	FROM {databaseOwner}{objectQualifier}SiteLog L
	WHERE L.PortalId = @PortalId
	  AND L.DateTime BETWEEN @StartDate AND @EndDate
	  AND AffiliateId Is NOT Null
	GROUP BY AffiliateId
	ORDER BY Requests DESC
END
GO

--Create Schedule Job
IF NOT EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}Schedule] WHERE TypeFullName = 'Dnn.Modules.SiteLog.Components.PurgeSiteLog, Dnn.Modules.SiteLog')
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}Schedule] ([TypeFullName], [TimeLapse], [TimeLapseMeasurement], [RetryTimeLapse], [RetryTimeLapseMeasurement], [RetainHistoryNum], [AttachToEvent], [CatchUpEnabled], [Enabled], [ObjectDependencies], [Servers], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FriendlyName]) VALUES ('Dnn.Modules.SiteLog.Components.PurgeSiteLog, Dnn.Modules.SiteLog', 1, 'd', 2, 'h', 10, '', 0, 1, 'SiteLog', NULL, NULL, NULL, NULL, NULL, N'Purge Site Log')
END
GO