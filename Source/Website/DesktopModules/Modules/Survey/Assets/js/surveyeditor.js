(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory(require("knockout"), require("survey-knockout"), require("jquery"), require("bootstrap"));
    else if (typeof define === 'function' && define.amd)
        define("SurveyEditor", ["knockout", "survey-knockout", "jquery", "bootstrap"], factory);
    else if (typeof exports === 'object')
        exports["SurveyEditor"] = factory(require("knockout"), require("survey-knockout"), require("jquery"), require("bootstrap"));
    else
        root["SurveyEditor"] = factory(root["ko"], root["Survey"], root["jQuery"], root["bootstrap"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_34__) {
    return /******/ (function(modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};
            /******/
            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {
                /******/
                /******/ // Check if module is in cache
                /******/
                if (installedModules[moduleId])
                /******/
                    return installedModules[moduleId].exports;
                /******/
                /******/ // Create a new module (and put it into the cache)
                /******/
                var module = installedModules[moduleId] = {
                    /******/
                    i: moduleId,
                    /******/
                    l: false,
                    /******/
                    exports: {}
                    /******/
                };
                /******/
                /******/ // Execute the module function
                /******/
                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                /******/
                /******/ // Flag the module as loaded
                /******/
                module.l = true;
                /******/
                /******/ // Return the exports of the module
                /******/
                return module.exports;
                /******/
            }
            /******/
            /******/
            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;
            /******/
            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;
            /******/
            /******/ // identity function for calling harmony imports with the correct context
            /******/
            __webpack_require__.i = function(value) {
                return value;
            };
            /******/
            /******/ // define getter function for harmony exports
            /******/
            __webpack_require__.d = function(exports, name, getter) {
                /******/
                if (!__webpack_require__.o(exports, name)) {
                    /******/
                    Object.defineProperty(exports, name, {
                        /******/
                        configurable: false,
                        /******/
                        enumerable: true,
                        /******/
                        get: getter
                            /******/
                    });
                    /******/
                }
                /******/
            };
            /******/
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/
            __webpack_require__.n = function(module) {
                /******/
                var getter = module && module.__esModule ?
                    /******/
                    function getDefault() {
                        return module['default'];
                    } :
                    /******/
                    function getModuleExports() {
                        return module;
                    };
                /******/
                __webpack_require__.d(getter, 'a', getter);
                /******/
                return getter;
                /******/
            };
            /******/
            /******/ // Object.prototype.hasOwnProperty.call
            /******/
            __webpack_require__.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
            };
            /******/
            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";
            /******/
            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(__webpack_require__.s = 61);
            /******/
        })
        /************************************************************************/
        /******/
        ([
            /* 0 */
            /***/
            (function(module, exports) {

                module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

                /***/
            }),
            /* 1 */
            /***/
            (function(module, exports) {

                module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

                /***/
            }),
            /* 2 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return editorLocalization;
                });
                /* unused harmony export defaultStrings */
                var editorLocalization = {
                    currentLocale: "",
                    locales: {},
                    getString: function(strName, locale) {
                        if (locale === void 0) {
                            locale = null;
                        }
                        if (!locale)
                            locale = this.currentLocale;
                        var loc = locale ? this.locales[locale] : defaultStrings;
                        if (!loc)
                            loc = defaultStrings;
                        var path = strName.split('.');
                        var obj = loc;
                        for (var i = 0; i < path.length; i++) {
                            obj = obj[path[i]];
                            if (!obj) {
                                if (loc === defaultStrings)
                                    return path[i];
                                return this.getString(strName, "en");
                            }
                        }
                        return obj;
                    },
                    getPropertyName: function(strName, local) {
                        if (local === void 0) {
                            local = null;
                        }
                        var obj = this.getProperty(strName, local);
                        if (obj["name"])
                            return obj["name"];
                        return obj;
                    },
                    getPropertyTitle: function(strName, local) {
                        if (local === void 0) {
                            local = null;
                        }
                        var obj = this.getProperty(strName, local);
                        if (obj["title"])
                            return obj["title"];
                        return "";
                    },
                    getProperty: function(strName, local) {
                        if (local === void 0) {
                            local = null;
                        }
                        var obj = this.getString("p." + strName, local);
                        if (obj !== strName)
                            return obj;
                        var pos = strName.indexOf('_');
                        if (pos < -1)
                            return obj;
                        strName = strName.substr(pos + 1);
                        return this.getString("p." + strName, local);
                    },
                    getLocales: function() {
                        var res = [];
                        res.push("");
                        for (var key in this.locales) {
                            res.push(key);
                        }
                        return res;
                    }
                };
                var defaultStrings = {
                    //survey templates
                    survey: {
                        dropQuestion: "Please choose the question type in control box.",
                        copy: "Copy",
                        addToToolbox: "Add to toolbox",
                        deletePanel: "Delete Panel",
                        deleteQuestion: "Delete Question"
                    },
                    //questionTypes
                    qt: {
                        checkbox: "Checkbox",
                        comment: "Comment",
                        dropdown: "Dropdown",
                        file: "File",
                        html: "Html",
                        matrix: "Matrix (single choice)",
                        matrixdropdown: "Matrix (multiple choice)",
                        matrixdynamic: "Matrix (dynamic rows)",
                        multipletext: "Multiple Text",
                        panel: "Panel",
                        radiogroup: "Radiogroup",
                        rating: "Rating",
                        text: "Single Input"
                    },
                    //Strings in Editor
                    ed: {
                        addNewPage: "Add New Page",
                        newPageName: "page",
                        newQuestionName: "question",
                        newPanelName: "panel",
                        testSurvey: "Test Survey",
                        testSurveyAgain: "Test Survey Again",
                        testSurveyWidth: "Survey width: ",
                        embedSurvey: "Embed Survey",
                        saveSurvey: "Save Survey",
                        designer: "Survey Designer",
                        jsonEditor: "JSON Editor",
                        saveEditor: "Save Editor",
                        saveEditSurvey: "Save Edit Survey",
                        undo: "Undo",
                        redo: "Redo",
                        options: "Options",
                        generateValidJSON: "Generate Valid JSON",
                        generateReadableJSON: "Generate Readable JSON",
                        toolbox: "Toolbox",
                        delSelObject: "Delete selected object",
                        correctJSON: "Please correct JSON.",
                        surveyResults: "Survey Result: "
                    },
                    //Property Editors
                    pe: {
                        apply: "Apply",
                        ok: "OK",
                        cancel: "Cancel",
                        reset: "Reset",
                        close: "Close",
                        delete: "Delete",
                        addNew: "Add New",
                        removeAll: "Remove All",
                        edit: "Edit",
                        empty: "<empty>",
                        fastEntry: "Fast Entry",
                        formEntry: "Form Entry",
                        testService: "Test the service",
                        expressionHelp: "Please enter a boolean expression. It should return true to keep the question/page visible. For example: {question1} = 'value1' or ({question2} = 3 and {question3} < 5)",
                        propertyIsEmpty: "Please enter value into the property",
                        value: "Value",
                        text: "Text",
                        required: "Required?",
                        columnEdit: "Edit column: {0}",
                        hasOther: "Has other item",
                        name: "Name",
                        title: "Title",
                        cellType: "Cell type",
                        colCount: "Column count",
                        choicesOrder: "Select choices order",
                        visible: "Is visible?",
                        isRequired: "Is required?",
                        startWithNewLine: "Is start with new line?",
                        rows: "Row count",
                        placeHolder: "Input place holder",
                        showPreview: "Is image preview shown?",
                        storeDataAsText: "Store file content in JSON result as text",
                        maxSize: "Maximum file size in bytes",
                        imageHeight: "Image height",
                        imageWidth: "Image width",
                        rowCount: "Row count",
                        addRowText: "Add row button text",
                        removeRowText: "Remove row button text",
                        minRateDescription: "Minimum rate description",
                        maxRateDescription: "Maximum rate description",
                        inputType: "Input type",
                        optionsCaption: "Options caption",
                        qEditorTitle: "Edit question: {0}",
                        tabs: {
                            general: "General",
                            fileOptions: "Options",
                            html: "Html Editor",
                            columns: "Columns",
                            rows: "Rows",
                            choices: "Choices",
                            visibleIf: "Visible If",
                            rateValues: "Rate Values",
                            choicesByUrl: "Choices from Web",
                            matrixChoices: "Default Choices",
                            multipleTextItems: "Text Inputs"
                        },
                        editProperty: "Edit property '{0}'",
                        items: "[ Items: {0} ]",
                        enterNewValue: "Please, enter the value.",
                        noquestions: "There is no any question in the survey.",
                        createtrigger: "Please create a trigger",
                        triggerOn: "On ",
                        triggerMakePagesVisible: "Make pages visible:",
                        triggerMakeQuestionsVisible: "Make questions visible:",
                        triggerCompleteText: "Complete the survey if succeed.",
                        triggerNotSet: "The trigger is not set",
                        triggerRunIf: "Run if",
                        triggerSetToName: "Change value of: ",
                        triggerSetValue: "to: ",
                        triggerIsVariable: "Do not put the variable into the survey result.",
                        verbChangeType: "Change type ",
                        verbChangePage: "Change page "
                    },
                    //Operators
                    op: {
                        empty: "is empty",
                        notempty: "is not empty",
                        equal: "equals",
                        notequal: "not equals",
                        contains: "contains",
                        notcontains: "not contains",
                        greater: "greater",
                        less: "less",
                        greaterorequal: "greater or equals",
                        lessorequal: "Less or Equals"
                    },
                    //Embed window
                    ew: {
                        angular: "Use Angular version",
                        jquery: "Use jQuery version",
                        knockout: "Use Knockout version",
                        react: "Use React version",
                        vue: "Use Vue version",
                        bootstrap: "For bootstrap framework",
                        standard: "No bootstrap",
                        showOnPage: "Show survey on a page",
                        showInWindow: "Show survey in a window",
                        loadFromServer: "Load Survey JSON from server",
                        titleScript: "Scripts and styles",
                        titleHtml: "HTML",
                        titleJavaScript: "JavaScript"
                    },
                    //Properties
                    p: {
                        name: "name",
                        title: {
                            name: "title",
                            title: "Leave it empty, if it is the same as 'Name'"
                        },
                        survey_title: {
                            name: "title",
                            title: "It will be shown on every page."
                        },
                        page_title: {
                            name: "title",
                            title: "Page title"
                        }
                    }
                };
                editorLocalization.locales["en"] = defaultStrings;


                /***/
            }),
            /* 3 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* unused harmony export __assign */
                /* harmony export (immutable) */
                __webpack_exports__["a"] = __extends;
                var __assign = Object["assign"] || function(target) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                                target[p] = s[p];
                    }
                    return target;
                };

                function __extends(thisClass, baseClass) {
                    for (var p in baseClass)
                        if (baseClass.hasOwnProperty(p))
                            thisClass[p] = baseClass[p];

                    function __() {
                        this.constructor = thisClass;
                    }
                    thisClass.prototype = baseClass === null ? Object.create(baseClass) : (__.prototype = baseClass.prototype, new __());
                };


                /***/
            }),
            /* 4 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyEditorBase;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyStringPropertyEditor;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "c", function() {
                    return SurveyDropdownPropertyEditor;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "d", function() {
                    return SurveyBooleanPropertyEditor;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "e", function() {
                    return SurveyNumberPropertyEditor;
                });

                var SurveyPropertyEditorBase = (function() {
                    function SurveyPropertyEditorBase() {
                        this.value_ = null;
                        this.options = null;
                    }
                    SurveyPropertyEditorBase.registerEditor = function(name, creator) {
                        SurveyPropertyEditorBase.editorRegisteredList[name] = creator;
                    };
                    SurveyPropertyEditorBase.createEditor = function(editorType, func) {
                        var creator = SurveyPropertyEditorBase.editorRegisteredList[editorType];
                        if (!creator)
                            creator = SurveyPropertyEditorBase.editorRegisteredList[SurveyPropertyEditorBase.defaultEditor];
                        var propertyEditor = creator();
                        propertyEditor.onChanged = func;
                        return propertyEditor;
                    };
                    Object.defineProperty(SurveyPropertyEditorBase.prototype, "editorType", {
                        get: function() {
                            throw "editorType is not defined";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyEditorBase.prototype.getValueText = function(value) {
                        return value;
                    };
                    Object.defineProperty(SurveyPropertyEditorBase.prototype, "value", {
                        get: function() {
                            return this.value_;
                        },
                        set: function(value) {
                            value = this.getCorrectedValue(value);
                            this.setValueCore(value);
                            this.onValueChanged();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyPropertyEditorBase.prototype, "locale", {
                        get: function() {
                            if (this.onGetLocale)
                                return this.onGetLocale();
                            return "";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyEditorBase.prototype.setValueCore = function(value) {
                        this.value_ = value;
                    };
                    SurveyPropertyEditorBase.prototype.setTitle = function(value) {};
                    SurveyPropertyEditorBase.prototype.setObject = function(value) {};
                    SurveyPropertyEditorBase.prototype.onValueChanged = function() {};
                    SurveyPropertyEditorBase.prototype.getCorrectedValue = function(value) {
                        return value;
                    };
                    return SurveyPropertyEditorBase;
                }());

                SurveyPropertyEditorBase.defaultEditor = "string";
                SurveyPropertyEditorBase.editorRegisteredList = {};
                var SurveyStringPropertyEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyStringPropertyEditor, _super);

                    function SurveyStringPropertyEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyStringPropertyEditor.prototype, "editorType", {
                        get: function() {
                            return "string";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyStringPropertyEditor;
                }(SurveyPropertyEditorBase));

                var SurveyDropdownPropertyEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyDropdownPropertyEditor, _super);

                    function SurveyDropdownPropertyEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyDropdownPropertyEditor.prototype, "editorType", {
                        get: function() {
                            return "dropdown";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyDropdownPropertyEditor;
                }(SurveyPropertyEditorBase));

                var SurveyBooleanPropertyEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyBooleanPropertyEditor, _super);

                    function SurveyBooleanPropertyEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "editorType", {
                        get: function() {
                            return "boolean";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyBooleanPropertyEditor;
                }(SurveyPropertyEditorBase));

                var SurveyNumberPropertyEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyNumberPropertyEditor, _super);

                    function SurveyNumberPropertyEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyNumberPropertyEditor.prototype, "editorType", {
                        get: function() {
                            return "number";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyNumberPropertyEditor;
                }(SurveyPropertyEditorBase));

                SurveyPropertyEditorBase.registerEditor("string", function() {
                    return new SurveyStringPropertyEditor();
                });
                SurveyPropertyEditorBase.registerEditor("dropdown", function() {
                    return new SurveyDropdownPropertyEditor();
                });
                SurveyPropertyEditorBase.registerEditor("boolean", function() {
                    return new SurveyBooleanPropertyEditor();
                });
                SurveyPropertyEditorBase.registerEditor("number", function() {
                    return new SurveyNumberPropertyEditor();
                });


                /***/
            }),
            /* 5 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyModalEditor__ = __webpack_require__(8);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__editorLocalization__ = __webpack_require__(2);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyItemsEditor;
                });




                var SurveyPropertyItemsEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyItemsEditor, _super);

                    function SurveyPropertyItemsEditor() {
                        var _this = _super.call(this) || this;
                        _this.koItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
                        _this.value = [];
                        var self = _this;
                        self.onDeleteClick = function(item) {
                            self.koItems.remove(item);
                        };
                        self.onClearClick = function(item) {
                            self.koItems.removeAll();
                        };
                        self.onAddClick = function() {
                            self.AddItem();
                        };
                        self.onMoveUpClick = function(item) {
                            self.moveUp(item);
                        };
                        self.onMoveDownClick = function(item) {
                            self.moveDown(item);
                        };
                        return _this;
                    }
                    SurveyPropertyItemsEditor.prototype.getValueText = function(value) {
                        var len = value ? value.length : 0;
                        return __WEBPACK_IMPORTED_MODULE_3__editorLocalization__["a" /* editorLocalization */ ].getString("pe.items")["format"](len);
                    };
                    SurveyPropertyItemsEditor.prototype.getCorrectedValue = function(value) {
                        if (value == null || !Array.isArray(value))
                            value = [];
                        return value;
                    };
                    SurveyPropertyItemsEditor.prototype.AddItem = function() {
                        this.koItems.push(this.createNewEditorItem());
                    };
                    SurveyPropertyItemsEditor.prototype.moveUp = function(item) {
                        var arr = this.koItems();
                        var index = arr.indexOf(item);
                        if (index < 1)
                            return;
                        arr[index] = arr[index - 1];
                        arr[index - 1] = item;
                        this.koItems(arr);
                    };
                    SurveyPropertyItemsEditor.prototype.moveDown = function(item) {
                        var arr = this.koItems();
                        var index = arr.indexOf(item);
                        if (index < 0 || index >= arr.length - 1)
                            return;
                        arr[index] = arr[index + 1];
                        arr[index + 1] = item;
                        this.koItems(arr);
                    };
                    SurveyPropertyItemsEditor.prototype.onValueChanged = function() {
                        this.koItems(this.getItemsFromValue());
                    };
                    SurveyPropertyItemsEditor.prototype.getItemsFromValue = function(value) {
                        if (value === void 0) {
                            value = null;
                        }
                        var items = [];
                        if (!value)
                            value = this.value;
                        for (var i = 0; i < value.length; i++) {
                            items.push(this.createEditorItem(value[i]));
                        }
                        return items;
                    };
                    SurveyPropertyItemsEditor.prototype.onBeforeApply = function() {
                        var items = [];
                        var internalItems = this.koItems();
                        for (var i = 0; i < internalItems.length; i++) {
                            items.push(this.createItemFromEditorItem(internalItems[i]));
                        }
                        this.setValueCore(items);
                    };
                    SurveyPropertyItemsEditor.prototype.createNewEditorItem = function() {
                        throw "Override 'createNewEditorItem' method";
                    };
                    SurveyPropertyItemsEditor.prototype.createEditorItem = function(item) {
                        return item;
                    };
                    SurveyPropertyItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        return editorItem;
                    };
                    return SurveyPropertyItemsEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyModalEditor__["a" /* SurveyPropertyModalEditor */ ]));



                /***/
            }),
            /* 6 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(2);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return ObjType;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyHelper;
                });

                var ObjType;
                (function(ObjType) {
                    ObjType[ObjType["Unknown"] = 0] = "Unknown";
                    ObjType[ObjType["Survey"] = 1] = "Survey";
                    ObjType[ObjType["Page"] = 2] = "Page";
                    ObjType[ObjType["Panel"] = 3] = "Panel";
                    ObjType[ObjType["Question"] = 4] = "Question";
                })(ObjType || (ObjType = {}));
                var SurveyHelper = (function() {
                    function SurveyHelper() {}
                    SurveyHelper.getNewPageName = function(objs) {
                        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */ ].getString("ed.newPageName"));
                    };
                    SurveyHelper.getNewQuestionName = function(objs) {
                        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */ ].getString("ed.newQuestionName"));
                    };
                    SurveyHelper.getNewPanelName = function(objs) {
                        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */ ].getString("ed.newPanelName"));
                    };
                    SurveyHelper.getNewName = function(objs, baseName) {
                        var hash = {};
                        for (var i = 0; i < objs.length; i++) {
                            hash[objs[i].name] = true;
                        }
                        var num = 1;
                        while (true) {
                            if (!hash[baseName + num.toString()])
                                break;
                            num++;
                        }
                        return baseName + num.toString();
                    };
                    SurveyHelper.getObjectType = function(obj) {
                        if (!obj || !obj["getType"])
                            return ObjType.Unknown;
                        if (obj.getType() == "page")
                            return ObjType.Page;
                        if (obj.getType() == "panel")
                            return ObjType.Panel;
                        if (obj.getType() == "survey")
                            return ObjType.Survey;
                        if (obj["name"])
                            return ObjType.Question;
                        return ObjType.Unknown;
                    };
                    SurveyHelper.getObjectName = function(obj) {
                        if (obj["name"])
                            return obj["name"];
                        var objType = SurveyHelper.getObjectType(obj);
                        if (objType != ObjType.Page)
                            return "";
                        var data = obj.data;
                        var index = data.pages.indexOf(obj);
                        return "[Page " + (index + 1) + "]";
                    };
                    return SurveyHelper;
                }());



                /***/
            }),
            /* 7 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__objectProperty__ = __webpack_require__(13);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyObjectEditor;
                });




                var SurveyObjectEditor = (function() {
                    function SurveyObjectEditor(propertyEditorOptions) {
                        if (propertyEditorOptions === void 0) {
                            propertyEditorOptions = null;
                        }
                        this.propertyEditorOptions = null;
                        this.onPropertyValueChanged = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        this.setOptions(propertyEditorOptions);
                        this.koProperties = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
                        this.koActiveProperty = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koHasObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                    }
                    Object.defineProperty(SurveyObjectEditor.prototype, "selectedObject", {
                        get: function() {
                            return this.selectedObjectValue;
                        },
                        set: function(value) {
                            if (this.selectedObjectValue == value)
                                return;
                            this.koHasObject(value != null);
                            this.selectedObjectValue = value;
                            this.updateProperties();
                            this.updatePropertiesObject();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyObjectEditor.prototype.setOptions = function(propertyEditorOptions) {
                        this.propertyEditorOptions = propertyEditorOptions;
                    };
                    SurveyObjectEditor.prototype.getPropertyEditor = function(name) {
                        var properties = this.koProperties();
                        for (var i = 0; i < properties.length; i++) {
                            if (properties[i].name == name)
                                return properties[i];
                        }
                        return null;
                    };
                    SurveyObjectEditor.prototype.changeActiveProperty = function(property) {
                        this.koActiveProperty(property);
                    };
                    SurveyObjectEditor.prototype.ObjectChanged = function() {
                        this.updatePropertiesObject();
                    };
                    SurveyObjectEditor.prototype.updateProperties = function() {
                        var _this = this;
                        if (!this.selectedObject || !this.selectedObject.getType) {
                            this.koProperties([]);
                            this.koActiveProperty(null);
                            return;
                        }
                        var properties = __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["JsonObject"].metaData.getProperties(this.selectedObject.getType());
                        properties.sort(function(a, b) {
                            if (a.name == b.name)
                                return 0;
                            if (a.name > b.name)
                                return 1;
                            return -1;
                        });
                        var objectProperties = [];
                        var self = this;
                        var propEvent = function(property, newValue) {
                            self.onPropertyValueChanged.fire(_this, {
                                property: property.property,
                                object: property.object,
                                newValue: newValue
                            });
                        };
                        for (var i = 0; i < properties.length; i++) {
                            if (!this.canShowProperty(properties[i]))
                                continue;
                            var objectProperty = new __WEBPACK_IMPORTED_MODULE_1__objectProperty__["a" /* SurveyObjectProperty */ ](properties[i], propEvent, this.propertyEditorOptions);
                            var locName = this.selectedObject.getType() + '_' + properties[i].name;
                            objectProperty.displayName = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getPropertyName(locName);
                            var title = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getPropertyTitle(locName);
                            if (!title)
                                title = objectProperty.displayName;
                            objectProperty.title = title;
                            objectProperties.push(objectProperty);
                        }
                        this.koProperties(objectProperties);
                        this.koActiveProperty(this.getPropertyEditor("name"));
                    };
                    SurveyObjectEditor.prototype.canShowProperty = function(property) {
                        if (property["visible"] === false)
                            return false;
                        if (this.onCanShowPropertyCallback)
                            return this.onCanShowPropertyCallback(this.selectedObject, property);
                        return true;
                    };
                    SurveyObjectEditor.prototype.updatePropertiesObject = function() {
                        var properties = this.koProperties();
                        for (var i = 0; i < properties.length; i++) {
                            properties[i].object = this.selectedObject;
                        }
                    };
                    return SurveyObjectEditor;
                }());



                /***/
            }),
            /* 8 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__ = __webpack_require__(4);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyModalEditor;
                });
                /* unused harmony export SurveyPropertyTextEditor */
                /* unused harmony export SurveyPropertyHtmlEditor */
                /* unused harmony export SurveyPropertyExpressionEditor */



                var SurveyPropertyModalEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyModalEditor, _super);

                    function SurveyPropertyModalEditor() {
                        var _this = _super.call(this) || this;
                        _this.title = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        var self = _this;
                        self.onApplyClick = function() {
                            self.apply();
                        };
                        self.onResetClick = function() {
                            self.reset();
                        };
                        return _this;
                    }
                    SurveyPropertyModalEditor.prototype.setTitle = function(value) {
                        this.title(value);
                    };
                    SurveyPropertyModalEditor.prototype.hasError = function() {
                        return false;
                    };
                    SurveyPropertyModalEditor.prototype.onBeforeApply = function() {};
                    SurveyPropertyModalEditor.prototype.reset = function() {
                        this.value = this.value;
                    };
                    SurveyPropertyModalEditor.prototype.setObject = function(value) {
                        this.object = value;
                    };
                    Object.defineProperty(SurveyPropertyModalEditor.prototype, "isEditable", {
                        get: function() {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyModalEditor.prototype.apply = function() {
                        if (this.hasError())
                            return;
                        this.onBeforeApply();
                        if (this.onChanged) {
                            this.onChanged(this.value);
                        }
                    };
                    return SurveyPropertyModalEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ]));

                var SurveyPropertyTextEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyTextEditor, _super);

                    function SurveyPropertyTextEditor() {
                        var _this = _super.call(this) || this;
                        _this.koValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyTextEditor.prototype, "editorType", {
                        get: function() {
                            return "text";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyPropertyTextEditor.prototype, "isEditable", {
                        get: function() {
                            return true;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyTextEditor.prototype.getValueText = function(value) {
                        if (!value)
                            return null;
                        var str = value;
                        if (str.length > 20) {
                            str = str.substr(0, 20) + "...";
                        }
                        return str;
                    };
                    SurveyPropertyTextEditor.prototype.onValueChanged = function() {
                        this.koValue(this.value);
                    };
                    SurveyPropertyTextEditor.prototype.onBeforeApply = function() {
                        this.setValueCore(this.koValue());
                    };
                    return SurveyPropertyTextEditor;
                }(SurveyPropertyModalEditor));

                var SurveyPropertyHtmlEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyHtmlEditor, _super);

                    function SurveyPropertyHtmlEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyPropertyHtmlEditor.prototype, "editorType", {
                        get: function() {
                            return "html";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyPropertyHtmlEditor;
                }(SurveyPropertyTextEditor));

                var SurveyPropertyExpressionEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyExpressionEditor, _super);

                    function SurveyPropertyExpressionEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyPropertyExpressionEditor.prototype, "editorType", {
                        get: function() {
                            return "expression";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyPropertyExpressionEditor;
                }(SurveyPropertyTextEditor));

                __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("text", function() {
                    return new SurveyPropertyTextEditor();
                });
                __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("html", function() {
                    return new SurveyPropertyHtmlEditor();
                });
                __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("expression", function() {
                    return new SurveyPropertyExpressionEditor();
                });


                /***/
            }),
            /* 9 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(24);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditors_propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5__questionEditorGeneralProperties__ = __webpack_require__(18);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6__questionEditorDefinition__ = __webpack_require__(17);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_7_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_7_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyEditorShowWindow;
                });
                /* unused harmony export SurveyQuestionProperties */
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyQuestionEditor;
                });
                /* unused harmony export SurveyQuestionEditorTabBase */
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "c", function() {
                    return SurveyQuestionEditorTabGeneral;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "d", function() {
                    return SurveyQuestionEditorTabProperty;
                });








                var SurveyPropertyEditorShowWindow = (function() {
                    function SurveyPropertyEditorShowWindow() {
                        this.koVisible = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
                        this.koEditor = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
                    }
                    SurveyPropertyEditorShowWindow.prototype.show = function(questionBase, onChanged) {
                        var editor = new SurveyQuestionEditor(questionBase, this.onCanShowPropertyCallback);
                        editor.onChanged = onChanged;
                        this.koEditor(editor);
                        this.koVisible(true);
                        __WEBPACK_IMPORTED_MODULE_2_jquery__("#surveyquestioneditorwindow").modal("show");
                        editor.onHideWindow = function() {
                            __WEBPACK_IMPORTED_MODULE_2_jquery__("#surveyquestioneditorwindow").modal("hide");
                        };
                    };
                    return SurveyPropertyEditorShowWindow;
                }());

                var SurveyQuestionProperties = (function() {
                    function SurveyQuestionProperties(obj, onCanShowPropertyCallback) {
                        this.obj = obj;
                        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
                        this.properties = __WEBPACK_IMPORTED_MODULE_7_survey_knockout__["JsonObject"].metaData.getProperties(this.obj.getType());
                    }
                    SurveyQuestionProperties.prototype.getProperty = function(propertyName) {
                        var property = null;
                        for (var i = 0; i < this.properties.length; i++) {
                            if (this.properties[i].name == propertyName) {
                                property = this.properties[i];
                                break;
                            }
                        }
                        if (property && property["visible"] === false)
                            property = null;
                        if (property && this.onCanShowPropertyCallback) {
                            if (!this.onCanShowPropertyCallback(this.obj, property))
                                property = null;
                        }
                        return property;
                    };
                    return SurveyQuestionProperties;
                }());

                var SurveyQuestionEditor = (function() {
                    function SurveyQuestionEditor(obj, onCanShowPropertyCallback, className) {
                        if (className === void 0) {
                            className = null;
                        }
                        this.obj = obj;
                        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
                        this.className = className;
                        var self = this;
                        if (!this.className)
                            this.className = this.obj.getType();
                        this.properties = new SurveyQuestionProperties(obj, onCanShowPropertyCallback);
                        self.onApplyClick = function() {
                            self.apply();
                        };
                        self.onOkClick = function() {
                            self.apply();
                            if (!self.hasError() && self.onHideWindow)
                                self.onHideWindow();
                        };
                        self.onResetClick = function() {
                            self.reset();
                        };
                        this.onTabClick = function(tab) {
                            self.koActiveTab(tab.name);
                        };
                        var tabs = this.buildTabs();
                        this.koActiveTab = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](tabs[0].name);
                        this.koTabs = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](tabs);
                        this.koTitle = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        if (this.obj["name"]) {
                            this.koTitle(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.qEditorTitle")["format"](this.obj["name"]));
                        }
                    }
                    SurveyQuestionEditor.prototype.hasError = function() {
                        var tabs = this.koTabs();
                        for (var i = 0; i < tabs.length; i++) {
                            if (tabs[i].hasError()) {
                                this.koActiveTab(tabs[i].name);
                                return true;
                            }
                        }
                        return false;
                    };
                    SurveyQuestionEditor.prototype.reset = function() {
                        var tabs = this.koTabs();
                        for (var i = 0; i < tabs.length; i++) {
                            tabs[i].reset();
                        }
                    };
                    SurveyQuestionEditor.prototype.apply = function() {
                        if (this.hasError())
                            return;
                        var tabs = this.koTabs();
                        for (var i = 0; i < tabs.length; i++) {
                            tabs[i].apply();
                        }
                        if (this.onChanged) {
                            this.onChanged(this.obj);
                        }
                    };
                    SurveyQuestionEditor.prototype.buildTabs = function() {
                        var tabs = [];
                        var properties = new __WEBPACK_IMPORTED_MODULE_5__questionEditorGeneralProperties__["a" /* SurveyQuestionEditorGeneralProperties */ ](this.obj, __WEBPACK_IMPORTED_MODULE_6__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */ ].getProperties(this.className), this.onCanShowPropertyCallback);
                        tabs.push(new SurveyQuestionEditorTabGeneral(this.obj, properties));
                        this.addPropertiesTabs(tabs);
                        for (var i = 0; i < tabs.length; i++) {
                            tabs[i].onCanShowPropertyCallback = this.onCanShowPropertyCallback;
                        }
                        return tabs;
                    };
                    SurveyQuestionEditor.prototype.addPropertiesTabs = function(tabs) {
                        var tabNames = __WEBPACK_IMPORTED_MODULE_6__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */ ].getTabs(this.className);
                        for (var i = 0; i < tabNames.length; i++) {
                            var tabItem = tabNames[i];
                            var property = this.properties.getProperty(tabItem.name);
                            if (!property)
                                continue;
                            var editorTab = new SurveyQuestionEditorTabProperty(this.obj, property);
                            if (tabItem.title)
                                editorTab.title = tabItem.title;
                            tabs.push(editorTab);
                        }
                    };
                    return SurveyQuestionEditor;
                }());

                var SurveyQuestionEditorTabBase = (function() {
                    function SurveyQuestionEditorTabBase(obj) {
                        this.obj = obj;
                    }
                    Object.defineProperty(SurveyQuestionEditorTabBase.prototype, "name", {
                        get: function() {
                            return "name";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabBase.prototype, "title", {
                        get: function() {
                            if (this.titleValue)
                                return this.titleValue;
                            var str = __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.tabs." + this.name);
                            return str ? str : this.name;
                        },
                        set: function(value) {
                            this.titleValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabBase.prototype, "htmlTemplate", {
                        get: function() {
                            return "questioneditortab-" + this.name;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabBase.prototype, "templateObject", {
                        get: function() {
                            return this;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyQuestionEditorTabBase.prototype.hasError = function() {
                        return false;
                    };
                    SurveyQuestionEditorTabBase.prototype.reset = function() {};
                    SurveyQuestionEditorTabBase.prototype.apply = function() {};
                    SurveyQuestionEditorTabBase.prototype.getValue = function(property) {
                        if (property["getPropertyValue"])
                            return property["getPropertyValue"](this.obj); //TODO make the only call
                        if (property.hasToUseGetValue)
                            return property.getValue(this.obj);
                        return this.obj[property.name];
                    };
                    return SurveyQuestionEditorTabBase;
                }());

                var SurveyQuestionEditorTabGeneral = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyQuestionEditorTabGeneral, _super);

                    function SurveyQuestionEditorTabGeneral(obj, properties) {
                        if (properties === void 0) {
                            properties = null;
                        }
                        var _this = _super.call(this, obj) || this;
                        _this.obj = obj;
                        _this.properties = properties;
                        _this.properties = properties ? properties : new __WEBPACK_IMPORTED_MODULE_5__questionEditorGeneralProperties__["a" /* SurveyQuestionEditorGeneralProperties */ ](obj, __WEBPACK_IMPORTED_MODULE_6__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */ ].getProperties(obj.getType()), null);
                        return _this;
                    }
                    Object.defineProperty(SurveyQuestionEditorTabGeneral.prototype, "name", {
                        get: function() {
                            return "general";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabGeneral.prototype, "htmlTemplate", {
                        get: function() {
                            return "questioneditortab-general";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyQuestionEditorTabGeneral.prototype.hasError = function() {
                        return this.properties.hasError();
                    };
                    SurveyQuestionEditorTabGeneral.prototype.reset = function() {
                        this.properties.reset();
                    };
                    SurveyQuestionEditorTabGeneral.prototype.apply = function() {
                        this.properties.apply();
                    };
                    return SurveyQuestionEditorTabGeneral;
                }(SurveyQuestionEditorTabBase));

                var SurveyQuestionEditorTabProperty = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyQuestionEditorTabProperty, _super);

                    function SurveyQuestionEditorTabProperty(obj, property) {
                        var _this = _super.call(this, obj) || this;
                        _this.obj = obj;
                        _this.property = property;
                        _this.propertyEditorValue = __WEBPACK_IMPORTED_MODULE_3__propertyEditors_propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].createEditor(_this.property.type, null);
                        var self = _this;
                        _this.propertyEditorValue.onGetLocale = function() {
                            return self.doOnGetLocale();
                        };
                        _this.propertyEditorValue.value = _this.getValue(_this.property);
                        return _this;
                    }
                    SurveyQuestionEditorTabProperty.prototype.doOnGetLocale = function() {
                        if (this.obj && this.obj["getLocale"])
                            return this.obj["getLocale"]();
                        return "";
                    };
                    Object.defineProperty(SurveyQuestionEditorTabProperty.prototype, "name", {
                        get: function() {
                            return this.property.name;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyQuestionEditorTabProperty.prototype.hasError = function() {
                        return this.propertyEditor.hasError();
                    };
                    Object.defineProperty(SurveyQuestionEditorTabProperty.prototype, "htmlTemplate", {
                        get: function() {
                            return "propertyeditorcontent-" + this.property.type;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabProperty.prototype, "templateObject", {
                        get: function() {
                            return this.propertyEditor;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyQuestionEditorTabProperty.prototype, "propertyEditor", {
                        get: function() {
                            return this.propertyEditorValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyQuestionEditorTabProperty.prototype.reset = function() {
                        this.propertyEditorValue.value = this.getValue(this.property);
                    };
                    SurveyQuestionEditorTabProperty.prototype.apply = function() {
                        this.propertyEditor.apply();
                        this.obj[this.property.name] = this.propertyEditorValue.value;
                    };
                    return SurveyQuestionEditorTabProperty;
                }(SurveyQuestionEditorTabBase));



                /***/
            }),
            /* 10 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0__json5__ = __webpack_require__(11);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyTextWorker;
                });


                var TextParserPropery = (function() {
                    function TextParserPropery() {}
                    return TextParserPropery;
                }());
                var SurveyTextWorker = (function() {
                    function SurveyTextWorker(text) {
                        this.text = text;
                        if (!this.text || this.text.trim() == "") {
                            this.text = "{}";
                        }
                        this.errors = [];
                        this.process();
                    }
                    Object.defineProperty(SurveyTextWorker.prototype, "survey", {
                        get: function() {
                            return this.surveyValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyTextWorker.prototype, "isJsonCorrect", {
                        get: function() {
                            return this.surveyValue != null;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyTextWorker.prototype.process = function() {
                        try {
                            this.jsonValue = new __WEBPACK_IMPORTED_MODULE_0__json5__["a" /* SurveyJSON5 */ ](1).parse(this.text);
                        } catch (error) {
                            this.errors.push({
                                pos: {
                                    start: error.at,
                                    end: -1
                                },
                                text: error.message
                            });
                        }
                        if (this.jsonValue != null) {
                            this.updateJsonPositions(this.jsonValue);
                            this.surveyValue = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Survey"](this.jsonValue);
                            if (this.surveyValue.jsonErrors != null) {
                                for (var i = 0; i < this.surveyValue.jsonErrors.length; i++) {
                                    var error = this.surveyValue.jsonErrors[i];
                                    this.errors.push({
                                        pos: {
                                            start: error.at,
                                            end: -1
                                        },
                                        text: error.getFullDescription()
                                    });
                                }
                            }
                        }
                        this.surveyObjects = this.createSurveyObjects();
                        this.setEditorPositionByChartAt(this.surveyObjects);
                        this.setEditorPositionByChartAt(this.errors);
                    };
                    SurveyTextWorker.prototype.updateJsonPositions = function(jsonObj) {
                        jsonObj["pos"]["self"] = jsonObj;
                        for (var key in jsonObj) {
                            var obj = jsonObj[key];
                            if (obj && obj["pos"]) {
                                jsonObj["pos"][key] = obj["pos"];
                                this.updateJsonPositions(obj);
                            }
                        }
                    };
                    SurveyTextWorker.prototype.createSurveyObjects = function() {
                        var result = [];
                        if (this.surveyValue == null)
                            return result;
                        this.isSurveyAsPage = false;
                        for (var i = 0; i < this.surveyValue.pages.length; i++) {
                            var page = this.surveyValue.pages[i];
                            if (i == 0 && !page["pos"]) {
                                page["pos"] = this.surveyValue["pos"];
                                this.isSurveyAsPage = true;
                            }
                            result.push(page);
                            for (var j = 0; j < page.questions.length; j++) {
                                result.push(page.questions[j]);
                            }
                        }
                        return result;
                    };
                    SurveyTextWorker.prototype.setEditorPositionByChartAt = function(objects) {
                        if (objects == null || objects.length == 0)
                            return;
                        var position = {
                            row: 0,
                            column: 0
                        };
                        var atObjectsArray = this.getAtArray(objects);
                        var startAt = 0;
                        for (var i = 0; i < atObjectsArray.length; i++) {
                            var at = atObjectsArray[i].at;
                            position = this.getPostionByChartAt(position, startAt, at);
                            var obj = atObjectsArray[i].obj;
                            if (!obj.position)
                                obj.position = {};
                            if (at == obj.pos.start) {
                                obj.position.start = position;
                            } else {
                                if (at == obj.pos.end) {
                                    obj.position.end = position;
                                }
                            }
                            startAt = at;
                        }
                    };
                    SurveyTextWorker.prototype.getPostionByChartAt = function(startPosition, startAt, at) {
                        var result = {
                            row: startPosition.row,
                            column: startPosition.column
                        };
                        var curChar = startAt;
                        while (curChar < at) {
                            if (this.text.charAt(curChar) == SurveyTextWorker.newLineChar) {
                                result.row++;
                                result.column = 0;
                            } else {
                                result.column++;
                            }
                            curChar++;
                        }
                        return result;
                    };
                    SurveyTextWorker.prototype.getAtArray = function(objects) {
                        var result = [];
                        for (var i = 0; i < objects.length; i++) {
                            var obj = objects[i];
                            var pos = obj.pos;
                            if (!pos)
                                continue;
                            result.push({
                                at: pos.start,
                                obj: obj
                            });
                            if (pos.end > 0) {
                                result.push({
                                    at: pos.end,
                                    obj: obj
                                });
                            }
                        }
                        return result.sort(function(el1, el2) {
                            if (el1.at > el2.at)
                                return 1;
                            if (el1.at < el2.at)
                                return -1;
                            return 0;
                        });
                    };
                    return SurveyTextWorker;
                }());



                /***/
            }),
            /* 11 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyJSON5;
                });
                // This file is based on JSON5, http://json5.org/
                // The modification for getting object and properties location 'at' were maden.
                var SurveyJSON5 = (function() {
                    function SurveyJSON5(parseType) {
                        if (parseType === void 0) {
                            parseType = 0;
                        }
                        this.parseType = parseType;
                    }
                    SurveyJSON5.prototype.parse = function(source, reviver, startFrom, endAt) {
                        if (reviver === void 0) {
                            reviver = null;
                        }
                        if (startFrom === void 0) {
                            startFrom = 0;
                        }
                        if (endAt === void 0) {
                            endAt = -1;
                        }
                        var result;
                        this.text = String(source);
                        this.at = startFrom;
                        this.endAt = endAt;
                        this.ch = ' ';
                        result = this.value();
                        this.white();
                        if (this.ch) {
                            this.error("Syntax error");
                        }
                        // If there is a reviver function, we recursively walk the new structure,
                        // passing each name/value pair to the reviver function for possible
                        // transformation, starting with a temporary root object that holds the result
                        // in an empty key. If there is not a reviver function, we simply return the
                        // result.
                        return typeof reviver === 'function' ? (function walk(holder, key) {
                            var k, v, value = holder[key];
                            if (value && typeof value === 'object') {
                                for (k in value) {
                                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                                        v = walk(value, k);
                                        if (v !== undefined) {
                                            value[k] = v;
                                        } else {
                                            delete value[k];
                                        }
                                    }
                                }
                            }
                            return reviver.call(holder, key, value);
                        }({
                            '': result
                        }, '')) : result;
                    };
                    SurveyJSON5.prototype.error = function(m) {
                        // Call error when something is wrong.
                        var error = new SyntaxError();
                        error.message = m;
                        error["at"] = this.at;
                        throw error;
                    };
                    SurveyJSON5.prototype.next = function(c) {
                        if (c === void 0) {
                            c = null;
                        }
                        // If a c parameter is provided, verify that it matches the current character.
                        if (c && c !== this.ch) {
                            this.error("Expected '" + c + "' instead of '" + this.ch + "'");
                        }
                        // Get the this.next character. When there are no more characters,
                        // return the empty string.
                        this.ch = this.chartAt();
                        this.at += 1;
                        return this.ch;
                    };
                    SurveyJSON5.prototype.peek = function() {
                        // Get the this.next character without consuming it or
                        // assigning it to the this.ch varaible.
                        return this.chartAt();
                    };
                    SurveyJSON5.prototype.chartAt = function() {
                        if (this.endAt > -1 && this.at >= this.endAt)
                            return '';
                        return this.text.charAt(this.at);
                    };
                    SurveyJSON5.prototype.identifier = function() {
                        // Parse an identifier. Normally, reserved words are disallowed here, but we
                        // only use this for unquoted object keys, where reserved words are allowed,
                        // so we don't check for those here. References:
                        // - http://es5.github.com/#x7.6
                        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
                        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
                        // TODO Identifiers can have Unicode "letters" in them; add support for those.
                        var key = this.ch;
                        // Identifiers must start with a letter, _ or $.
                        if ((this.ch !== '_' && this.ch !== '$') &&
                            (this.ch < 'a' || this.ch > 'z') &&
                            (this.ch < 'A' || this.ch > 'Z')) {
                            this.error("Bad identifier");
                        }
                        // Subsequent characters can contain digits.
                        while (this.next() && (this.ch === '_' || this.ch === '$' ||
                                (this.ch >= 'a' && this.ch <= 'z') ||
                                (this.ch >= 'A' && this.ch <= 'Z') ||
                                (this.ch >= '0' && this.ch <= '9'))) {
                            key += this.ch;
                        }
                        return key;
                    };
                    SurveyJSON5.prototype.number = function() {
                        // Parse a number value.
                        var number, sign = '',
                            string = '',
                            base = 10;
                        if (this.ch === '-' || this.ch === '+') {
                            sign = this.ch;
                            this.next(this.ch);
                        }
                        // support for Infinity (could tweak to allow other words):
                        if (this.ch === 'I') {
                            number = this.word();
                            if (typeof number !== 'number' || isNaN(number)) {
                                this.error('Unexpected word for number');
                            }
                            return (sign === '-') ? -number : number;
                        }
                        // support for NaN
                        if (this.ch === 'N') {
                            number = this.word();
                            if (!isNaN(number)) {
                                this.error('expected word to be NaN');
                            }
                            // ignore sign as -NaN also is NaN
                            return number;
                        }
                        if (this.ch === '0') {
                            string += this.ch;
                            this.next();
                            if (this.ch === 'x' || this.ch === 'X') {
                                string += this.ch;
                                this.next();
                                base = 16;
                            } else if (this.ch >= '0' && this.ch <= '9') {
                                this.error('Octal literal');
                            }
                        }
                        switch (base) {
                            case 10:
                                while (this.ch >= '0' && this.ch <= '9') {
                                    string += this.ch;
                                    this.next();
                                }
                                if (this.ch === '.') {
                                    string += '.';
                                    while (this.next() && this.ch >= '0' && this.ch <= '9') {
                                        string += this.ch;
                                    }
                                }
                                if (this.ch === 'e' || this.ch === 'E') {
                                    string += this.ch;
                                    this.next();
                                    if (this.ch === '-' || this.ch === '+') {
                                        string += this.ch;
                                        this.next();
                                    }
                                    while (this.ch >= '0' && this.ch <= '9') {
                                        string += this.ch;
                                        this.next();
                                    }
                                }
                                break;
                            case 16:
                                while (this.ch >= '0' && this.ch <= '9' || this.ch >= 'A' && this.ch <= 'F' || this.ch >= 'a' && this.ch <= 'f') {
                                    string += this.ch;
                                    this.next();
                                }
                                break;
                        }
                        if (sign === '-') {
                            number = -string;
                        } else {
                            number = +string;
                        }
                        if (!isFinite(number)) {
                            this.error("Bad number");
                        } else {
                            return number;
                        }
                    };
                    SurveyJSON5.prototype.string = function() {
                        // Parse a string value.
                        var hex, i, string = '',
                            delim, // double quote or single quote
                            uffff;
                        // When parsing for string values, we must look for ' or " and \ characters.
                        if (this.ch === '"' || this.ch === "'") {
                            delim = this.ch;
                            while (this.next()) {
                                if (this.ch === delim) {
                                    this.next();
                                    return string;
                                } else if (this.ch === '\\') {
                                    this.next();
                                    if (this.ch === 'u') {
                                        uffff = 0;
                                        for (i = 0; i < 4; i += 1) {
                                            hex = parseInt(this.next(), 16);
                                            if (!isFinite(hex)) {
                                                break;
                                            }
                                            uffff = uffff * 16 + hex;
                                        }
                                        string += String.fromCharCode(uffff);
                                    } else if (this.ch === '\r') {
                                        if (this.peek() === '\n') {
                                            this.next();
                                        }
                                    } else if (typeof SurveyJSON5.escapee[this.ch] === 'string') {
                                        string += SurveyJSON5.escapee[this.ch];
                                    } else {
                                        break;
                                    }
                                } else if (this.ch === '\n') {
                                    // unescaped newlines are invalid; see:
                                    // https://github.com/aseemk/json5/issues/24
                                    // TODO this feels special-cased; are there other
                                    // invalid unescaped chars?
                                    break;
                                } else {
                                    string += this.ch;
                                }
                            }
                        }
                        this.error("Bad string");
                    };
                    SurveyJSON5.prototype.inlineComment = function() {
                        // Skip an inline comment, assuming this is one. The current character should
                        // be the second / character in the // pair that begins this inline comment.
                        // To finish the inline comment, we look for a newline or the end of the text.
                        if (this.ch !== '/') {
                            this.error("Not an inline comment");
                        }
                        do {
                            this.next();
                            if (this.ch === '\n' || this.ch === '\r') {
                                this.next();
                                return;
                            }
                        } while (this.ch);
                    };
                    SurveyJSON5.prototype.blockComment = function() {
                        // Skip a block comment, assuming this is one. The current character should be
                        // the * character in the /* pair that begins this block comment.
                        // To finish the block comment, we look for an ending */ pair of characters,
                        // but we also watch for the end of text before the comment is terminated.
                        if (this.ch !== '*') {
                            this.error("Not a block comment");
                        }
                        do {
                            this.next();
                            while (this.ch === '*') {
                                this.next('*');
                                if (this.ch === '/') {
                                    this.next('/');
                                    return;
                                }
                            }
                        } while (this.ch);
                        this.error("Unterminated block comment");
                    };
                    SurveyJSON5.prototype.comment = function() {
                        // Skip a comment, whether inline or block-level, assuming this is one.
                        // Comments always begin with a / character.
                        if (this.ch !== '/') {
                            this.error("Not a comment");
                        }
                        this.next('/');
                        if (this.ch === '/') {
                            this.inlineComment();
                        } else if (this.ch === '*') {
                            this.blockComment();
                        } else {
                            this.error("Unrecognized comment");
                        }
                    };
                    SurveyJSON5.prototype.white = function() {
                        // Skip whitespace and comments.
                        // Note that we're detecting comments by only a single / character.
                        // This works since regular expressions are not valid JSON(5), but this will
                        // break if there are other valid values that begin with a / character!
                        while (this.ch) {
                            if (this.ch === '/') {
                                this.comment();
                            } else if (SurveyJSON5.ws.indexOf(this.ch) >= 0) {
                                this.next();
                            } else {
                                return;
                            }
                        }
                    };
                    SurveyJSON5.prototype.word = function() {
                        // true, false, or null.
                        switch (this.ch) {
                            case 't':
                                this.next('t');
                                this.next('r');
                                this.next('u');
                                this.next('e');
                                return true;
                            case 'f':
                                this.next('f');
                                this.next('a');
                                this.next('l');
                                this.next('s');
                                this.next('e');
                                return false;
                            case 'n':
                                this.next('n');
                                this.next('u');
                                this.next('l');
                                this.next('l');
                                return null;
                            case 'I':
                                this.next('I');
                                this.next('n');
                                this.next('f');
                                this.next('i');
                                this.next('n');
                                this.next('i');
                                this.next('t');
                                this.next('y');
                                return Infinity;
                            case 'N':
                                this.next('N');
                                this.next('a');
                                this.next('N');
                                return NaN;
                        }
                        this.error("Unexpected '" + this.ch + "'");
                    };
                    SurveyJSON5.prototype.array = function() {
                        // Parse an array value.
                        var array = [];
                        if (this.ch === '[') {
                            this.next('[');
                            this.white();
                            while (this.ch) {
                                if (this.ch === ']') {
                                    this.next(']');
                                    return array; // Potentially empty array
                                }
                                // ES5 allows omitting elements in arrays, e.g. [,] and
                                // [,null]. We don't allow this in JSON5.
                                if (this.ch === ',') {
                                    this.error("Missing array element");
                                } else {
                                    array.push(this.value());
                                }
                                this.white();
                                // If there's no comma after this value, this needs to
                                // be the end of the array.
                                if (this.ch !== ',') {
                                    this.next(']');
                                    return array;
                                }
                                this.next(',');
                                this.white();
                            }
                        }
                        this.error("Bad array");
                    };
                    SurveyJSON5.prototype.object = function() {
                        // Parse an object value.
                        var key, start, isFirstProperty = true,
                            object = {};
                        if (this.parseType > 0) {
                            object[SurveyJSON5.positionName] = {
                                start: this.at - 1
                            };
                        }
                        if (this.ch === '{') {
                            this.next('{');
                            this.white();
                            start = this.at - 1;
                            while (this.ch) {
                                if (this.ch === '}') {
                                    if (this.parseType > 0) {
                                        object[SurveyJSON5.positionName].end = start;
                                    }
                                    this.next('}');
                                    return object; // Potentially empty object
                                }
                                // Keys can be unquoted. If they are, they need to be
                                // valid JS identifiers.
                                if (this.ch === '"' || this.ch === "'") {
                                    key = this.string();
                                } else {
                                    key = this.identifier();
                                }
                                this.white();
                                if (this.parseType > 1) {
                                    object[SurveyJSON5.positionName][key] = {
                                        start: start,
                                        valueStart: this.at
                                    };
                                }
                                this.next(':');
                                object[key] = this.value();
                                if (this.parseType > 1) {
                                    start = this.at - 1;
                                    object[SurveyJSON5.positionName][key].valueEnd = start;
                                    object[SurveyJSON5.positionName][key].end = start;
                                }
                                this.white();
                                // If there's no comma after this pair, this needs to be
                                // the end of the object.
                                if (this.ch !== ',') {
                                    if (this.parseType > 1) {
                                        object[SurveyJSON5.positionName][key].valueEnd--;
                                        object[SurveyJSON5.positionName][key].end--;
                                    }
                                    if (this.parseType > 0) {
                                        object[SurveyJSON5.positionName].end = this.at - 1;
                                    }
                                    this.next('}');
                                    return object;
                                }
                                if (this.parseType > 1) {
                                    object[SurveyJSON5.positionName][key].valueEnd--;
                                    if (!isFirstProperty) {
                                        object[SurveyJSON5.positionName][key].end--;
                                    }
                                }
                                this.next(',');
                                this.white();
                                isFirstProperty = false;
                            }
                        }
                        this.error("Bad object");
                    };
                    SurveyJSON5.prototype.value = function() {
                        // Parse a JSON value. It could be an object, an array, a string, a number,
                        // or a word.
                        this.white();
                        switch (this.ch) {
                            case '{':
                                return this.object();
                            case '[':
                                return this.array();
                            case '"':
                            case "'":
                                return this.string();
                            case '-':
                            case '+':
                            case '.':
                                return this.number();
                            default:
                                return this.ch >= '0' && this.ch <= '9' ? this.number() : this.word();
                        }
                    };
                    SurveyJSON5.prototype.stringify = function(obj, replacer, space) {
                        if (replacer === void 0) {
                            replacer = null;
                        }
                        if (space === void 0) {
                            space = null;
                        }
                        if (replacer && (typeof(replacer) !== "function" && !this.isArray(replacer))) {
                            throw new Error('Replacer must be a function or an array');
                        }
                        this.replacer = replacer;
                        this.indentStr = this.getIndent(space);
                        this.objStack = [];
                        // special case...when undefined is used inside of
                        // a compound object/array, return null.
                        // but when top-level, return undefined
                        var topLevelHolder = {
                            "": obj
                        };
                        if (obj === undefined) {
                            return this.getReplacedValueOrUndefined(topLevelHolder, '', true);
                        }
                        return this.internalStringify(topLevelHolder, '', true);
                    };
                    SurveyJSON5.prototype.getIndent = function(space) {
                        if (space) {
                            if (typeof space === "string") {
                                return space;
                            } else if (typeof space === "number" && space >= 0) {
                                return this.makeIndent(" ", space, true);
                            }
                        }
                        return "";
                    };
                    SurveyJSON5.prototype.getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
                        var value = holder[key];
                        // Replace the value with its toJSON value first, if possible
                        if (value && value.toJSON && typeof value.toJSON === "function") {
                            value = value.toJSON();
                        }
                        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
                        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
                        if (typeof(this.replacer) === "function") {
                            return this.replacer.call(holder, key, value);
                        } else if (this.replacer) {
                            if (isTopLevel || this.isArray(holder) || this.replacer.indexOf(key) >= 0) {
                                return value;
                            } else {
                                return undefined;
                            }
                        } else {
                            return value;
                        }
                    };
                    SurveyJSON5.prototype.isWordChar = function(char) {
                        return (char >= 'a' && char <= 'z') ||
                            (char >= 'A' && char <= 'Z') ||
                            (char >= '0' && char <= '9') ||
                            char === '_' || char === '$';
                    };
                    SurveyJSON5.prototype.isWordStart = function(char) {
                        return (char >= 'a' && char <= 'z') ||
                            (char >= 'A' && char <= 'Z') ||
                            char === '_' || char === '$';
                    };
                    SurveyJSON5.prototype.isWord = function(key) {
                        if (typeof key !== 'string') {
                            return false;
                        }
                        if (!this.isWordStart(key[0])) {
                            return false;
                        }
                        var i = 1,
                            length = key.length;
                        while (i < length) {
                            if (!this.isWordChar(key[i])) {
                                return false;
                            }
                            i++;
                        }
                        return true;
                    };
                    // polyfills
                    SurveyJSON5.prototype.isArray = function(obj) {
                        if (Array.isArray) {
                            return Array.isArray(obj);
                        } else {
                            return Object.prototype.toString.call(obj) === '[object Array]';
                        }
                    };
                    SurveyJSON5.prototype.isDate = function(obj) {
                        return Object.prototype.toString.call(obj) === '[object Date]';
                    };
                    SurveyJSON5.prototype.isNaN = function(val) {
                        return typeof val === 'number' && val !== val;
                    };
                    SurveyJSON5.prototype.checkForCircular = function(obj) {
                        for (var i = 0; i < this.objStack.length; i++) {
                            if (this.objStack[i] === obj) {
                                throw new TypeError("Converting circular structure to JSON");
                            }
                        }
                    };
                    SurveyJSON5.prototype.makeIndent = function(str, num, noNewLine) {
                        if (noNewLine === void 0) {
                            noNewLine = false;
                        }
                        if (!str) {
                            return "";
                        }
                        // indentation no more than 10 chars
                        if (str.length > 10) {
                            str = str.substring(0, 10);
                        }
                        var indent = noNewLine ? "" : "\n";
                        for (var i = 0; i < num; i++) {
                            indent += str;
                        }
                        return indent;
                    };
                    SurveyJSON5.prototype.escapeString = function(str) {
                        // If the string contains no control characters, no quote characters, and no
                        // backslash characters, then we can safely slap some quotes around it.
                        // Otherwise we must also replace the offending characters with safe escape
                        // sequences.
                        SurveyJSON5.escapable.lastIndex = 0;
                        return SurveyJSON5.escapable.test(str) ? '"' + str.replace(SurveyJSON5.escapable, function(a) {
                            var c = SurveyJSON5.meta[a];
                            return typeof c === 'string' ?
                                c :
                                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                        }) + '"' : '"' + str + '"';
                    };
                    // End
                    SurveyJSON5.prototype.internalStringify = function(holder, key, isTopLevel) {
                        var buffer, res;
                        // Replace the value, if necessary
                        var obj_part = this.getReplacedValueOrUndefined(holder, key, isTopLevel);
                        if (obj_part && !this.isDate(obj_part)) {
                            // unbox objects
                            // don't unbox dates, since will turn it into number
                            obj_part = obj_part.valueOf();
                        }
                        switch (typeof obj_part) {
                            case "boolean":
                                return obj_part.toString();
                            case "number":
                                if (isNaN(obj_part) || !isFinite(obj_part)) {
                                    return "null";
                                }
                                return obj_part.toString();
                            case "string":
                                return this.escapeString(obj_part.toString());
                            case "object":
                                if (obj_part === null) {
                                    return "null";
                                } else if (this.isArray(obj_part)) {
                                    this.checkForCircular(obj_part);
                                    buffer = "[";
                                    this.objStack.push(obj_part);
                                    for (var i = 0; i < obj_part.length; i++) {
                                        res = this.internalStringify(obj_part, i, false);
                                        buffer += this.makeIndent(this.indentStr, this.objStack.length);
                                        if (res === null || typeof res === "undefined") {
                                            buffer += "null";
                                        } else {
                                            buffer += res;
                                        }
                                        if (i < obj_part.length - 1) {
                                            buffer += ",";
                                        } else if (this.indentStr) {
                                            buffer += "\n";
                                        }
                                    }
                                    this.objStack.pop();
                                    buffer += this.makeIndent(this.indentStr, this.objStack.length, true) + "]";
                                } else {
                                    this.checkForCircular(obj_part);
                                    buffer = "{";
                                    var nonEmpty = false;
                                    this.objStack.push(obj_part);
                                    for (var prop in obj_part) {
                                        if (obj_part.hasOwnProperty(prop)) {
                                            var value = this.internalStringify(obj_part, prop, false);
                                            isTopLevel = false;
                                            if (typeof value !== "undefined" && value !== null) {
                                                buffer += this.makeIndent(this.indentStr, this.objStack.length);
                                                nonEmpty = true;
                                                var propKey = this.isWord(prop) ? prop : this.escapeString(prop);
                                                buffer += propKey + ":" + (this.indentStr ? ' ' : '') + value + ",";
                                            }
                                        }
                                    }
                                    this.objStack.pop();
                                    if (nonEmpty) {
                                        buffer = buffer.substring(0, buffer.length - 1) + this.makeIndent(this.indentStr, this.objStack.length) + "}";
                                    } else {
                                        buffer = '{}';
                                    }
                                }
                                return buffer;
                            default:
                                // functions and undefined should be ignored
                                return undefined;
                        }
                    };
                    return SurveyJSON5;
                }());

                SurveyJSON5.positionName = "pos";
                SurveyJSON5.escapee = {
                    "'": "'",
                    '"': '"',
                    '\\': '\\',
                    '/': '/',
                    '\n': '',
                    b: '\b',
                    f: '\f',
                    n: '\n',
                    r: '\r',
                    t: '\t'
                };
                SurveyJSON5.ws = [
                    ' ',
                    '\t',
                    '\r',
                    '\n',
                    '\v',
                    '\f',
                    '\xA0',
                    '\uFEFF'
                ];
                // Copied from Crokford's implementation of JSON
                // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
                // Begin
                SurveyJSON5.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                SurveyJSON5.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                SurveyJSON5.meta = {
                    '\b': '\\b',
                    '\t': '\\t',
                    '\n': '\\n',
                    '\f': '\\f',
                    '\r': '\\r',
                    '"': '\\"',
                    '\\': '\\\\'
                };


                /***/
            }),
            /* 12 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_survey_knockout__);
                /* unused harmony export DragDropTargetElement */
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return DragDropHelper;
                });

                var DragDropTargetElement = (function() {
                    function DragDropTargetElement(page, target, source) {
                        this.page = page;
                        this.target = target;
                        this.source = source;
                    }
                    DragDropTargetElement.prototype.moveTo = function(destination, isBottom, isEdge) {
                        if (isEdge === void 0) {
                            isEdge = false;
                        }
                        //console.log("dest: " + destination.name + ", isBottom:" + isBottom + ", isEdge:" + isEdge);
                        isEdge = isEdge || !destination.isPanel;
                        if (destination === this.target)
                            return !this.target.isPanel;
                        var destInfo = this.findInfo(destination, isEdge);
                        if (!destInfo) {
                            this.clear();
                            return false;
                        }
                        var targetInfo = this.findInfo(this.target);
                        this.updateInfo(destInfo, isBottom, isEdge);
                        if (this.isInfoEquals(targetInfo, destInfo))
                            return true;
                        this.clearByInfo(targetInfo);
                        destInfo = this.findInfo(destination, isEdge);
                        if (!destInfo)
                            return false;
                        this.updateInfo(destInfo, isBottom, isEdge);
                        if (!this.canMove(destInfo))
                            return false;
                        this.addInfo(destInfo);
                        return true;
                    };
                    DragDropTargetElement.prototype.doDrop = function() {
                        var destInfo = this.findInfo(this.target);
                        if (!destInfo)
                            return;
                        var index = this.getIndexByInfo(destInfo);
                        destInfo.panel.addElement(this.getNewTargetElement(), index);
                        if (this.source) {
                            var srcInfo = this.findInfo(this.source);
                            var panel = srcInfo ? srcInfo.panel : this.page;
                            panel.removeElement(this.source);
                        }
                    };
                    DragDropTargetElement.prototype.clear = function() {
                        this.clearByInfo(this.findInfo(this.target));
                    };
                    DragDropTargetElement.prototype.getIndexByInfo = function(info) {
                        if (!info)
                            return 0;
                        var rows = info.panel.koRows();
                        var index = 0;
                        for (var i = 0; i < info.rIndex; i++) {
                            index += rows[i]["koElements"]().length;
                        }
                        return index + info.elIndex;
                    };
                    DragDropTargetElement.prototype.canMove = function (destInfo) {
                        if (this.target.isPanel && destInfo.element) {
                            if (this.target == destInfo.element || this.target.containsElement(destInfo.element))
                                return false;
                            if (this.source && (this.source == destInfo.element || this.source.containsElement(destInfo.element)))
                                return false;
                        }
                        if (!this.source)
                            return true;
                        var srcInfo = this.findInfo(this.source);
                        if (srcInfo == null || srcInfo.panel != destInfo.panel)
                            return true;
                        var srcIndex = this.getIndexByInfo(srcInfo);
                        var destIndex = this.getIndexByInfo(destInfo);
                        var diff = destIndex - srcIndex;
                        return diff < 0 || diff > 1;
                    };
                    DragDropTargetElement.prototype.isLastElementInRow = function(info) {
                        return info.elIndex == info.panel["koRows"]()[info.rIndex]["koElements"]().length - 1;
                    };
                    DragDropTargetElement.prototype.updateInfo = function(info, isBottom, isEdge) {
                        if (info.rIndex < 0)
                            return;
                        if (this.target.startWithNewLine) {
                            if (isBottom)
                                info.rIndex++;
                        } else {
                            if (isBottom) {
                                info.elIndex++;
                            } else {
                                if (info.elIndex == 0 && info.rIndex > 0) {
                                    info.rIndex--;
                                    info.elIndex = info.panel["koRows"]()[info.rIndex]["koElements"]().length;
                                }
                            }
                        }
                    };
                    DragDropTargetElement.prototype.addInfo = function(info) {
                        if (this.target.startWithNewLine || info.elIndex < 1 ||
                            info.rIndex < 0 || info.rIndex >= info.panel.koRows().length) {
                            this.AddInfoAsRow(info);
                        } else {
                            var row = info.panel.koRows()[info.rIndex];
                            var elements = row["koElements"]();
                            if (info.elIndex < elements.length) {
                                elements.splice(info.elIndex, 0, this.target);
                            } else {
                                elements.push(this.target);
                            }
                            row["koElements"](elements);
                            row.updateVisible();
                        }
                    };
                    DragDropTargetElement.prototype.AddInfoAsRow = function(info) {
                        var row = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["QuestionRow"](info.panel);
                        if (this.target.isPanel) {
                            this.target.parent = info.panel;
                        }
                        row.addElement(this.target);
                        var rows = info.panel.koRows();
                        if (info.rIndex >= 0 && info.rIndex < info.panel.koRows().length) {
                            rows.splice(info.rIndex, 0, row);
                        } else {
                            rows.push(row);
                        }
                        info.panel.koRows(rows);
                    };
                    DragDropTargetElement.prototype.clearByInfo = function(info) {
                        if (info == null)
                            return;
                        var rows = info.panel.koRows();
                        if (info.rIndex < 0 || info.rIndex >= rows.length)
                            return;
                        var row = rows[info.rIndex];
                        var elements = row["koElements"]();
                        if (row["koElements"]().length > 1) {
                            elements.splice(info.elIndex, 1);
                            row["koElements"](elements);
                            row.updateVisible();
                        } else {
                            rows.splice(info.rIndex, 1);
                            info.panel.koRows(rows);
                        }
                    };
                    DragDropTargetElement.prototype.isInfoEquals = function(a, b) {
                        if (a == null || b == null)
                            return false;
                        return a.panel === b.panel && a.rIndex === b.rIndex && a.elIndex === b.elIndex;
                    };
                    DragDropTargetElement.prototype.findInfo = function(el, isEdge) {
                        if (isEdge === void 0) {
                            isEdge = false;
                        }
                        return this.findInfoInPanel(this.page, el, isEdge);
                    };
                    DragDropTargetElement.prototype.findInfoInPanel = function(panel, el, isEdge) {
                        if (el == panel) {
                            var parent = panel;
                            if (panel.parent && (isEdge || this.target.isPanel)) {
                                parent = panel.parent;
                            }
                            return {
                                panel: parent,
                                row: null,
                                rIndex: 0,
                                elIndex: 0,
                                element: panel
                            };
                        }
                        var rows = panel["koRows"]();
                        for (var i = 0; i < rows.length; i++) {
                            var row = rows[i];
                            var elements = row["koElements"]();
                            for (var j = 0; j < elements.length; j++) {
                                if (elements[j].isPanel) {
                                    var res = this.findInfoInPanel(elements[j], el, isEdge);
                                    if (res) {
                                        if (res.element == elements[j]) {
                                            res.rIndex = i;
                                            res.elIndex = j;
                                        }
                                        return res;
                                    }
                                } else {
                                    if (elements[j] == el)
                                        return {
                                            panel: panel,
                                            row: row,
                                            rIndex: i,
                                            elIndex: j,
                                            element: elements[j]
                                        };
                                }
                            }
                        }
                        return null;
                    };
                    DragDropTargetElement.prototype.getNewTargetElement = function() {
                        var result = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData.createClass(this.target.getType());
                        var json = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toJsonObject(this.target);
                        new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toObject(json, result);
                        return result;
                    };
                    return DragDropTargetElement;
                }());

                var DragDropHelper = (function () {
                    function DragDropHelper(data, onModifiedCallback, scrollableElName) {
                        if (scrollableElName === void 0) {
                            scrollableElName = null;
                        }
                        this.data = data;
                        this.scrollableElement = null;
                        this.ddTarget = null;
                        this.id = DragDropHelper.counter++;
                        this.isScrollStop = true;
                        this.onModifiedCallback = onModifiedCallback;
                        this.scrollableElement = document.getElementById((scrollableElName ? scrollableElName : "scrollableDiv"));
                        this.prevCoordinates = {
                            x: -1,
                            y: -1
                        };
                    }
                    Object.defineProperty(DragDropHelper.prototype, "survey", {
                        get: function() {
                            return this.data;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DragDropHelper.prototype.startDragQuestion = function (event, element) {
                        return false;
                        //var json = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toJsonObject(element);
                        //json["type"] = element.getType();
                        //this.prepareData(event, element.name, json);
                        //this.ddTarget.source = element;
                    };
                    DragDropHelper.prototype.startDragToolboxItem = function (event, elementName, elementJson) {
                        return false;
                        //this.prepareData(event, elementName, elementJson);
                    };
                    DragDropHelper.prototype.isSurveyDragging = function(event) {
                        if (!event)
                            return false;
                        var data = this.getData(event).text;
                        return data && data.indexOf(DragDropHelper.dataStart) == 0;
                    };
                    DragDropHelper.prototype.doDragDropOver = function (event, element, isEdge) {
                        if (isEdge === void 0) {
                            isEdge = false;
                        }
                        event = this.getEvent(event);
                        if (this.isSameCoordinates(event))
                            return;
                        this.checkScrollY(event);
                        if (!element || !this.isSurveyDragging(event) || this.isSamePlace(event, element))
                            return;
                        var bottomInfo = this.isBottom(event, element);
                        isEdge = element.isPanel ? isEdge && bottomInfo.isEdge : true;
                        if (element.isPanel && !isEdge && element.elements.length > 0)
                            return;
                        this.ddTarget.moveTo(element, bottomInfo.isBottom, isEdge);
                    };
                    DragDropHelper.prototype.end = function() {
                        if (this.ddTarget) {
                            this.ddTarget.clear();
                        }
                        this.isScrollStop = true;
                        this.clearData();
                    };
                    DragDropHelper.prototype.doDrop = function (event) {
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        }
                        if (this.isSurveyDragging(event)) {
                            this.ddTarget.doDrop();
                            if (this.onModifiedCallback)
                                this.onModifiedCallback();
                        }
                        this.end();
                    };
                    DragDropHelper.prototype.doLeavePage = function(event) {
                        this.ddTarget.clear();
                    };
                    DragDropHelper.prototype.scrollToElement = function(el) {
                        if (!this.scrollableElement || !el)
                            return;
                        el.scrollIntoView(false);
                    };
                    DragDropHelper.prototype.createTargetElement = function(elementName, json) {
                        if (!elementName || !json)
                            return null;
                        var targetElement = null;
                        targetElement = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData.createClass(json["type"]);
                        new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toObject(json, targetElement);
                        targetElement.name = elementName;
                        targetElement.setData(this.survey);
                        targetElement.renderWidth = "100%";
                        targetElement["koIsDragging"](true);
                        return targetElement;
                    };
                    DragDropHelper.prototype.isBottom = function(event, surveyEl) {
                        event = this.getEvent(event);
                        var height = event.currentTarget["clientHeight"];
                        var y = event.offsetY;
                        if (event.hasOwnProperty('layerX')) {
                            y = event.layerY - event.currentTarget["offsetTop"];
                        }
                        return {
                            isBottom: y > height / 2,
                            isEdge: y <= DragDropHelper.edgeHeight || height - y <= DragDropHelper.edgeHeight
                        };
                    };
                    DragDropHelper.prototype.isSameCoordinates = function(event) {
                        var res = Math.abs(event.pageX - this.prevCoordinates.x) > 5 || Math.abs(event.pageY - this.prevCoordinates.y) > 5;
                        if (res) {
                            this.prevCoordinates.x = event.pageX;
                            this.prevCoordinates.y = event.pageY;
                        }
                        return !res;
                    };
                    DragDropHelper.prototype.isSamePlace = function(event, element) {
                        var prev = DragDropHelper.prevEvent;
                        if (prev.element != element || Math.abs(event.clientX - prev.x) > 5 || Math.abs(event.clientY - prev.y) > 5) {
                            prev.element = element;
                            prev.x = event.clientX;
                            prev.y = event.clientY;
                            return false;
                        }
                        return true;
                    };
                    DragDropHelper.prototype.checkScrollY = function(e) {
                        if (!this.scrollableElement)
                            return;
                        var y = this.getScrollableElementPosY(e);
                        if (y < 0)
                            return;
                        this.isScrollStop = true;
                        var height = this.scrollableElement["clientHeight"];
                        if (y < DragDropHelper.ScrollOffset && y >= 0) {
                            this.isScrollStop = false;
                            this.doScrollY(-1);
                        }
                        if (height - y < DragDropHelper.ScrollOffset && height >= y) {
                            this.isScrollStop = false;
                            this.doScrollY(1);
                        }
                    };
                    DragDropHelper.prototype.doScrollY = function(step) {
                        var el = this.scrollableElement;
                        var scrollY = el.scrollTop + step;
                        if (scrollY < 0) {
                            this.isScrollStop = true;
                            return;
                        }
                        el.scrollTop = scrollY;
                        var self = this;
                        if (!this.isScrollStop) {
                            setTimeout(function() {
                                self.doScrollY(step);
                            }, DragDropHelper.ScrollDelay);
                        }
                    };
                    DragDropHelper.prototype.getScrollableElementPosY = function(e) {
                        if (!this.scrollableElement || !e.currentTarget)
                            return -1;
                        var el = e.currentTarget;
                        var offsetTop = 0;
                        while (el && el != this.scrollableElement) {
                            offsetTop += el["offsetTop"];
                            el = el["offsetParent"];
                        }
                        return e.offsetY + e.currentTarget["offsetTop"] - this.scrollableElement.offsetTop - this.scrollableElement.scrollTop;
                    };
                    DragDropHelper.prototype.getEvent = function(event) {
                        return event["originalEvent"] ? event["originalEvent"] : event;
                    };
                    DragDropHelper.prototype.getY = function(element) {
                        var result = 0;
                        while (element) {
                            result += (element.offsetTop - element.scrollTop + element.clientTop);
                            element = element.offsetParent;
                        }
                        return result;
                    };
                    DragDropHelper.prototype.prepareData = function(event, elementName, json) {
                        var str = DragDropHelper.dataStart + "questionname:" + elementName;
                        this.setData(event, str);
                        var targetElement = this.createTargetElement(elementName, json);
                        this.ddTarget = new DragDropTargetElement(this.survey.currentPage, targetElement, null);
                    };
                    DragDropHelper.prototype.setData = function(event, text) {
                        if (event["originalEvent"]) {
                            event = event["originalEvent"];
                        }
                        if (event.dataTransfer) {
                            event.dataTransfer.setData("Text", text);
                            event.dataTransfer.effectAllowed = "copy";
                        }
                        DragDropHelper.dragData = {
                            text: text
                        };
                    };
                    DragDropHelper.prototype.getData = function(event) {
                        if (event["originalEvent"]) {
                            event = event["originalEvent"];
                        }
                        if (event.dataTransfer) {
                            var text = event.dataTransfer.getData("Text");
                            if (text) {
                                DragDropHelper.dragData.text = text;
                            }
                        }
                        return DragDropHelper.dragData;
                    };
                    DragDropHelper.prototype.clearData = function() {
                        //this.ddTarget = null;
                        DragDropHelper.dragData = {
                            text: "",
                            json: null
                        };
                        var prev = DragDropHelper.prevEvent;
                        prev.element = null;
                        prev.x = -1;
                        prev.y = -1;
                        this.prevCoordinates.x = -1;
                        this.prevCoordinates.y = -1;
                    };
                    return DragDropHelper;
                }());

                DragDropHelper.edgeHeight = 20;
                DragDropHelper.dataStart = "surveyjs,";
                DragDropHelper.dragData = {
                    text: "",
                    json: null
                };
                DragDropHelper.prevEvent = {
                    element: null,
                    x: -1,
                    y: -1
                };
                DragDropHelper.counter = 1;
                DragDropHelper.ScrollDelay = 30;
                DragDropHelper.ScrollOffset = 100;


                /***/
            }),
            /* 13 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__propertyEditors_propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(2);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyObjectProperty;
                });



                var SurveyObjectProperty = (function() {
                    function SurveyObjectProperty(property, onPropertyChanged, propertyEditorOptions) {
                        if (onPropertyChanged === void 0) {
                            onPropertyChanged = null;
                        }
                        if (propertyEditorOptions === void 0) {
                            propertyEditorOptions = null;
                        }
                        this.property = property;
                        this.isApplyingNewValue = false;
                        this.onPropertyChanged = onPropertyChanged;
                        this.name = this.property.name;
                        this.disabled = property["readOnly"];
                        this.koValue = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.choices = property.choices;
                        var self = this;
                        this.editorType = property.type;
                        //TODO
                        if (this.choices != null) {
                            this.editorType = "dropdown";
                        }
                        var onItemChanged = function(newValue) {
                            self.onApplyEditorValue(newValue);
                        };
                        this.editor = __WEBPACK_IMPORTED_MODULE_1__propertyEditors_propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].createEditor(this.editorType, onItemChanged);
                        this.editor.onGetLocale = this.doOnGetLocale;
                        this.editor.options = propertyEditorOptions;
                        this.editorType = this.editor.editorType;
                        this.modalName = "modelEditor" + this.editorType + this.name;
                        this.modalNameTarget = "#" + this.modalName;
                        this.koValue.subscribe(function(newValue) {
                            self.onkoValueChanged(newValue);
                        });
                        this.koText = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function() {
                            return self.getValueText(self.koValue());
                        });
                        this.koIsDefault = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function() {
                            return self.property.isDefaultValue(self.koValue());
                        });
                    }
                    SurveyObjectProperty.prototype.doOnGetLocale = function() {
                        if (this.object && this.object["getLocale"])
                            return this.object.getLocale();
                        return "";
                    };
                    Object.defineProperty(SurveyObjectProperty.prototype, "object", {
                        get: function() {
                            return this.objectValue;
                        },
                        set: function(value) {
                            this.objectValue = value;
                            this.updateValue();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyObjectProperty.prototype.updateValue = function() {
                        this.isValueUpdating = true;
                        this.koValue(this.getValue());
                        this.editor.setObject(this.object);
                        this.editor.setTitle(__WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString("pe.editProperty")["format"](this.property.name));
                        this.updateEditorData(this.koValue());
                        this.isValueUpdating = false;
                    };
                    SurveyObjectProperty.prototype.onApplyEditorValue = function(newValue) {
                        this.isApplyingNewValue = true;
                        this.koValue(newValue);
                        this.isApplyingNewValue = false;
                    };
                    SurveyObjectProperty.prototype.onkoValueChanged = function(newValue) {
                        if (!this.isApplyingNewValue) {
                            this.updateEditorData(newValue);
                        }
                        if (this.object == null)
                            return;
                        if (this.getValue() == newValue)
                            return;
                        if (this.onPropertyChanged != null && !this.isValueUpdating)
                            this.onPropertyChanged(this, newValue);
                    };
                    SurveyObjectProperty.prototype.updateEditorData = function(newValue) {
                        this.editor.value = newValue;
                    };
                    SurveyObjectProperty.prototype.getValue = function() {
                        if (this.property["getPropertyValue"])
                            return this.property["getPropertyValue"](this.object); //TODO make the only call
                        if (this.property.hasToUseGetValue)
                            return this.property.getValue(this.object);
                        return this.object[this.name];
                    };
                    SurveyObjectProperty.prototype.getValueText = function(value) {
                        return this.editor.getValueText(value);
                    };
                    return SurveyObjectProperty;
                }());



                /***/
            }),
            /* 14 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__surveyHelper__ = __webpack_require__(6);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyVerbs;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyVerbItem;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "c", function() {
                    return SurveyVerbChangeTypeItem;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "d", function() {
                    return SurveyVerbChangePageItem;
                });





                var SurveyVerbs = (function() {
                    function SurveyVerbs(onModifiedCallback) {
                        this.onModifiedCallback = onModifiedCallback;
                        this.koVerbs = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
                        this.koHasVerbs = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        var classes = __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"].metaData.getChildrenClasses("selectbase", true);
                        this.choicesClasses = [];
                        for (var i = 0; i < classes.length; i++) {
                            this.choicesClasses.push(classes[i].name);
                        }
                    }
                    Object.defineProperty(SurveyVerbs.prototype, "survey", {
                        get: function() {
                            return this.surveyValue;
                        },
                        set: function(value) {
                            if (this.survey == value)
                                return;
                            this.surveyValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyVerbs.prototype, "obj", {
                        get: function() {
                            return this.objValue;
                        },
                        set: function(value) {
                            if (this.objValue == value)
                                return;
                            this.objValue = value;
                            this.buildVerbs();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyVerbs.prototype.buildVerbs = function() {
                        var array = [];
                        var objType = __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(this.obj);
                        if (objType == __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["a" /* ObjType */ ].Question) {
                            var question = this.obj;
                            if (this.survey.pages.length > 1) {
                                array.push(new SurveyVerbChangePageItem(this.survey, question, this.onModifiedCallback));
                            }
                            if (this.choicesClasses.indexOf(question.getType()) > -1) {
                                array.push(new SurveyVerbChangeTypeItem(this.survey, question, this.onModifiedCallback));
                            }
                        }
                        this.koVerbs(array);
                        this.koHasVerbs(array.length > 0);
                    };
                    return SurveyVerbs;
                }());

                var SurveyVerbItem = (function() {
                    function SurveyVerbItem(survey, question, onModifiedCallback) {
                        this.survey = survey;
                        this.question = question;
                        this.onModifiedCallback = onModifiedCallback;
                        this.koItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
                        this.koSelectedItem = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                    }
                    Object.defineProperty(SurveyVerbItem.prototype, "text", {
                        get: function() {
                            return "";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SurveyVerbItem;
                }());

                var SurveyVerbChangeTypeItem = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyVerbChangeTypeItem, _super);

                    function SurveyVerbChangeTypeItem(survey, question, onModifiedCallback) {
                        var _this = _super.call(this, survey, question, onModifiedCallback) || this;
                        _this.survey = survey;
                        _this.question = question;
                        _this.onModifiedCallback = onModifiedCallback;
                        var classes = __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"].metaData.getChildrenClasses("selectbase", true);
                        var array = [];
                        for (var i = 0; i < classes.length; i++) {
                            array.push({
                                value: classes[i].name,
                                text: __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString("qt." + classes[i].name)
                            });
                        }
                        _this.koItems(array);
                        _this.koSelectedItem(question.getType());
                        var self = _this;
                        _this.koSelectedItem.subscribe(function(newValue) {
                            self.changeType(newValue);
                        });
                        return _this;
                    }
                    Object.defineProperty(SurveyVerbChangeTypeItem.prototype, "text", {
                        get: function() {
                            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString("pe.verbChangeType");
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyVerbChangeTypeItem.prototype.changeType = function(questionType) {
                        if (questionType == this.question.getType())
                            return;
                        var page = this.survey.getPageByQuestion(this.question);
                        var index = page.questions.indexOf(this.question);
                        var newQuestion = __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["QuestionFactory"].Instance.createQuestion(questionType, this.question.name);
                        var jsonObj = new __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"]();
                        var json = jsonObj.toJsonObject(this.question);
                        jsonObj.toObject(json, newQuestion);
                        page.removeQuestion(this.question);
                        page.addQuestion(newQuestion, index);
                        if (this.onModifiedCallback)
                            this.onModifiedCallback();
                    };
                    return SurveyVerbChangeTypeItem;
                }(SurveyVerbItem));

                var SurveyVerbChangePageItem = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyVerbChangePageItem, _super);

                    function SurveyVerbChangePageItem(survey, question, onModifiedCallback) {
                        var _this = _super.call(this, survey, question, onModifiedCallback) || this;
                        _this.survey = survey;
                        _this.question = question;
                        _this.onModifiedCallback = onModifiedCallback;
                        var array = [];
                        for (var i = 0; i < _this.survey.pages.length; i++) {
                            var page = _this.survey.pages[i];
                            array.push({
                                value: page,
                                text: __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */ ].getObjectName(page)
                            });
                        }
                        _this.koItems(array);
                        _this.prevPage = _this.survey.getPageByQuestion(question);
                        _this.koSelectedItem(_this.prevPage);
                        var self = _this;
                        _this.koSelectedItem.subscribe(function(newValue) {
                            self.changePage(newValue);
                        });
                        return _this;
                    }
                    Object.defineProperty(SurveyVerbChangePageItem.prototype, "text", {
                        get: function() {
                            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString("pe.verbChangePage");
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyVerbChangePageItem.prototype.changePage = function(newPage) {
                        if (newPage == null || newPage == this.prevPage)
                            return;
                        this.prevPage.removeQuestion(this.question);
                        newPage.addQuestion(this.question);
                        if (this.onModifiedCallback)
                            this.onModifiedCallback();
                    };
                    return SurveyVerbChangePageItem;
                }(SurveyVerbItem));



                /***/
            }),
            /* 15 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(6);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPagesEditor;
                });


                var SurveyPagesEditor = (function() {
                    function SurveyPagesEditor(onAddNewPageCallback, onSelectPageCallback, onMovePageCallback, onDeletePageCallback) {
                        if (onAddNewPageCallback === void 0) {
                            onAddNewPageCallback = null;
                        }
                        if (onSelectPageCallback === void 0) {
                            onSelectPageCallback = null;
                        }
                        if (onMovePageCallback === void 0) {
                            onMovePageCallback = null;
                        }
                        if (onDeletePageCallback === void 0) {
                            onDeletePageCallback = null;
                        }
                        this.draggingPage = null;
                        this.koPages = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
                        this.koIsValid = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.onAddNewPageCallback = onAddNewPageCallback;
                        this.onSelectPageCallback = onSelectPageCallback;
                        this.onMovePageCallback = onMovePageCallback;
                        this.onDeletePageCallback = onDeletePageCallback;
                        var self = this;
                        this.selectPageClick = function(pageItem) {
                            if (self.onSelectPageCallback) {
                                self.onSelectPageCallback(pageItem.page);
                            }
                        };
                        this.keyDown = function(el, e) {
                            self.onKeyDown(el, e);
                        };
                        this.dragStart = function(el) {
                            self.draggingPage = el;
                        };
                        this.dragOver = function(el) {};
                        this.dragEnd = function() {
                            self.draggingPage = null;
                        };
                        this.dragDrop = function(el) {
                            self.moveDraggingPageTo(el);
                        };
                    }
                    Object.defineProperty(SurveyPagesEditor.prototype, "survey", {
                        get: function() {
                            return this.surveyValue;
                        },
                        set: function(value) {
                            this.surveyValue = value;
                            this.koIsValid(this.surveyValue != null);
                            this.updatePages();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPagesEditor.prototype.setSelectedPage = function(page) {
                        var pages = this.koPages();
                        for (var i = 0; i < pages.length; i++) {
                            pages[i].koSelected(pages[i].page == page);
                        }
                    };
                    SurveyPagesEditor.prototype.addNewPageClick = function() {
                        if (this.onAddNewPageCallback) {
                            this.onAddNewPageCallback();
                        }
                    };
                    SurveyPagesEditor.prototype.removePage = function(page) {
                        var index = this.getIndexByPage(page);
                        if (index > -1) {
                            this.koPages.splice(index, 1);
                        }
                    };
                    SurveyPagesEditor.prototype.changeName = function(page) {
                        var index = this.getIndexByPage(page);
                        if (index > -1) {
                            this.koPages()[index].title(__WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectName(page));
                        }
                    };
                    SurveyPagesEditor.prototype.getIndexByPage = function(page) {
                        var pages = this.koPages();
                        for (var i = 0; i < pages.length; i++) {
                            if (pages[i].page == page)
                                return i;
                        }
                        return -1;
                    };
                    SurveyPagesEditor.prototype.onKeyDown = function(el, e) {
                        if (this.koPages().length <= 1)
                            return;
                        var pages = this.koPages();
                        var pageIndex = -1;
                        for (var i = 0; i < pages.length; i++) {
                            if (pages[i].page && pages[i].koSelected()) {
                                pageIndex = i;
                            }
                        }
                        if (pageIndex < 0)
                            return;
                        if (e.keyCode == 46 && this.onDeletePageCallback)
                            this.onDeletePageCallback(el.page);
                        if ((e.keyCode == 37 || e.keyCode == 39) && this.onSelectPageCallback) {
                            pageIndex += (e.keyCode == 37 ? -1 : 1);
                            if (pageIndex < 0)
                                pageIndex = pages.length - 1;
                            if (pageIndex >= pages.length)
                                pageIndex = 0;
                            var page = pages[pageIndex].page;
                            this.onSelectPageCallback(page);
                            this.setSelectedPage(page);
                        }
                    };
                    SurveyPagesEditor.prototype.updatePages = function() {
                        if (this.surveyValue == null) {
                            this.koPages([]);
                            return;
                        }
                        var pages = [];
                        for (var i = 0; i < this.surveyValue.pages.length; i++) {
                            var page = this.surveyValue.pages[i];
                            pages.push({
                                title: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](__WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectName(page)),
                                page: page,
                                koSelected: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false)
                            });
                        }
                        this.koPages(pages);
                    };
                    SurveyPagesEditor.prototype.moveDraggingPageTo = function(toPage) {
                        if (toPage == null || toPage == this.draggingPage) {
                            this.draggingPage = null;
                            return;
                        }
                        if (this.draggingPage == null)
                            return;
                        var index = this.koPages().indexOf(this.draggingPage);
                        var indexTo = this.koPages().indexOf(toPage);
                        if (this.onMovePageCallback) {
                            this.onMovePageCallback(index, indexTo);
                        }
                    };
                    return SurveyPagesEditor;
                }());



                /***/
            }),
            /* 16 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__ = __webpack_require__(5);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__objectEditor__ = __webpack_require__(7);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyValidatorsEditor;
                });
                /* unused harmony export SurveyPropertyValidatorItem */






                var SurveyPropertyValidatorsEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyValidatorsEditor, _super);

                    function SurveyPropertyValidatorsEditor() {
                        var _this = _super.call(this) || this;
                        _this.availableValidators = [];
                        _this.validatorClasses = [];
                        var self = _this;
                        _this.selectedObjectEditor = new __WEBPACK_IMPORTED_MODULE_4__objectEditor__["a" /* SurveyObjectEditor */ ]();
                        _this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
                            self.onPropertyValueChanged(options.property, options.object, options.newValue);
                        });
                        _this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
                        _this.koSelected.subscribe(function(newValue) {
                            self.selectedObjectEditor.selectedObject = newValue != null ? newValue.validator : null;
                        });
                        _this.validatorClasses = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.getChildrenClasses("surveyvalidator", true);
                        _this.availableValidators = _this.getAvailableValidators();
                        _this.onDeleteClick = function() {
                            self.koItems.remove(self.koSelected());
                        };
                        _this.onAddClick = function(validatorType) {
                            self.addItem(validatorType);
                        };
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyValidatorsEditor.prototype, "editorType", {
                        get: function() {
                            return "validators";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyValidatorsEditor.prototype.onValueChanged = function() {
                        _super.prototype.onValueChanged.call(this);
                        if (this.koSelected) {
                            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
                        }
                    };
                    SurveyPropertyValidatorsEditor.prototype.createEditorItem = function(item) {
                        var jsonObj = new __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"]();
                        var validator = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.createClass(item.getType());
                        jsonObj.toObject(item, validator);
                        return new SurveyPropertyValidatorItem(validator);
                    };
                    SurveyPropertyValidatorsEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        var item = editorItem;
                        return item.validator;
                    };
                    SurveyPropertyValidatorsEditor.prototype.addItem = function(validatorType) {
                        var newValidator = new SurveyPropertyValidatorItem(__WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.createClass(validatorType));
                        this.koItems.push(newValidator);
                        this.koSelected(newValidator);
                    };
                    SurveyPropertyValidatorsEditor.prototype.getAvailableValidators = function() {
                        var result = [];
                        for (var i = 0; i < this.validatorClasses.length; i++) {
                            result.push(this.validatorClasses[i].name);
                        }
                        return result;
                    };
                    SurveyPropertyValidatorsEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
                        if (this.koSelected() == null)
                            return;
                        this.koSelected().validator[property.name] = newValue;
                    };
                    return SurveyPropertyValidatorsEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */ ]));

                var SurveyPropertyValidatorItem = (function() {
                    function SurveyPropertyValidatorItem(validator) {
                        this.validator = validator;
                        this.text = validator.getType();
                    }
                    return SurveyPropertyValidatorItem;
                }());

                __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("validators", function() {
                    return new SurveyPropertyValidatorsEditor();
                });


                /***/
            }),
            /* 17 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyQuestionEditorDefinition;
                });

                var SurveyQuestionEditorDefinition = (function() {
                    function SurveyQuestionEditorDefinition() {}
                    SurveyQuestionEditorDefinition.getProperties = function(className) {
                        var properties = [];
                        var allDefinitions = SurveyQuestionEditorDefinition.getAllDefinitionsByClass(className);
                        for (var i = allDefinitions.length - 1; i >= 0; i--) {
                            var def = allDefinitions[i];
                            if (def.properties) {
                                for (var j = 0; j < def.properties.length; j++) {
                                    properties.push(def.properties[j]);
                                }
                            }
                        }
                        return properties;
                    };
                    SurveyQuestionEditorDefinition.getTabs = function(className) {
                        var tabs = [];
                        var allDefinitions = SurveyQuestionEditorDefinition.getAllDefinitionsByClass(className);
                        for (var i = allDefinitions.length - 1; i >= 0; i--) {
                            var def = allDefinitions[i];
                            if (def.tabs) {
                                for (var j = 0; j < def.tabs.length; j++) {
                                    tabs.push(def.tabs[j]);
                                }
                            }
                        }
                        tabs.sort(function(a, b) {
                            return a.index < b.index ? -1 : (a.index > b.index ? 1 : 0);
                        });
                        return tabs;
                    };
                    SurveyQuestionEditorDefinition.getAllDefinitionsByClass = function(className) {
                        var result = [];
                        if (className.indexOf('@') > -1 && SurveyQuestionEditorDefinition.definition[className]) {
                            result.push(SurveyQuestionEditorDefinition.definition[className]);
                            return result;
                        }
                        while (className) {
                            var metaClass = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData["findClass"](className);
                            if (!metaClass)
                                break;
                            if (SurveyQuestionEditorDefinition.definition[metaClass.name]) {
                                result.push(SurveyQuestionEditorDefinition.definition[metaClass.name]);
                            }
                            className = metaClass.parentName;
                        }
                        return result;
                    };
                    return SurveyQuestionEditorDefinition;
                }());

                SurveyQuestionEditorDefinition.definition = {
                    "questionbase": {
                        properties: ["name", "title", {
                            name: "visible",
                            category: "checks"
                        }, {
                            name: "isRequired",
                            category: "checks"
                        }, {
                            name: "startWithNewLine",
                            category: "checks"
                        }],
                        tabs: [{
                            name: "visibleIf",
                            index: 100
                        }]
                    },
                    "comment": {
                        properties: ["rows", "placeHolder"]
                    },
                    "file": {
                        properties: [{
                            name: "showPreview",
                            category: "imageChecks"
                        }, {
                            name: "storeDataAsText",
                            category: "imageChecks"
                        }, "maxSize", "imageHeight", "imageWidth"]
                    },
                    "html": {
                        tabs: [{
                            name: "html",
                            index: 10
                        }]
                    },
                    "matrixdropdownbase": {
                        properties: ["cellType"],
                        tabs: [{
                            name: "columns",
                            index: 10
                        }, {
                            name: "rows",
                            index: 11
                        }, {
                            name: "choices",
                            index: 12
                        }]
                    },
                    "matrixdynamic": {
                        properties: ["rowCount", "addRowText", "removeRowText"]
                    },
                    "matrix": {
                        tabs: [{
                            name: "columns",
                            index: 10
                        }, {
                            name: "rows",
                            index: 11
                        }]
                    },
                    "multipletext": {
                        properties: ["colCount"],
                        tabs: [{
                            name: "items",
                            index: 10
                        }]
                    },
                    "rating": {
                        properties: ["minRateDescription", "maxRateDescription"],
                        tabs: [{
                            name: "rateValues",
                            index: 10
                        }]
                    },
                    "selectbase": {
                        properties: ["hasOther", "choicesOrder", "colCount"],
                        tabs: [{
                            name: "choices",
                            index: 10
                        }, {
                            name: "choicesByUrl",
                            index: 11
                        }]
                    },
                    "dropdown": {
                        properties: ["optionsCaption"]
                    },
                    "text": {
                        properties: ["inputType", "placeHolder"]
                    },
                    "matrixdropdowncolumn@checkbox": {
                        properties: ["hasOther", "choicesOrder", "colCount"],
                        tabs: [{
                            name: "choices",
                            index: 10
                        }, {
                            name: "choicesByUrl",
                            index: 11
                        }]
                    },
                    "matrixdropdowncolumn@radiogroup": {
                        properties: ["hasOther", "choicesOrder", "colCount"],
                        tabs: [{
                            name: "choices",
                            index: 10
                        }, {
                            name: "choicesByUrl",
                            index: 11
                        }]
                    },
                    "matrixdropdowncolumn@dropdown": {
                        properties: ["hasOther", "choicesOrder", "optionsCaption"],
                        tabs: [{
                            name: "choices",
                            index: 10
                        }, {
                            name: "choicesByUrl",
                            index: 11
                        }]
                    },
                    "matrixdropdowncolumn@text": {
                        properties: ["inputType", "placeHolder"]
                    },
                    "matrixdropdowncolumn@comment": {
                        properties: ["placeHolder"]
                    },
                    "panel": {
                        properties: ["name", "title", {
                            name: "visible",
                            category: "checks"
                        }],
                        tabs: [{
                            name: "visibleIf",
                            index: 100
                        }]
                    }
                };


                /***/
            }),
            /* 18 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "c", function() {
                    return SurveyQuestionEditorGeneralProperty;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyQuestionEditorGeneralRow;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyQuestionEditorGeneralProperties;
                });



                var SurveyQuestionEditorGeneralProperty = (function() {
                    function SurveyQuestionEditorGeneralProperty(obj, property, isRequired) {
                        if (isRequired === void 0) {
                            isRequired = false;
                        }
                        this.obj = obj;
                        this.property = property;
                        this.isRequired = isRequired;
                        this.choices = [];
                        this.name = property.name;
                        this.disabled = property["readOnly"];
                        this.editType = "text";
                        if (property.type == "text")
                            this.editType = "textarea";
                        if (property.type == "boolean")
                            this.editType = "check";
                        if (property.choices) {
                            this.choices = property.choices;
                            this.editType = "dropdown";
                        }
                        this.koValue = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koErrorText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
                        this.koHasError = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.title = __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */ ].getString("pe." + this.name);
                        if (!this.title)
                            this.title = this.name;
                        this.reset();
                    }
                    SurveyQuestionEditorGeneralProperty.prototype.hasError = function() {
                        var isError = this.isRequired && (this.koValue() !== false) && !this.koValue();
                        this.koErrorText(isError ? __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */ ].getString("pe.propertyIsEmpty") : "");
                        this.koHasError(isError);
                        return isError;
                    };
                    SurveyQuestionEditorGeneralProperty.prototype.apply = function() {
                        this.obj[this.name] = this.koValue();
                    };
                    SurveyQuestionEditorGeneralProperty.prototype.reset = function() {
                        this.koValue(this.getValue());
                    };
                    SurveyQuestionEditorGeneralProperty.prototype.getValue = function() {
                        if (this.property["getPropertyValue"])
                            return this.property["getPropertyValue"](this.obj); //TODO make the only call
                        if (this.property.hasToUseGetValue)
                            return this.property.getValue(this.obj);
                        return this.obj[this.name];
                    };
                    return SurveyQuestionEditorGeneralProperty;
                }());

                var SurveyQuestionEditorGeneralRow = (function() {
                    function SurveyQuestionEditorGeneralRow(obj, property, isPropertyRequired) {
                        if (isPropertyRequired === void 0) {
                            isPropertyRequired = false;
                        }
                        this.obj = obj;
                        this.properties = [];
                        this.addProperty(property, isPropertyRequired);
                    }
                    SurveyQuestionEditorGeneralRow.prototype.addProperty = function(property, isPropertyRequired) {
                        if (isPropertyRequired === void 0) {
                            isPropertyRequired = false;
                        }
                        this.properties.push(new SurveyQuestionEditorGeneralProperty(this.obj, property, isPropertyRequired));
                    };
                    SurveyQuestionEditorGeneralRow.prototype.hasError = function() {
                        var isError = false;
                        for (var i = 0; i < this.properties.length; i++) {
                            isError = this.properties[i].hasError() || isError;
                        }
                        return isError;
                    };
                    return SurveyQuestionEditorGeneralRow;
                }());

                var SurveyQuestionEditorGeneralProperties = (function() {
                    function SurveyQuestionEditorGeneralProperties(obj, properties, onCanShowPropertyCallback) {
                        if (onCanShowPropertyCallback === void 0) {
                            onCanShowPropertyCallback = null;
                        }
                        this.obj = obj;
                        this.rows = [];
                        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
                        this.properties = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.getProperties(this.obj.getType());
                        this.buildRows(properties);
                    }
                    SurveyQuestionEditorGeneralProperties.prototype.apply = function() {
                        this.applyOrReset(true);
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.reset = function() {
                        this.applyOrReset(false);
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.hasError = function() {
                        var isError = false;
                        for (var i = 0; i < this.rows.length; i++) {
                            isError = this.rows[i].hasError() || isError;
                        }
                        return isError;
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.applyOrReset = function(isApply) {
                        for (var i = 0; i < this.rows.length; i++) {
                            for (var j = 0; j < this.rows[i].properties.length; j++) {
                                if (isApply)
                                    this.rows[i].properties[j].apply();
                                else
                                    this.rows[i].properties[j].reset();
                            }
                        }
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.buildRows = function(properties) {
                        var requiredProperties = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.getRequiredProperties(this.obj.getType());
                        if (!requiredProperties)
                            requiredProperties = [];
                        for (var i = 0; i < properties.length; i++) {
                            var name = this.getName(properties[i]);
                            var jsonProperty = this.getProperty(name);
                            if (!jsonProperty)
                                continue;
                            var isPropertyRequired = requiredProperties.indexOf(name) > -1;
                            var row = this.getRowByCategory(properties[i].category);
                            if (row)
                                row.addProperty(jsonProperty, isPropertyRequired);
                            else {
                                row = new SurveyQuestionEditorGeneralRow(this.obj, jsonProperty, isPropertyRequired);
                                if (properties[i].category)
                                    row.category = properties[i].category;
                                this.rows.push(row);
                            }
                            if (properties[i].title) {
                                row.properties[row.properties.length - 1].title = properties[i].title;
                            }
                        }
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.getName = function(prop) {
                        if (!prop)
                            return null;
                        if (typeof prop === "string")
                            return prop;
                        if (prop.name)
                            return prop.name;
                        return null;
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.getRowByCategory = function(category) {
                        if (!category)
                            return null;
                        for (var i = 0; i < this.rows.length; i++) {
                            if (this.rows[i].category == category)
                                return this.rows[i];
                        }
                        return null;
                    };
                    SurveyQuestionEditorGeneralProperties.prototype.getProperty = function(propertyName) {
                        if (!propertyName)
                            return null;
                        var property = null;
                        for (var i = 0; i < this.properties.length; i++) {
                            if (this.properties[i].name == propertyName) {
                                property = this.properties[i];
                                break;
                            }
                        }
                        //TODO code duplication. This code is in 3 places already, do refactoring.
                        if (property && property["visible"] === false)
                            property = null;
                        if (property && this.onCanShowPropertyCallback) {
                            if (!this.onCanShowPropertyCallback(this.obj, property))
                                property = null;
                        }
                        return property;
                    };
                    return SurveyQuestionEditorGeneralProperties;
                }());



                /***/
            }),
            /* 19 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(2);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return QuestionToolbox;
                });



                var QuestionToolbox = (function() {
                    function QuestionToolbox(supportedQuestions) {
                        if (supportedQuestions === void 0) {
                            supportedQuestions = null;
                        }
                        this.orderedQuestions = ["text", "checkbox", "radiogroup", "dropdown", "comment", "rating", "html"];
                        this.copiedItemMaxCount = 3;
                        this.itemsValue = [];
                        this.koItems = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
                        this.createDefaultItems(supportedQuestions);
                    }
                    Object.defineProperty(QuestionToolbox.prototype, "jsonText", {
                        get: function() {
                            return JSON.stringify(this.itemsValue);
                        },
                        set: function(value) {
                            this.itemsValue = (value) ? JSON.parse(value) : [];
                            this.onItemsChanged();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(QuestionToolbox.prototype, "copiedJsonText", {
                        get: function() {
                            return JSON.stringify(this.copiedItems);
                        },
                        set: function(value) {
                            var newItems = (value) ? JSON.parse(value) : [];
                            this.clearCopiedItems();
                            for (var i = 0; i < newItems.length; i++) {
                                newItems[i].isCopied = true;
                                this.addItem(newItems[i]);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(QuestionToolbox.prototype, "items", {
                        get: function() {
                            return this.itemsValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(QuestionToolbox.prototype, "copiedItems", {
                        get: function() {
                            var result = [];
                            for (var i = 0; i < this.itemsValue.length; i++) {
                                if (this.itemsValue[i].isCopied)
                                    result.push(this.itemsValue[i]);
                            }
                            return result;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    QuestionToolbox.prototype.addItems = function(items, clearAll) {
                        if (clearAll === void 0) {
                            clearAll = false;
                        }
                        if (clearAll) {
                            this.clearItems();
                        }
                        this.onItemsChanged();
                    };
                    QuestionToolbox.prototype.addCopiedItem = function(question) {
                        var item = {
                            name: question.name,
                            title: question.name,
                            isCopied: true,
                            iconName: "icon-default",
                            json: this.getQuestionJSON(question)
                        };
                        if (this.replaceItem(item))
                            return;
                        var copied = this.copiedItems;
                        if (this.copiedItemMaxCount > 0 && copied.length == this.copiedItemMaxCount)
                            this.removeItem(copied[this.copiedItemMaxCount - 1].name);
                        this.addItem(item);
                    };
                    QuestionToolbox.prototype.addItem = function(item) {
                        this.itemsValue.push(item);
                        this.onItemsChanged();
                    };
                    QuestionToolbox.prototype.replaceItem = function(item) {
                        var index = this.indexOf(item.name);
                        if (index < 0)
                            return;
                        this.itemsValue[index] = item;
                        this.onItemsChanged();
                        return true;
                    };
                    QuestionToolbox.prototype.removeItem = function(name) {
                        var index = this.indexOf(name);
                        if (index < 0)
                            return false;
                        this.itemsValue.splice(index, 1);
                        this.onItemsChanged();
                        return true;
                    };
                    QuestionToolbox.prototype.clearItems = function() {
                        this.itemsValue = [];
                        this.onItemsChanged();
                    };
                    QuestionToolbox.prototype.clearCopiedItems = function() {
                        var removedItems = this.copiedItems;
                        for (var i = 0; i < removedItems.length; i++) {
                            this.removeItem(removedItems[i].name);
                        }
                    };
                    QuestionToolbox.prototype.onItemsChanged = function() {
                        this.koItems(this.itemsValue);
                    };
                    QuestionToolbox.prototype.indexOf = function(name) {
                        for (var i = 0; i < this.itemsValue.length; i++) {
                            if (this.itemsValue[i].name == name)
                                return i;
                        }
                        return -1;
                    };
                    QuestionToolbox.prototype.createDefaultItems = function(supportedQuestions) {
                        var questions = this.getQuestionTypes(supportedQuestions);
                        for (var i = 0; i < questions.length; i++) {
                            var name = questions[i];
                            var question = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["ElementFactory"].Instance.createElement(name, "q1");
                            if (!question) {
                                question = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.createClass(name);
                            }
                            var json = this.getQuestionJSON(question);
                            var item = {
                                name: name,
                                iconName: 'icon-' + name,
                                title: __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString('qt.' + name),
                                json: json,
                                isCopied: false
                            };
                            this.itemsValue.push(item);
                        }
                        this.onItemsChanged();
                    };
                    QuestionToolbox.prototype.getQuestionJSON = function(question) {
                        var json = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"]().toJsonObject(question);
                        json.type = question.getType();
                        return json;
                    };
                    QuestionToolbox.prototype.getQuestionTypes = function(supportedQuestions) {
                        var allTypes = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["ElementFactory"].Instance.getAllTypes();
                        if (!supportedQuestions || supportedQuestions.length == 0)
                            supportedQuestions = allTypes;
                        var questions = [];
                        for (var i = 0; i < this.orderedQuestions.length; i++) {
                            var name = this.orderedQuestions[i];
                            if (supportedQuestions.indexOf(name) > -1 && allTypes.indexOf(name) > -1)
                                questions.push(name);
                        }
                        for (var i = 0; i < supportedQuestions.length; i++) {
                            var name = supportedQuestions[i];
                            if (questions.indexOf(supportedQuestions[i]) < 0 && allTypes.indexOf(name) > -1)
                                questions.push(name);
                        }
                        return questions;
                    };
                    return QuestionToolbox;
                }());



                /***/
            }),
            /* 20 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__json5__ = __webpack_require__(11);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyEmbedingWindow;
                });



                var SurveyEmbedingWindow = (function() {
                    function SurveyEmbedingWindow() {
                        this.surveyId = null;
                        this.surveyPostId = null;
                        this.generateValidJSON = false;
                        this.surveyJSVersion = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Version"];
                        this.surveyCDNPath = "https://surveyjs.azureedge.net/";
                        this.platformSurveyJSPrefix = {
                            "angular": "angular",
                            "jquery": "jquery",
                            "knockout": "ko",
                            "react": "react",
                            "vue": "vue"
                        };
                        this.platformJSonPage = {
                            "angular": "@Component({\n  selector: 'ng-app',\n        template: \n        <div id='surveyElement'></div>\",\n})\nexport class AppComponent {\n    ngOnInit() {\n        var survey = new Survey.Model(surveyJSON);\n        survey.onComplete.add(sendDataToServer);\n       Survey.SurveyNG.render(\"surveyElement\", { model: survey });\n    }\n}",
                            "jquery": "var survey = new Survey.Model(surveyJSON);\n$(\"#surveyContainer\").Survey({\n    model: survey,\n    onComplete: sendDataToServer\n});",
                            "knockout": "var survey = new Survey.Model(surveyJSON, \"surveyContainer\");\nsurvey.onComplete.add(sendDataToServer);",
                            "react": "ReactDOM.render(\n    <Survey.Survey json={ surveyJSON } onComplete={ sendDataToServer } />, document.getElementById(\"surveyContainer\"));",
                            "vue": "var survey = new Survey.Model(surveyJSON);\nnew Vue({ el: '#surveyContainer', data: { survey: survey } });"
                        };
                        this.platformJSonWindow = {
                            "angular": "@Component({\n  selector: 'ng-app',\n        template: \n        <div id='surveyElement'></div>\",\n})\nexport class AppComponent {\n    ngOnInit() {\n        var survey = new Survey.Model(surveyJSON);\n        survey.onComplete.add(sendDataToServer);\n       Survey.SurveyWindowNG.render(\"surveyElement\", { model: survey });\n    }\n}",
                            "jquery": "var survey = new Survey.Model(surveyJSON);\n$(\"#surveyContainer\").SurveyWindow({\n    model: survey,\n    onComplete: sendDataToServer\n});",
                            "knockout": "var survey = new Survey.Model(surveyJSON);\nsurveyWindow.show();\nsurvey.onComplete.add(sendDataToServer);",
                            "react": "ReactDOM.render(\n    <Survey.SurveyWindow json={ surveyJSON } onComplete={ sendDataToServer } />, document.getElementById(\"surveyContainer\"));",
                            "vue": ""
                        };
                        this.platformHtmlonPage = {
                            "angular": "<ng-app></ng-app>",
                            "jquery": "<div id=\"surveyContainer\"></div>",
                            "knockout": "<div id=\"surveyContainer\"></div>",
                            "react": "<div id=\"surveyContainer\"></div>",
                            "vue": "<div id=\"surveyContainer\"><survey :survey=\"survey\"></survey></div>"
                        };
                        this.platformHtmlonWindow = {
                            "angular": "<ng-app></ng-app>",
                            "jquery": "<div id=\"surveyContainer\"></div>",
                            "knockout": "",
                            "react": "<div id=\"surveyContainer\"></div>",
                            "vue": "<div id='surveyContainer'><survey-window :survey='survey'></survey-window></div>"
                        };
                        var self = this;
                        this.koLibraryVersion = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("jquery");
                        this.koShowAsWindow = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("page");
                        this.koScriptUsing = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("bootstrap");
                        this.koHasIds = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.koLoadSurvey = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.koHeadText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
                        this.koJavaText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
                        this.koBodyText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
                        this.koVisibleHtml = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function() {
                            return self.koShowAsWindow() == "page" || self.platformHtmlonWindow[self.koLibraryVersion()] != "";
                        });
                        this.koLibraryVersion.subscribe(function(newValue) {
                            self.setHeadText();
                            self.setJavaTest();
                            self.setBodyText();
                        });
                        this.koShowAsWindow.subscribe(function(newValue) {
                            self.setJavaTest();
                            self.setBodyText();
                        });
                        this.koScriptUsing.subscribe(function(newValue) {
                            self.setHeadText();
                            self.setJavaTest();
                        });
                        this.koLoadSurvey.subscribe(function(newValue) {
                            self.setJavaTest();
                        });
                        this.surveyEmbedingHead = null;
                    }
                    Object.defineProperty(SurveyEmbedingWindow.prototype, "json", {
                        get: function() {
                            return this.jsonValue;
                        },
                        set: function(value) {
                            this.jsonValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEmbedingWindow.prototype, "hasAceEditor", {
                        get: function() {
                            return typeof ace !== "undefined";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyEmbedingWindow.prototype.show = function() {
                        if (this.hasAceEditor && this.surveyEmbedingHead == null) {
                            this.surveyEmbedingHead = this.createEditor("surveyEmbedingHead");
                            this.surveyEmbedingBody = this.createEditor("surveyEmbedingBody");
                            this.surveyEmbedingJava = this.createEditor("surveyEmbedingJava");
                        }
                        this.koHasIds(this.surveyId && this.surveyPostId);
                        this.setBodyText();
                        this.setHeadText();
                        this.setJavaTest();
                    };
                    SurveyEmbedingWindow.prototype.setBodyText = function() {
                        this.setTextToEditor(this.surveyEmbedingBody, this.koBodyText, this.platformHtmlonPage[this.koLibraryVersion()]);
                    };
                    Object.defineProperty(SurveyEmbedingWindow.prototype, "getCDNPath", {
                        get: function() {
                            return this.surveyCDNPath + this.surveyJSVersion + "/";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyEmbedingWindow.prototype.setHeadText = function() {
                        var str = "<!-- Your platform (" + this.koLibraryVersion() + ") scripts. -->\n";
                        if (this.koScriptUsing() != "bootstrap") {
                            str += "\n<link href=\"" + this.getCDNPath + "survey.css\" type=\"text/css\" rel=\"stylesheet\" />";
                        }
                        str += "\n<script src=\"" + this.getCDNPath + "survey." + this.platformSurveyJSPrefix[this.koLibraryVersion()] + " .min.js\"></script>";
                        this.setTextToEditor(this.surveyEmbedingHead, this.koHeadText, str);
                    };
                    SurveyEmbedingWindow.prototype.setJavaTest = function() {
                        this.setTextToEditor(this.surveyEmbedingJava, this.koJavaText, this.getJavaText());
                    };
                    SurveyEmbedingWindow.prototype.createEditor = function(elementName) {
                        var editor = ace.edit(elementName);
                        editor.setTheme("ace/theme/monokai");
                        editor.session.setMode("ace/mode/json");
                        editor.setShowPrintMargin(false);
                        editor.renderer.setShowGutter(false);
                        editor.setReadOnly(true);
                        return editor;
                    };
                    SurveyEmbedingWindow.prototype.getJavaText = function() {
                        var isOnPage = this.koShowAsWindow() == "page";
                        var str = this.getSaveFunc() + "\n\n";
                        str += isOnPage ? this.platformJSonPage[this.koLibraryVersion()] : this.platformJSonWindow[this.koLibraryVersion()];
                        var jsonText = "var surveyJSON = " + this.getJsonText() + "\n\n";
                        return this.getSetCss() + "\n" + jsonText + str;
                    };
                    SurveyEmbedingWindow.prototype.getSetCss = function() {
                        if (this.koScriptUsing() != "bootstrap")
                            return "";
                        return "Survey.Survey.cssType = \"bootstrap\";\n";
                    };
                    SurveyEmbedingWindow.prototype.getSaveFunc = function() {
                        return "function sendDataToServer(survey) {\n" + this.getSaveFuncCode() + "\n}";
                    };
                    SurveyEmbedingWindow.prototype.getSaveFuncCode = function() {
                        if (this.koHasIds())
                            return "    survey.sendResult('" + this.surveyPostId + "');";
                        return "    //send Ajax request to your web server.\n    alert(\"The results are:\" + JSON.stringify(s.data));";
                    };
                    SurveyEmbedingWindow.prototype.getJsonText = function() {
                        if (this.koHasIds() && this.koLoadSurvey()) {
                            return "{ surveyId: '" + this.surveyId + "'}";
                        }
                        if (this.generateValidJSON)
                            return JSON.stringify(this.json);
                        return new __WEBPACK_IMPORTED_MODULE_2__json5__["a" /* SurveyJSON5 */ ]().stringify(this.json);
                    };
                    SurveyEmbedingWindow.prototype.setTextToEditor = function(editor, koText, text) {
                        if (editor)
                            editor.setValue(text);
                        if (koText)
                            koText(text);
                    };
                    return SurveyEmbedingWindow;
                }());



                /***/
            }),
            /* 21 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(6);
                /* unused harmony export SurveyObjectItem */
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyObjects;
                });


                var SurveyObjectItem = (function() {
                    function SurveyObjectItem() {
                        this.level = 0;
                    }
                    return SurveyObjectItem;
                }());

                var SurveyObjects = (function() {
                    function SurveyObjects(koObjects, koSelected) {
                        this.koObjects = koObjects;
                        this.koSelected = koSelected;
                    }
                    Object.defineProperty(SurveyObjects.prototype, "survey", {
                        get: function() {
                            return this.surveyValue;
                        },
                        set: function(value) {
                            if (this.survey == value)
                                return;
                            this.surveyValue = value;
                            this.rebuild();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyObjects.prototype.addPage = function(page) {
                        this.addElement(page, null);
                    };
                    SurveyObjects.prototype.addElement = function(element, parent) {
                        var parentIndex = parent != null ? this.getItemIndex(parent) : 0;
                        if (parentIndex < 0)
                            return;
                        var elements = parent != null ? parent.elements : this.survey.pages;
                        var elementIndex = elements.indexOf(element);
                        var newIndex = elementIndex + 1 + parentIndex;
                        if (elementIndex > 0) {
                            var prevElement = elements[elementIndex - 1];
                            newIndex = this.getItemIndex(prevElement) + this.getAllElementCount(prevElement) + 1;
                        }
                        var item = this.createItem(element, this.koObjects()[parentIndex]);
                        this.addItem(item, newIndex);
                        if (element.elements) {
                            var objs = [];
                            this.buildElements(objs, element.elements, item);
                            for (var i = 0; i < objs.length; i++) {
                                this.koObjects.splice(newIndex + 1 + i, 0, objs[i]);
                            }
                        }
                        this.koSelected(item);
                    };
                    SurveyObjects.prototype.selectObject = function(obj) {
                        var objs = this.koObjects();
                        for (var i = 0; i < objs.length; i++) {
                            if (objs[i].value == obj) {
                                this.koSelected(objs[i]);
                                return;
                            }
                        }
                    };
                    SurveyObjects.prototype.removeObject = function(obj) {
                        var index = this.getItemIndex(obj);
                        if (index < 0)
                            return;
                        var countToRemove = 1 + this.getAllElementCount(obj);
                        this.koObjects.splice(index, countToRemove);
                    };
                    SurveyObjects.prototype.nameChanged = function(obj) {
                        var index = this.getItemIndex(obj);
                        if (index < 0)
                            return;
                        this.koObjects()[index].text(this.getText(this.koObjects()[index]));
                    };
                    SurveyObjects.prototype.selectNextQuestion = function(isUp) {
                        var question = this.getSelectedQuestion();
                        var itemIndex = this.getItemIndex(question);
                        if (itemIndex < 0)
                            return question;
                        var objs = this.koObjects();
                        var newItemIndex = itemIndex + (isUp ? -1 : 1);
                        if (newItemIndex < objs.length && __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(objs[newItemIndex].value) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */ ].Question) {
                            itemIndex = newItemIndex;
                        } else {
                            newItemIndex = itemIndex;
                            while (newItemIndex < objs.length && __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(objs[newItemIndex].value) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */ ].Question) {
                                itemIndex = newItemIndex;
                                newItemIndex += (isUp ? 1 : -1);
                            }
                        }
                        this.koSelected(objs[itemIndex]);
                    };
                    SurveyObjects.prototype.getAllElementCount = function(element) {
                        if (!element.elements)
                            return 0;
                        var res = 0;
                        for (var i = 0; i < element.elements.length; i++) {
                            res += 1 + this.getAllElementCount(element.elements[i]);
                        }
                        return res;
                    };
                    SurveyObjects.prototype.getSelectedQuestion = function() {
                        if (!this.koSelected())
                            return null;
                        var obj = this.koSelected().value;
                        if (!obj)
                            return null;
                        return __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */ ].Question ? (obj) : null;
                    };
                    SurveyObjects.prototype.addItem = function(item, index) {
                        if (index > this.koObjects().length) {
                            this.koObjects.push(item);
                        } else {
                            this.koObjects.splice(index, 0, item);
                        }
                    };
                    SurveyObjects.prototype.rebuild = function() {
                        var objs = [];
                        if (this.survey == null) {
                            this.koObjects(objs);
                            this.koSelected(null);
                            return;
                        }
                        var root = this.createItem(this.survey, null);
                        objs.push(root);
                        for (var i = 0; i < this.survey.pages.length; i++) {
                            var page = this.survey.pages[i];
                            var pageItem = this.createItem(page, root);
                            objs.push(pageItem);
                            this.buildElements(objs, page.elements, pageItem);
                        }
                        this.koObjects(objs);
                        this.koSelected(this.survey);
                    };
                    SurveyObjects.prototype.buildElements = function(objs, elements, parentItem) {
                        for (var i = 0; i < elements.length; i++) {
                            var el = elements[i];
                            if (el.isPanel) {
                                var panelItem = this.createItem(el, parentItem);
                                objs.push(panelItem);
                                this.buildElements(objs, el.elements, panelItem);
                            } else {
                                objs.push(this.createItem(el, parentItem));
                            }
                        }
                    };
                    SurveyObjects.prototype.createItem = function(value, parent) {
                        var item = new SurveyObjectItem();
                        item.value = value;
                        item.level = parent != null ? parent.level + 1 : 0;
                        item.text = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](this.getText(item));
                        return item;
                    };
                    SurveyObjects.prototype.getItemIndex = function(value) {
                        var objs = this.koObjects();
                        for (var i = 0; i < objs.length; i++) {
                            if (objs[i].value == value)
                                return i;
                        }
                        return -1;
                    };
                    SurveyObjects.prototype.getText = function(item) {
                        if (item.level == 0)
                            return "Survey";
                        var intend = SurveyObjects.intend;
                        for (var i = 1; i < item.level; i++) {
                            intend += SurveyObjects.intend;
                        }
                        return intend + __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */ ].getObjectName(item.value);
                    };
                    return SurveyObjects;
                }());

                SurveyObjects.intend = ".";


                /***/
            }),
            /* 22 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyForDesigner;
                });




                var SurveyForDesigner = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyForDesigner, _super);

                    function SurveyForDesigner(jsonObj, renderedElement, css) {
                        if (jsonObj === void 0) {
                            jsonObj = null;
                        }
                        if (renderedElement === void 0) {
                            renderedElement = null;
                        }
                        if (css === void 0) {
                            css = null;
                        }
                        var _this = _super.call(this, jsonObj, renderedElement, css) || this;
                        _this.onSelectedElementChanged = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        _this.onEditQuestion = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        _this.onCopyQuestion = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        _this.onFastCopyQuestion = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        _this.onDeleteCurrentObject = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
                        var self = _this;
                        _this.setDesignMode(true);
                        _this.onAfterRenderPage.add(function(sender, options) {
                            options.page["onAfterRenderPage"](options.htmlElement);
                        });
                        _this.onAfterRenderQuestion.add(function(sender, options) {
                            options.question["onAfterRenderQuestion"](options.htmlElement);
                        });
                        _this.onAfterRenderPanel.add(function(sender, options) {
                            options.panel["onAfterRenderPanel"](options.htmlElement);
                        });
                        _this.editQuestionClick = function() {
                            self.onEditQuestion.fire(self, null);
                        };
                        _this.copyQuestionClick = function() {
                            self.onCopyQuestion.fire(self, null);
                        };
                        _this.fastCopyQuestionClick = function() {
                            self.onFastCopyQuestion.fire(self, null);
                        };
                        _this.deleteCurrentObjectClick = function() {
                            self.onDeleteCurrentObject.fire(self, null);
                        };
                        return _this;
                    }
                    Object.defineProperty(SurveyForDesigner.prototype, "selectedElement", {
                        get: function() {
                            return this.selectedElementValue;
                        },
                        set: function(value) {
                            if (value == this.selectedElementValue)
                                return;
                            var oldValue = this.selectedElementValue;
                            this.selectedElementValue = value;
                            if (oldValue != null) {
                                oldValue["onSelectedElementChanged"]();
                            }
                            if (this.selectedElementValue != null) {
                                this.selectedElementValue["onSelectedElementChanged"]();
                            }
                            this.onSelectedElementChanged.fire(this, {
                                'oldElement': oldValue,
                                'newElement': value
                            });
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyForDesigner.prototype.getEditorLocString = function(value) {
                        return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */ ].getString(value);
                    };
                    return SurveyForDesigner;
                }(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Survey"]));

                function panelBaseOnCreating(self) {
                    self.dragEnterCounter = 0;
                    self.emptyElement = null;
                    self.koRows.subscribe(function(changes) {
                        if (self.emptyElement) {
                            self.emptyElement.style.display = self.koRows().length > 0 ? "none" : "";
                        }
                    });
                }

                function elementOnCreating(self, className) {
                    self.dragDropHelperValue = null;
                    self.dragDropHelper = function() {
                        if (self.dragDropHelperValue == null) {
                            self.dragDropHelperValue = self.data["dragDropHelper"];
                        }
                        return self.dragDropHelperValue;
                    };
                    self.renderedElement = null;
                    self.addonsElement = null;
                    self.koIsDragging = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
                    self.koIsSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
                    self.koIsDragging.subscribe(function(newValue) {
                        if (self.renderedElement) {
                            self.renderedElement.style.opacity = newValue ? 0.4 : 1;
                        }
                    });
                    self.koIsSelected.subscribe(function(newValue) {
                        if (self.renderedElement) {
                            var newClass = className;
                            if (newValue)
                                newClass += " svd_q_selected ";
                            self.renderedElement.className = newClass;
                        }
                        if (self.addonsElement) {
                            self.addonsElement.style.display = newValue ? "" : "none";
                        }
                    });
                }

                function addEmptyPanelElement(root, dragDropHelper, self) {
                    var eDiv = document.createElement("div");
                    eDiv.className = "well";
                    eDiv.ondragover = function(e) {
                        dragDropHelper.doDragDropOver(e, self);
                    };
                    var eSpan = document.createElement("span");
                    eSpan.textContent = self.data.getEditorLocString('survey.dropQuestion');
                    eDiv.appendChild(eSpan);
                    root.appendChild(eDiv);
                    return eDiv;
                }
                var question_design_class = "svd_question well well-sm svd_q_design_border";
                var panel_design_class = "svd_question well well-sm svd_q_design_border";

                function createQuestionDesignItem(onClick, text) {
                    var res = document.createElement("li");
                    var btn = document.createElement("button");
                    btn.innerText = text;
                    btn.onclick = onClick;
                    btn.className = "btn btn-primary btn-xs";
                    res.appendChild(btn);
                    return res;
                }

                function createElementAddons(data, isPanel) {
                    var main = document.createElement("div");
                    main.className = "svd_question_menu btn-group";
                    main["role"] = "group";
                    var btn = document.createElement("button");
                    btn.type = "button";
                    btn.className = "btn btn-primary  btn-xs";
                    btn.onclick = function(e) {
                        data.editQuestionClick();
                    };
                    var span = document.createElement("span");
                    span.innerText = "Edit"; //TODO
                    btn.appendChild(span);
                    main.appendChild(btn);
                    btn = document.createElement("button");
                    btn.type = "button";
                    btn.className = "btn btn-primary  btn-xs dropdown-toggle";
                    btn.setAttribute("data-toggle", "dropdown");
                    btn.setAttribute("aria-haspopup", "true");
                    btn.setAttribute("aria-expanded", "false");
                    span = document.createElement("span");
                    span.className = "glyphicon glyphicon-option-horizontal";
                    btn.appendChild(span);
                    main.appendChild(btn);
                    var ul = document.createElement("ul");
                    ul.className = "dropdown-menu";
                    ul.appendChild(createQuestionDesignItem(data.copyQuestionClick, data.getEditorLocString('survey.addToToolbox')));
                    ul.appendChild(createQuestionDesignItem(data.fastCopyQuestionClick, data.getEditorLocString('survey.copy')));
                    var deleteLocaleName = isPanel ? 'survey.deletePanel' : 'survey.deleteQuestion';
                    ul.appendChild(createQuestionDesignItem(data.deleteCurrentObjectClick, data.getEditorLocString(deleteLocaleName)));
                    main.appendChild(ul);
                    return main;
                }
                //var lastElementOnClick: HTMLElement = null;
                function elementOnAfterRendering(el, self, className, isPanel, disable) {
                    self.renderedElement = el;
                    var newClass = className;
                    if (self.koIsSelected())
                        newClass += " svd_q_selected";
                    el.className = newClass;
                    el.style.opacity = self.koIsDragging() ? 0.4 : 1;
                    el.draggable = true;
                    el.ondragover = function(e) {
                        if (!e["markEvent"]) {
                            e["markEvent"] = true;
                            self.dragDropHelper().doDragDropOver(e, self, true);
                        }
                    };
                    el.ondrop = function(e) {
                        if (!e["markEvent"]) {
                            e["markEvent"] = true;
                            self.dragDropHelper().doDrop(e);
                        }
                    };
                    el.ondragstart = function(e) {
                        if (!e["markEvent"]) {
                            e["markEvent"] = true;
                            self.dragDropHelper().startDragQuestion(e, self);
                        }
                    };
                    el.ondragend = function(e) {
                        self.dragDropHelper().end();
                    };
                    el.onclick = function(e) {
                        if (!e["markEvent"]) {
                            e["markEvent"] = true;
                            self.data["selectedElement"] = self;
                        }
                    };
                    el.onkeydown = function(e) {
                        if (e.witch == 46)
                            self.data.deleteCurrentObjectClick();
                        return true;
                    };
                    if (disable) {
                        var childs = el.childNodes;
                        for (var i = 0; i < childs.length; i++) {
                            if (childs[i].style)
                                childs[i].style.pointerEvents = "none";
                        }
                    }
                    self.addonsElement = createElementAddons(self.data, isPanel);
                    self.addonsElement.style.display = self.koIsSelected() ? "" : "none";
                    el.appendChild(self.addonsElement);
                }
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Page"].prototype["onCreating"] = function() {
                    panelBaseOnCreating(this);
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Page"].prototype["onAfterRenderPage"] = function(el) {
                    if (!this.data.isDesignMode)
                        return;
                    var self = this;
                    var dragDropHelper = this.data["dragDropHelper"];
                    this.dragEnterCounter = 0;
                    el.ondragenter = function(e) {
                        e.preventDefault();
                        self.dragEnterCounter++;
                    };
                    el.ondragleave = function(e) {
                        self.dragEnterCounter--;
                        if (self.dragEnterCounter === 0)
                            dragDropHelper.doLeavePage(e);
                    };
                    el.ondragover = function(e) {
                        return false;
                    };
                    el.ondrop = function(e) {
                        dragDropHelper.doDrop(e);
                    };
                    if (this.elements.length == 0) {
                        this.emptyElement = addEmptyPanelElement(el, dragDropHelper, self);
                    }
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onCreating"] = function() {
                    panelBaseOnCreating(this);
                    elementOnCreating(this, panel_design_class);
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onAfterRenderPanel"] = function(el) {
                    if (!this.data.isDesignMode)
                        return;
                    var rows = this.koRows();
                    var self = this;
                    if (this.elements.length == 0) {
                        this.emptyElement = addEmptyPanelElement(el, self.dragDropHelper(), self);
                    }
                    elementOnAfterRendering(el, this, panel_design_class, true, this.koIsDragging());
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onSelectedElementChanged"] = function() {
                    if (this.data == null)
                        return;
                    this.koIsSelected(this.data["selectedElementValue"] == this);
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onCreating"] = function() {
                    elementOnCreating(this, question_design_class);
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onAfterRenderQuestion"] = function(el) {
                    if (!this.data.isDesignMode)
                        return;
                    elementOnAfterRendering(el, this, question_design_class, false, true);
                };
                __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onSelectedElementChanged"] = function() {
                    if (this.data == null)
                        return;
                    this.koIsSelected(this.data["selectedElementValue"] == this);
                };


                /***/
            }),
            /* 23 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyUndoRedo;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return UndoRedoItem;
                });


                var SurveyUndoRedo = (function() {
                    function SurveyUndoRedo() {
                        this.index = -1;
                        this.maximumCount = 10;
                        this.items = [];
                        this.koCanUndo = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.koCanRedo = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                    }
                    SurveyUndoRedo.prototype.clear = function() {
                        this.items = [];
                        this.koCanUndo(false);
                        this.koCanRedo(false);
                    };
                    SurveyUndoRedo.prototype.setCurrent = function(survey, selectedObjName) {
                        var item = new UndoRedoItem();
                        item.surveyJSON = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"]().toJsonObject(survey);
                        item.selectedObjName = selectedObjName;
                        if (this.index < this.items.length - 1) {
                            this.items.splice(this.index + 1);
                        }
                        this.items.push(item);
                        this.removeOldData();
                        this.index = this.items.length - 1;
                        this.updateCanUndoRedo();
                    };
                    SurveyUndoRedo.prototype.undo = function() {
                        if (!this.canUndo)
                            return null;
                        return this.doUndoRedo(-1);
                    };
                    SurveyUndoRedo.prototype.redo = function() {
                        if (!this.canRedo)
                            return null;
                        return this.doUndoRedo(1);
                    };
                    SurveyUndoRedo.prototype.updateCanUndoRedo = function() {
                        this.koCanUndo(this.canUndo);
                        this.koCanRedo(this.canRedo);
                    };
                    SurveyUndoRedo.prototype.doUndoRedo = function(dIndex) {
                        this.index += dIndex;
                        this.updateCanUndoRedo();
                        return this.index >= 0 && this.index < this.items.length ? this.items[this.index] : null;
                    };
                    Object.defineProperty(SurveyUndoRedo.prototype, "canUndo", {
                        get: function() {
                            return this.index >= 1 && this.index < this.items.length;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyUndoRedo.prototype, "canRedo", {
                        get: function() {
                            return this.items.length > 1 && this.index < this.items.length - 1;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyUndoRedo.prototype.removeOldData = function() {
                        if (this.items.length - 1 < this.maximumCount)
                            return;
                        this.items.splice(0, this.items.length - this.maximumCount - 1);
                    };
                    return SurveyUndoRedo;
                }());

                var UndoRedoItem = (function() {
                    function UndoRedoItem() {}
                    return UndoRedoItem;
                }());



                /***/
            }),
            /* 24 */
            /***/
            (function(module, exports) {

                module.exports = __WEBPACK_EXTERNAL_MODULE_24__;

                /***/
            }),
            /* 25 */
            /***/
            (function(module, exports) {

                // removed by extract-text-webpack-plugin

                /***/
            }),
            /* 26 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__objectEditor__ = __webpack_require__(7);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__pagesEditor__ = __webpack_require__(15);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__surveyEmbedingWindow__ = __webpack_require__(20);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5__surveyObjects__ = __webpack_require__(21);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6__objectVerbs__ = __webpack_require__(14);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_7__questionEditors_questionEditor__ = __webpack_require__(9);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_8__surveyJSONEditor__ = __webpack_require__(60);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_9__textWorker__ = __webpack_require__(10);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_10__undoredo__ = __webpack_require__(23);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_11__surveyHelper__ = __webpack_require__(6);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_12__dragdrophelper__ = __webpack_require__(12);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_13__questionToolbox__ = __webpack_require__(19);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_14__json5__ = __webpack_require__(11);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_15_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_15_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_survey_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_16__surveyjsObjects__ = __webpack_require__(22);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyEditor;
                });









                var templateEditorHtml = __webpack_require__(59);


                var SurveyEditor = (function() {
                    function SurveyEditor(renderedElement, options) {
                        if (renderedElement === void 0) {
                            renderedElement = null;
                        }
                        if (options === void 0) {
                            options = null;
                        }
                        this.stateValue = "";
                        this.dragDropHelper = null;
                        this.surveyId = null;
                        this.surveyPostId = null;
                        this.alwaySaveTextInPropertyEditors = false;
                        this.onCanShowProperty = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Event"]();
                        this.onQuestionAdded = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Event"]();
                        this.onPanelAdded = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Event"]();
                        this.onModified = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Event"]();
                        this.saveNo = 0;
                        this.koShowOptions = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koGenerateValidJSON = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koDesignerHeight = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.setOptions(options);
                        this.koCanDeleteObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        var self = this;
                        this.koState = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koShowSaveButton = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
                        this.koTestSurveyWidth = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("100%");
                        this.saveButtonClick = function() {
                            self.doSave();
                        };
                        this.koObjects = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
                        this.koSelectedObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
                        this.koSelectedObject.subscribe(function(newValue) {
                            self.selectedObjectChanged(newValue != null ? newValue.value : null);
                        });
                        this.koGenerateValidJSON.subscribe(function(newValue) {
                            if (!self.options)
                                self.options = {};
                            self.options.generateValidJSON = newValue;
                            if (self.generateValidJSONChangedCallback)
                                self.generateValidJSONChangedCallback(newValue);
                        });
                        this.surveyObjects = new __WEBPACK_IMPORTED_MODULE_5__surveyObjects__["a" /* SurveyObjects */ ](this.koObjects, this.koSelectedObject);
                        this.undoRedo = new __WEBPACK_IMPORTED_MODULE_10__undoredo__["a" /* SurveyUndoRedo */ ]();
                        this.surveyVerbs = new __WEBPACK_IMPORTED_MODULE_6__objectVerbs__["a" /* SurveyVerbs */ ](function() {
                            self.setModified();
                        });
                        this.selectedObjectEditor = new __WEBPACK_IMPORTED_MODULE_2__objectEditor__["a" /* SurveyObjectEditor */ ](this.options);
                        this.selectedObjectEditor.onCanShowPropertyCallback = function(object, property) {
                            return self.onCanShowObjectProperty(object, property);
                        };
                        this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
                            self.onPropertyValueChanged(options.property, options.object, options.newValue);
                        });
                        this.questionEditorWindow = new __WEBPACK_IMPORTED_MODULE_7__questionEditors_questionEditor__["a" /* SurveyPropertyEditorShowWindow */ ]();
                        this.questionEditorWindow.onCanShowPropertyCallback = function(object, property) {
                            return self.onCanShowObjectProperty(object, property);
                        };
                        this.pagesEditor = new __WEBPACK_IMPORTED_MODULE_3__pagesEditor__["a" /* SurveyPagesEditor */ ](function() {
                            self.addPage();
                        }, function(page) {
                            self.surveyObjects.selectObject(page);
                        }, function(indexFrom, indexTo) {
                            self.movePage(indexFrom, indexTo);
                        }, function(page) {
                            self.deleteCurrentObject();
                        });
                        this.surveyEmbeding = new __WEBPACK_IMPORTED_MODULE_4__surveyEmbedingWindow__["a" /* SurveyEmbedingWindow */ ]();
                        this.toolboxValue = new __WEBPACK_IMPORTED_MODULE_13__questionToolbox__["a" /* QuestionToolbox */ ](this.options && this.options.questionTypes ? this.options.questionTypes : null);
                        this.koViewType = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("designer");
                        this.koIsShowDesigner = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function() {
                            return self.koViewType() == "designer";
                        });
                        this.selectDesignerClick = function() {
                            self.showDesigner();
                        };
                        this.selectEditorClick = function() {
                            self.showJsonEditor();
                        };
                        this.saveEditorClick = function(){
                            self.saveJsonEditor();
                        };
                        this.saveEditSurveyClick = function () {
                            self.saveJsonEditSurvey();
                        };
                        this.selectTestClick = function() {
                            self.showTestSurvey();
                        };
                        this.selectEmbedClick = function() {
                            self.showEmbedEditor();
                        };
                        this.generateValidJSONClick = function() {
                            self.koGenerateValidJSON(true);
                        };
                        this.generateReadableJSONClick = function() {
                            self.koGenerateValidJSON(false);
                        };
                        this.runSurveyClick = function() {
                            self.showLiveSurvey();
                        };
                        this.embedingSurveyClick = function() {
                            self.showSurveyEmbeding();
                        };
                        this.deleteObjectClick = function() {
                            self.deleteCurrentObject();
                        };
                        this.draggingToolboxItem = function(item, e) {
                            self.doDraggingToolboxItem(item.json, e);
                        };
                        this.clickToolboxItem = function(item) {
                            self.doClickToolboxItem(item.json);
                        };
                        this.dragEnd = function (item, e) {
                            self.dragDropHelper.end();
                        };
                        this.doUndoClick = function() {
                            self.doUndoRedo(self.undoRedo.undo());
                        };
                        this.doRedoClick = function() {
                            self.doUndoRedo(self.undoRedo.redo());
                        };
                        this.jsonEditor = new __WEBPACK_IMPORTED_MODULE_8__surveyJSONEditor__["a" /* SurveyJSONEditor */ ]();
                        this.text = "";
                        if (renderedElement) {
                            this.render(renderedElement);
                        }
                    }
                    SurveyEditor.prototype.setOptions = function(options) {
                        this.options = options;
                        this.showJSONEditorTabValue = options && typeof(options.showJSONEditorTab) !== 'undefined' ? options.showJSONEditorTab : true;
                        this.showTestSurveyTabValue = options && typeof(options.showTestSurveyTab) !== 'undefined' ? options.showTestSurveyTab : true;
                        this.showEmbededSurveyTabValue = options && typeof(options.showEmbededSurveyTab) !== 'undefined' ? options.showEmbededSurveyTab : false;
                        this.koShowOptions(options && typeof(options.showOptions) !== 'undefined' ? options.showOptions : false);
                        this.koGenerateValidJSON(this.options && this.options.generateValidJSON);
                        if (options && options.designerHeight) {
                            this.koDesignerHeight(options.designerHeight);
                        }
                        if (options && options.objectsIntend) {
                            __WEBPACK_IMPORTED_MODULE_5__surveyObjects__["a" /* SurveyObjects */ ].intend = options.objectsIntend;
                        }
                        this.koDesignerHeight();
                        if (this.selectedObjectEditor)
                            this.selectedObjectEditor.setOptions(options);
                    };
                    Object.defineProperty(SurveyEditor.prototype, "survey", {
                        get: function() {
                            return this.surveyValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyEditor.prototype.render = function(element, options) {
                        if (element === void 0) {
                            element = null;
                        }
                        if (options === void 0) {
                            options = null;
                        }
                        if (options)
                            this.setOptions(options);
                        var self = this;
                        if (element && typeof element == "string") {
                            element = document.getElementById(element);
                        }
                        if (element) {
                            this.renderedElement = element;
                        }
                        element = this.renderedElement;
                        if (!element)
                            return;
                        element.innerHTML = templateEditorHtml;
                        self.applyBinding();
                    };
                    SurveyEditor.prototype.loadSurvey = function(surveyId) {
                        var self = this;
                        new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["dxSurveyService"]().loadSurvey(surveyId, function(success, result, response) {
                            if (success && result) {
                                self.text = JSON.stringify(result);
                            }
                        });
                    };
                    Object.defineProperty(SurveyEditor.prototype, "text", {
                        get: function() {
                            if (this.koIsShowDesigner())
                                return this.getSurveyTextFromDesigner();
                            return this.jsonEditor.text;
                        },
                        set: function(value) {
                            var textWorker = new __WEBPACK_IMPORTED_MODULE_9__textWorker__["a" /* SurveyTextWorker */ ](value);
                            if (textWorker.isJsonCorrect) {
                                this.initSurvey(new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(textWorker.survey));
                                this.showDesigner();
                                this.setUndoRedoCurrentState(true);
                            } else {
                                this.setTextValue(value);
                                this.koViewType("editor");
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "toolbox", {
                        get: function() {
                            return this.toolboxValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "customToolboxQuestionMaxCount", {
                        get: function() {
                            return this.toolbox.copiedItemMaxCount;
                        },
                        set: function(value) {
                            this.toolbox.copiedItemMaxCount = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "state", {
                        get: function() {
                            return this.stateValue;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyEditor.prototype.setState = function(value) {
                        this.stateValue = value;
                        this.koState(this.state);
                    };
                    SurveyEditor.prototype.doSave = function() {
                        this.setState("saving");
                        if (this.saveSurveyFunc) {
                            this.saveNo++;
                            var self = this;
                            this.saveSurveyFunc(this.saveNo, function doSaveCallback(no, isSuccess) {
                                self.setState("saved");
                                if (self.saveNo == no) {
                                    if (isSuccess)
                                        self.setState("saved");
                                }
                            });
                        }
                    };
                    SurveyEditor.prototype.setModified = function() {
                        this.setState("modified");
                        this.setUndoRedoCurrentState();
                        this.onModified.fire(this, null);
                    };
                    SurveyEditor.prototype.setUndoRedoCurrentState = function(clearState) {
                        if (clearState === void 0) {
                            clearState = false;
                        }
                        if (clearState) {
                            this.undoRedo.clear();
                        }
                        var selObj = this.koSelectedObject() ? this.koSelectedObject().value : null;
                        this.undoRedo.setCurrent(this.surveyValue, selObj ? selObj.name : null);
                    };
                    Object.defineProperty(SurveyEditor.prototype, "saveSurveyFunc", {
                        get: function() {
                            return this.saveSurveyFuncValue;
                        },
                        set: function(value) {
                            this.saveSurveyFuncValue = value;
                            this.koShowSaveButton(value != null);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "showOptions", {
                        get: function() {
                            return this.koShowOptions();
                        },
                        set: function(value) {
                            this.koShowOptions(value);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "showJSONEditorTab", {
                        get: function() {
                            return this.showJSONEditorTabValue;
                        },
                        set: function(value) {
                            this.showJSONEditorTabValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "showTestSurveyTab", {
                        get: function() {
                            return this.showTestSurveyTabValue;
                        },
                        set: function(value) {
                            this.showTestSurveyTabValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyEditor.prototype, "showEmbededSurveyTab", {
                        get: function() {
                            return this.showEmbededSurveyTabValue;
                        },
                        set: function(value) {
                            this.showEmbededSurveyTabValue = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyEditor.prototype.onCanShowObjectProperty = function(object, property) {
                        var options = {
                            obj: object,
                            property: property,
                            canShow: true
                        };
                        this.onCanShowProperty.fire(this, options);
                        return options.canShow;
                    };
                    SurveyEditor.prototype.setTextValue = function(value) {
                        this.jsonEditor.text = value;
                    };
                    SurveyEditor.prototype.addPage = function() {
                        var name = __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getNewPageName(this.survey.pages);
                        var page = this.surveyValue.addNewPage(name);
                        this.addPageToUI(page);
                        this.setModified();
                    };
                    SurveyEditor.prototype.getLocString = function(str) {
                        return __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */ ].getString(str);
                    };
                    SurveyEditor.prototype.movePage = function(indexFrom, indexTo) {
                        var page = this.survey.pages[indexFrom];
                        this.survey.pages.splice(indexFrom, 1);
                        this.survey.pages.splice(indexTo, 0, page);
                        this.pagesEditor.survey = this.survey;
                        this.surveyObjects.selectObject(page);
                        this.setModified();
                    };
                    SurveyEditor.prototype.addPageToUI = function(page) {
                        this.pagesEditor.survey = this.surveyValue;
                        this.surveyObjects.addPage(page);
                    };
                    SurveyEditor.prototype.doOnQuestionAdded = function(question, parentPanel) {
                        var page = this.survey.getPageByElement(question);
                        var options = {
                            question: question,
                            page: page
                        };
                        this.onQuestionAdded.fire(this, options);
                        this.surveyObjects.addElement(question, parentPanel);
                        this.survey.render();
                    };
                    SurveyEditor.prototype.doOnElementRemoved = function(question) {
                        this.surveyObjects.removeObject(question);
                        this.survey.render();
                    };
                    SurveyEditor.prototype.doOnPanelAdded = function(panel, parentPanel) {
                        var page = this.survey.getPageByElement(panel);
                        var options = {
                            panel: panel,
                            page: page
                        };
                        this.onPanelAdded.fire(this, options);
                        this.surveyObjects.addElement(panel, parentPanel);
                        this.survey.render();
                    };
                    SurveyEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
                        var isDefault = property.isDefaultValue(newValue);
                        obj[property.name] = newValue;
                        if (property.name == "name") {
                            this.surveyObjects.nameChanged(obj);
                            if (__WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Page) {
                                this.pagesEditor.changeName(obj);
                            }
                        }
                        this.setModified();
                        if (obj === this.survey && property.name == "locale") {
                            this.selectedObjectEditor.ObjectChanged();
                        }
                        this.survey.render();
                    };
                    SurveyEditor.prototype.doUndoRedo = function(item) {
                        this.initSurvey(item.surveyJSON);
                        if (item.selectedObjName) {
                            var selObj = this.findObjByName(item.selectedObjName);
                            if (selObj) {
                                this.surveyObjects.selectObject(selObj);
                            }
                        }
                        this.setState(this.undoRedo.koCanUndo() ? "modified" : "saved");
                    };
                    SurveyEditor.prototype.findObjByName = function(name) {
                        var page = this.survey.getPageByName(name);
                        if (page)
                            return page;
                        var question = this.survey.getQuestionByName(name);
                        if (question)
                            return question;
                        return null;
                    };
                    SurveyEditor.prototype.canSwitchViewType = function(newType) {
                        if (newType && this.koViewType() == newType)
                            return false;
                        if (this.koViewType() == "designer") {
                            this.jsonEditor.text = this.getSurveyTextFromDesigner();
                        }
                        if (this.koViewType() != "editor")
                            return true;
                        if (!this.jsonEditor.isJsonCorrect) {
                            alert(this.getLocString("ed.correctJSON"));
                            return false;
                        }
                        this.initSurvey(new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(this.jsonEditor.survey));
                        return true;
                    };
                    SurveyEditor.prototype.showDesigner = function() {
                        if (!this.canSwitchViewType("designer"))
                            return;
                        this.koViewType("designer");
                    };
                    SurveyEditor.prototype.showJsonEditor = function() {
                        if (this.koViewType() == "editor")
                            return;
                        this.jsonEditor.show(this.getSurveyTextFromDesigner());
                        this.koViewType("editor");
                    };
                    SurveyEditor.prototype.saveJsonEditor = function () {

                        var json = JSON.stringify(eval(this.getSurveyTextFromDesigner()));
                        getJQueryControl("surveyContent").val('{"pages":' + json + '}');

                        getControl("btnReceiveSurvey").click();
                    };
                    SurveyEditor.prototype.saveJsonEditSurvey = function () {

                        var json = JSON.stringify(eval(this.getSurveyTextFromDesigner()));
                        getJQueryControl("editSurveyContent").val('{"pages":' + json + '}');
                        
                        getControl("btnSaveEditSurvey").click();
                    };
                    SurveyEditor.prototype.showTestSurvey = function() {
                        if (!this.canSwitchViewType(null))
                            return;
                        this.showLiveSurvey();
                        this.koViewType("test");
                    };
                    SurveyEditor.prototype.showEmbedEditor = function() {
                        if (!this.canSwitchViewType("embed"))
                            return;
                        this.showSurveyEmbeding();
                        this.koViewType("embed");
                    };
                    SurveyEditor.prototype.getSurveyTextFromDesigner = function() {
                        var json = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(this.survey);
                        if (this.options && this.options.generateValidJSON)
                            return JSON.stringify(json, null, 1);
                        return new __WEBPACK_IMPORTED_MODULE_14__json5__["a" /* SurveyJSON5 */ ]().stringify(json, null, 1);

                    };
                    SurveyEditor.prototype.selectedObjectChanged = function(obj) {
                        var canDeleteObject = false;
                        this.selectedObjectEditor.selectedObject = obj;
                        this.surveyVerbs.obj = obj;
                        var objType = __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(obj);
                        if (objType == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Page) {
                            this.survey.currentPage = obj;
                            canDeleteObject = this.survey.pages.length > 1;
                        }
                        if (objType == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Question || objType == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Panel) {
                            this.survey.selectedElement = obj;
                            canDeleteObject = true;
                            this.survey.currentPage = this.survey.getPageByQuestion(this.survey.selectedElement);
                        } else {
                            this.survey.selectedElement = null;
                        }
                        this.koCanDeleteObject(canDeleteObject);
                    };
                    SurveyEditor.prototype.applyBinding = function() {
                        if (this.renderedElement == null)
                            return;
                        __WEBPACK_IMPORTED_MODULE_0_knockout__["cleanNode"](this.renderedElement);
                        __WEBPACK_IMPORTED_MODULE_0_knockout__["applyBindings"](this, this.renderedElement);
                        this.surveyjs = document.getElementById("surveyjs");
                        if (this.surveyjs) {
                            var self = this;
                            this.surveyjs.onkeydown = function(e) {
                                if (!e)
                                    return;
                                if (e.keyCode == 46)
                                    self.deleteQuestion();
                                if (e.keyCode == 38 || e.keyCode == 40) {
                                    self.selectQuestion(e.keyCode == 38);
                                }
                            };
                        }
                        this.surveyjsExample = document.getElementById("surveyjsExample");
                        this.initSurvey(new __WEBPACK_IMPORTED_MODULE_14__json5__["a" /* SurveyJSON5 */ ]().parse(SurveyEditor.defaultNewSurveyText));
                        this.setUndoRedoCurrentState(true);
                        this.jsonEditor.init();
                        if (jQuery && jQuery()["select2"]) {
                            jQuery("#objectSelector")["select2"]();
                            jQuery("#objectSelector").width("100%");
                        }
                    };
                    SurveyEditor.prototype.initSurvey = function(json) {
                        var self = this;
                        this.surveyValue = new __WEBPACK_IMPORTED_MODULE_16__surveyjsObjects__["a" /* SurveyForDesigner */ ]();
                        this.dragDropHelper = new __WEBPACK_IMPORTED_MODULE_12__dragdrophelper__["a" /* DragDropHelper */ ](this.survey, function() {
                            self.setModified();
                        });
                        this.surveyValue["setJsonObject"](json); //TODO
                        if (this.surveyValue.isEmpty) {
                            this.surveyValue["setJsonObject"](new __WEBPACK_IMPORTED_MODULE_14__json5__["a" /* SurveyJSON5 */ ]().parse(SurveyEditor.defaultNewSurveyText)); //TODO
                        }
                        this.surveyValue["dragDropHelper"] = this.dragDropHelper;
                        this.survey.render(this.surveyjs);
                        this.surveyObjects.survey = this.survey;
                        this.pagesEditor.survey = this.survey;
                        this.pagesEditor.setSelectedPage(this.survey.currentPage);
                        this.surveyVerbs.survey = this.survey;
                        this.surveyValue.onSelectedElementChanged.add(function(sender, options) {
                            self.surveyObjects.selectObject(sender["selectedElement"]);
                        });
                        this.surveyValue.onEditQuestion.add(function(sender, options) {
                            self.showQuestionEditor(self.koSelectedObject().value);
                        });
                        this.surveyValue.onCopyQuestion.add(function(sender, options) {
                            self.addCustomToolboxQuestion(self.koSelectedObject().value);
                        });
                        this.surveyValue.onFastCopyQuestion.add(function(sender, options) {
                            self.fastCopyQuestion(self.koSelectedObject().value);
                        });
                        this.surveyValue.onDeleteCurrentObject.add(function(sender, options) {
                            self.deleteCurrentObject();
                        });
                        this.surveyValue.onProcessHtml.add(function(sender, options) {
                            options.html = self.processHtml(options.html);
                        });
                        this.surveyValue.onCurrentPageChanged.add(function(sender, options) {
                            self.pagesEditor.setSelectedPage(sender.currentPage);
                        });
                        this.surveyValue.onQuestionAdded.add(function(sender, options) {
                            self.doOnQuestionAdded(options.question, options.parentPanel);
                        });
                        this.surveyValue.onQuestionRemoved.add(function(sender, options) {
                            self.doOnElementRemoved(options.question);
                        });
                        this.surveyValue.onPanelAdded.add(function(sender, options) {
                            self.doOnPanelAdded(options.panel, options.parentPanel);
                        });
                        this.surveyValue.onPanelRemoved.add(function(sender, options) {
                            self.doOnElementRemoved(options.panel);
                        });
                    };
                    SurveyEditor.prototype.processHtml = function(html) {
                        if (!html)
                            return html;
                        var scriptRegEx = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
                        while (scriptRegEx.test(html)) {
                            html = html.replace(scriptRegEx, "");
                        }
                        return html;
                    };
                    SurveyEditor.prototype.doDraggingToolboxItem = function(json, e) {
                        this.dragDropHelper.startDragToolboxItem(e, this.getNewName(json["type"]), json);
                    };
                    SurveyEditor.prototype.doClickToolboxItem = function(json) {
                        var name = this.getNewName(json["type"]);
                        var question = __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"].metaData.createClass(json["type"]);
                        new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toObject(json, question);
                        question.name = name;
                        this.doClickQuestionCore(question);
                    };
                    SurveyEditor.prototype.getNewName = function(type) {
                        return type == "panel" ? this.getNewPanelName() : this.getNewQuestionName();
                    };
                    SurveyEditor.prototype.getNewQuestionName = function() {
                        return __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getNewQuestionName(this.survey.getAllQuestions());
                    };
                    SurveyEditor.prototype.getNewPanelName = function() {
                        return __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getNewPanelName(this.getAllPanels());
                    };
                    SurveyEditor.prototype.getAllPanels = function() {
                        var result = [];
                        for (var i = 0; i < this.survey.pages.length; i++) {
                            this.addPanels(this.survey.pages[i], result);
                        }
                        return result;
                    };
                    SurveyEditor.prototype.addPanels = function(panel, result) {
                        for (var i = 0; i < panel.elements.length; i++) {
                            if (!panel.elements[i].isPanel)
                                continue;
                            result.push(panel.elements[i]);
                            this.addPanels(panel.elements[i], result);
                        }
                    };
                    SurveyEditor.prototype.doClickQuestionCore = function(question) {
                        var page = this.survey.currentPage;
                        var index = -1;
                        if (this.survey.selectedElement != null) {
                            index = page.questions.indexOf(this.survey.selectedElement) + 1;
                        }
                        page.addQuestion(question, index);
                        this.dragDropHelper.scrollToElement(document.getElementById(question.id));
                        this.setModified();
                    };
                    SurveyEditor.prototype.deleteQuestion = function() {
                        var question = this.getSelectedObjAsQuestion();
                        if (question) {
                            this.deleteCurrentObject();
                        }
                    };
                    SurveyEditor.prototype.selectQuestion = function(isUp) {
                        var question = this.getSelectedObjAsQuestion();
                        if (question) {
                            this.surveyObjects.selectNextQuestion(isUp);
                        }
                    };
                    SurveyEditor.prototype.getSelectedObjAsQuestion = function() {
                        var obj = this.koSelectedObject().value;
                        if (!obj)
                            return null;
                        return __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Question ? (obj) : null;
                    };
                    SurveyEditor.prototype.deleteCurrentObject = function() {
                        this.deleteObject(this.koSelectedObject().value);
                    };
                    SurveyEditor.prototype.showQuestionEditor = function(question) {
                        var self = this;
                        this.questionEditorWindow.show(question, function(question) {
                            self.onQuestionEditorChanged(question);
                        });
                    };
                    SurveyEditor.prototype.onQuestionEditorChanged = function(question) {
                        this.surveyObjects.nameChanged(question);
                        this.selectedObjectEditor.ObjectChanged();
                        this.setModified();
                        this.survey.render();
                    };
                    SurveyEditor.prototype.addCustomToolboxQuestion = function(question) {
                        this.toolbox.addCopiedItem(question);
                    };
                    SurveyEditor.prototype.fastCopyQuestion = function(question) {
                        var json = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(question);
                        json.type = question.getType();
                        this.doClickToolboxItem(json);
                    };
                    SurveyEditor.prototype.deleteObject = function(obj) {
                        this.surveyObjects.removeObject(obj);
                        var objType = __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["b" /* SurveyHelper */ ].getObjectType(obj);
                        if (objType == __WEBPACK_IMPORTED_MODULE_11__surveyHelper__["a" /* ObjType */ ].Page) {
                            this.survey.removePage(obj);
                            this.pagesEditor.removePage(obj);
                        } else {
                            this.survey.currentPage.removeElement(obj);
                            this.survey.selectedElement = null;
                            this.surveyObjects.selectObject(this.survey.currentPage);
                        }
                        this.setModified();
                        this.survey.render();
                    };
                    SurveyEditor.prototype.showLiveSurvey = function() {
                        var _this = this;
                        if (!this.surveyjsExample)
                            return;
                        var json = this.getSurveyJSON();
                        if (json != null) {
                            if (json.cookieName) {
                                delete json.cookieName;
                            }
                            var survey = new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Survey"](json);
                            var self = this;
                            var surveyjsExampleResults = document.getElementById("surveyjsExampleResults");
                            var surveyjsExamplereRun = document.getElementById("surveyjsExamplereRun");
                            if (surveyjsExampleResults)
                                surveyjsExampleResults.innerHTML = "";
                            if (surveyjsExamplereRun)
                                surveyjsExamplereRun.style.display = "none";
                            survey.onComplete.add(function(sender) {
                                if (surveyjsExampleResults)
                                    surveyjsExampleResults.innerHTML = _this.getLocString("ed.surveyResults") + JSON.stringify(survey.data);
                                if (surveyjsExamplereRun)
                                    surveyjsExamplereRun.style.display = "";
                            });
                            survey.render(this.surveyjsExample);
                        } else {
                            this.surveyjsExample.innerHTML = this.getLocString("ed.correctJSON");
                        }
                    };
                    SurveyEditor.prototype.showSurveyEmbeding = function() {
                        var json = this.getSurveyJSON();
                        this.surveyEmbeding.json = json;
                        this.surveyEmbeding.surveyId = this.surveyId;
                        this.surveyEmbeding.surveyPostId = this.surveyPostId;
                        this.surveyEmbeding.generateValidJSON = this.options && this.options.generateValidJSON;
                        this.surveyEmbeding.show();
                    };
                    SurveyEditor.prototype.getSurveyJSON = function() {
                        if (this.koIsShowDesigner())
                            return new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(this.survey);
                        if (this.jsonEditor.isJsonCorrect)
                            return new __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["JsonObject"]().toJsonObject(this.jsonEditor.survey);
                        return null;
                    };
                    SurveyEditor.prototype.createAnnotations = function(text, errors) {
                        var annotations = new Array();
                        for (var i = 0; i < errors.length; i++) {
                            var error = errors[i];
                            var annotation = {
                                row: error.position.start.row,
                                column: error.position.start.column,
                                text: error.text,
                                type: "error"
                            };
                            annotations.push(annotation);
                        }
                        return annotations;
                    };
                    return SurveyEditor;
                }());

                SurveyEditor.defaultNewSurveyText = "{ pages: [ { name: 'page1'}] }";
                __WEBPACK_IMPORTED_MODULE_15_survey_knockout__["Survey"].cssType = "bootstrap";


                /***/
            }),
            /* 27 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(2);

                var frenchTranslation = {
                    //Strings in Editor
                    ed: {
                        addNewPage: 'Ajouter une page',
                        correctJSON: 'SVP corriger le json',
                        delSelObject: 'Supprimer l\'objet sélectionné',
                        designer: 'Designer de questionnaire',
                        embedSurvey: 'Intégrer le questionnaire',
                        generateReadableJSON: 'Générer un JSON lisible',
                        generateValidJSON: 'Générer un JSON valide',
                        jsonEditor: 'Editer JSON',
                        newPageName: 'page',
                        newQuestionName: 'question',
                        options: 'Options',
                        redo: 'Rétablir',
                        saveSurvey: 'Sauvegarder le questionnaire',
                        surveyResults: 'Résultat du questionnaire: ',
                        testSurvey: 'Tester le questionnaire',
                        testSurveyAgain: 'Tester à nouveau le questionnaire',
                        testSurveyWidth: 'Largeur du questionnaire: ',
                        toolbox: 'Boite à outils',
                        undo: 'Annuler'
                    },
                    //Embed window
                    ew: {
                        angular: 'Utiliser la version Angular',
                        bootstrap: 'Pour Bootstrap framework',
                        jquery: 'Utiliser la version jQuery',
                        knockout: 'Utiliser la version Knockout',
                        loadFromServer: 'Charger le JSON du questionnaire depuis un serveur',
                        react: 'Utiliser la version React',
                        showInWindow: 'Afficher le questionnaire dans une fenêtre',
                        showOnPage: 'Afficher le questionnaire dans une page',
                        standard: 'Pas de bootstrap',
                        titleHtml: 'HTML',
                        titleJavaScript: 'JavaScript',
                        titleScript: 'Scripts et styles',
                        vue: 'Utiliser la version Vue'
                    },
                    //Operators
                    op: {
                        contains: 'contient',
                        empty: 'est vide',
                        equal: 'égal',
                        greater: 'supérieur',
                        greaterorequal: 'supérieur ou égal',
                        less: 'plus petit',
                        lessorequal: 'plus petit ou égal',
                        notcontains: 'ne contient pas',
                        notempty: 'n\'est pas vide',
                        notequal: 'n\'est pas égal'
                    },
                    //Properties
                    p: {
                        addRowText: 'Bouton ajouter une ligne',
                        cellType: 'Type de cellule',
                        choices: 'Choix',
                        choicesByUrl: 'Choix par API',
                        choicesOrder: 'Ordre des choix',
                        clearInvisibleValues: 'Cacher les valeur invisibles',
                        colCount: 'Nombre de colonnes',
                        cols: 'Nombre de cols',
                        columnColCount: 'Nombre de colonnes',
                        columnMinWidth: 'Largeur minimale des colonnes',
                        columns: 'Colonnes',
                        commentText: 'Description champ commentaire',
                        completeText: 'Texte questionnaire finalisé',
                        completedHtml: 'Html questionnaire finalisé',
                        cookieName: 'Nom du cookie',
                        edit: 'Editer',
                        focusFirstQuestionAutomatic: 'Focus sur la première question automatiquement',
                        goNextPageAutomatic: 'Aller à la page suivante automatiquement',
                        hasComment: 'Champs commentaire ?',
                        hasOther: 'Choix autre ?',
                        horizontalScroll: 'Scroll horizontal',
                        imageHeight: 'Hauteur de l \'image',
                        imageWidth: 'Largeur de l\'image',
                        indent: 'Indentation',
                        inputType: 'Type de champs',
                        isAllRowRequired: 'Toutes les lignes sont-elle obligatoires ?',
                        isRequired: 'Requis ?',
                        itemSize: 'Nombre maximum de caractères',
                        items: 'Items',
                        locale: 'Langue',
                        maxRateDescription: 'Description note maximum',
                        maxSize: 'Taille maximum',
                        minRateDescription: 'Description note minimum',
                        minRowCount: 'Nombre de ligne minimal',
                        mode: 'Mode d\'affichage',
                        name: 'Nom',
                        optionsCaption: 'Texte par défaut',
                        otherErrorText: 'Texte Erreur champs autre',
                        otherText: {
                            name: 'Text autre',
                            title: 'Champ commentaire ou choix autre'
                        },
                        pageNextText: 'Bouton page suivante',
                        pagePrevText: 'Bouton page précédente',
                        page_title: {
                            name: 'titre',
                            title: 'Titre de la page'
                        },
                        placeHolder: 'PlaceHolder (indice dans le champs)',
                        questionStartIndex: 'Index de numérotation des question',
                        questionTitleLocation: 'Emplacement titre question',
                        questionTitleTemplate: {
                            name: 'Template d\'affichage des question',
                            title: 'Exemple: {no}) {title} {require}:'
                        },
                        rateValues: 'Barème',
                        removeRowText: 'Bouton supprimer une ligne',
                        requiredText: 'Texte pour les champs requis',
                        rowCount: 'Nombre de lignes',
                        rows: 'Nombre de ligne',
                        sendResultOnPageNext: '',
                        showCompletedPage: 'Voir la page formulaire complété ?',
                        showNavigationButtons: 'Boutons de navigation',
                        showPageNumbers: 'Numérotation des pages',
                        showPageTitles: 'Titre des pages',
                        showPreview: 'Voir la prévisualisation',
                        showProgressBar: 'Barre de progression',
                        showQuestionNumbers: 'Numérotation des questions',
                        showTitle: 'Afficher le titre',
                        size: 'Nombre maximum de caractères',
                        startWithNewLine: 'Commencer avec une nouvelle ligne',
                        storeDataAsText: 'Stocker les données comme du text',
                        storeOthersAsComment: 'Sauvegarder choix autre comme commentaire',
                        surveyId: 'Id du questionnaire',
                        surveyPostId: 'Id POST questionnaire',
                        survey_title: {
                            name: 'titre',
                            title: 'Il sera affiché sur chaque page.'
                        },
                        title: {
                            name: 'Titre',
                            title: 'Laissez vide, si meme texte que le "Nom"'
                        },
                        triggers: 'Déclencheurs',
                        validators: 'Validateurs',
                        visibleIf: 'Visible si ',
                        width: 'Largeur'
                    },
                    //Property Editors
                    pe: {
                        addNew: 'Ajouter un nouveau',
                        addRowText: 'Texte bouton ajouter une ligne',
                        apply: 'Appliquer',
                        cancel: 'Annuler',
                        cellType: 'Type de cellule',
                        choicesOrder: 'Sélectionner l\'ordre des choix',
                        close: 'Fermer',
                        colCount: 'Nombre de colonnes',
                        columnEdit: 'Editer la colonne: {0}',
                        createtrigger: 'Veuillez créer un déclencheur',
                        delete: 'Supprimer',
                        edit: 'Editer',
                        editProperty: 'Editer la propriété "{0}"',
                        empty: '<vide>',
                        enterNewValue: 'Veuillez saisir la valeur.',
                        expressionHelp: 'Veuillez entrer une expression booléenne. Elle doit retourner Vrai(true) pour garder la question/page visible. Par exemple: {question1} = "valeur1" or ({question2} = 3 and {question3} < 5)',
                        fastEntry: 'Ajout rapide',
                        formEntry: 'Ajout via formulaire',
                        hasOther: 'Has other item',
                        imageHeight: 'Hauteur de l\'image',
                        imageWidth: 'Largeur de l\'image',
                        inputType: 'Type de champ',
                        isRequired: 'Est requis ?',
                        items: '[ Elements: {0} ]',
                        maxRateDescription: 'Description note maximum',
                        maxSize: 'Taille maximum du fichier en octets',
                        minRateDescription: 'Description note minimum',
                        name: 'Nom',
                        noquestions: 'Il n\'y a aucune question dans le questionnaire.',
                        ok: 'OK',
                        optionsCaption: 'Texte par défaut',
                        placeHolder: 'PlaceHolder (indice dans le champs)',
                        propertyIsEmpty: 'Veuillez entrer une valeur pour la propriété',
                        qEditorTitle: 'Editer la question: {0}',
                        removeAll: 'Tout supprimer',
                        removeRowText: 'Texte bouton supprimer une ligne',
                        required: 'Requis ?',
                        reset: 'Réinitialiser',
                        rowCount: 'Nombre de lignes',
                        rows: 'Nombre de lignes',
                        showPreview: 'L\'aperçu d\'image est-il affiché ?',
                        startWithNewLine: 'Commencer avec une nouvelle ligne ?',
                        storeDataAsText: 'Stocker le contenu du fichier dans le résultat JSON sous forme de texte',
                        tabs: {
                            choices: 'Choix',
                            choicesByUrl: 'Choix depuis api web',
                            columns: 'Colonnes',
                            fileOptions: 'Options',
                            general: 'Général',
                            html: 'Editeur Html',
                            matrixChoices: 'Choix par defaut',
                            multipleTextItems: 'Text Inputs',
                            rateValues: 'Barème',
                            rows: 'Lignes',
                            visibleIf: 'Visible Si'
                        },
                        testService: 'Tester le service',
                        text: 'Texte',
                        title: 'Titre',
                        triggerCompleteText: 'Complete the survey if succeed.',
                        triggerIsVariable: 'Ne placez pas la variable dans le résultat du questionnaire.',
                        triggerMakePagesVisible: 'Rendre les pages visibles:',
                        triggerMakeQuestionsVisible: 'Rendre les questions visibles:',
                        triggerNotSet: 'Le déclencheur n\'est pas défini',
                        triggerOn: 'On ',
                        triggerRunIf: 'Exécuster si',
                        triggerSetToName: 'Changer la valeur de: ',
                        triggerSetValue: 'à: ',
                        value: 'Valeur',
                        verbChangePage: 'Changer de page ',
                        verbChangeType: 'Changer le type ',
                        visible: 'Est visible ?'
                    },
                    //questionTypes
                    qt: {
                        checkbox: 'Cases à cocher',
                        comment: 'Commentaire',
                        dropdown: 'Liste déroulante',
                        file: 'Fichier',
                        html: 'Html',
                        matrix: 'Matice (choix unique)',
                        matrixdropdown: 'Matrice (choix multiples)',
                        matrixdynamic: 'Matrice (Lignes dynamiques)',
                        multipletext: 'champ multilignes',
                        radiogroup: 'Boutons radio',
                        rating: 'Evaluation',
                        text: 'Champ simple'
                    },
                    survey: {
                        addToToolbox: 'Ajouter à la boîte à outils',
                        copy: 'Copier',
                        deleteQuestion: 'Supprimer la question',
                        dropQuestion: 'Déposer votre question ici.'
                    }
                };
                __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */ ].locales["fr"] = frenchTranslation;


                /***/
            }),
            /* 28 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__ = __webpack_require__(5);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyItemValuesEditor;
                });





                var SurveyPropertyItemValuesEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyItemValuesEditor, _super);

                    function SurveyPropertyItemValuesEditor() {
                        var _this = _super.call(this) || this;
                        var self = _this;
                        _this.koActiveView = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("form");
                        _this.koItemsText = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
                        _this.koActiveView.subscribe(function(newValue) {
                            if (newValue == "form")
                                self.updateItems(self.koItemsText());
                            else
                                self.koItemsText(self.getItemsText());
                        });
                        _this.changeToTextViewClick = function() {
                            self.koActiveView("text");
                        };
                        _this.changeToFormViewClick = function() {
                            self.koActiveView("form");
                        };
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "editorType", {
                        get: function() {
                            return "itemvalues";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyItemValuesEditor.prototype.hasError = function() {
                        var result = false;
                        for (var i = 0; i < this.koItems().length; i++) {
                            var item = this.koItems()[i];
                            item.koHasError(this.isValueEmpty(item.koValue()));
                            result = result || item.koHasError();
                        }
                        return result;
                    };
                    SurveyPropertyItemValuesEditor.prototype.createNewEditorItem = function() {
                        return {
                            koValue: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](),
                            koText: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](),
                            koHasError: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false)
                        };
                    };
                    SurveyPropertyItemValuesEditor.prototype.createEditorItem = function(item) {
                        var itemValue = new __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["ItemValue"](null);
                        if (itemValue["setData"]) {
                            itemValue["setData"](item);
                        } else {
                            if (item.value) {
                                itemValue.value = item.value;
                                if (item.text)
                                    itemValue.text = item.text;
                            } else {
                                itemValue.value = item;
                            }
                        }
                        var itemText = "";
                        if (itemValue["locText"]) {
                            itemText = itemValue["locText"]["getLocaleText"](this.locale);
                        }
                        if (!itemText && itemValue.hasText) {
                            itemText = itemValue.text;
                        }
                        return {
                            item: item,
                            koValue: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](itemValue.value),
                            koText: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](itemText),
                            koHasError: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false)
                        };
                    };
                    SurveyPropertyItemValuesEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        var alwaySaveTextInPropertyEditors = this.options && this.options.alwaySaveTextInPropertyEditors;
                        var text = editorItem.koText();
                        if (!alwaySaveTextInPropertyEditors && editorItem.koText() == editorItem.koValue()) {
                            text = null;
                        }
                        var itemValue = new __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["ItemValue"](null);
                        //TODO use values directly
                        if (editorItem.item && itemValue["setData"]) {
                            itemValue["setData"](editorItem.item);
                        }
                        itemValue.value = editorItem.koValue();
                        if (itemValue["locText"]) {
                            itemValue["locText"]["setLocaleText"](this.locale, text);
                        } else {
                            if (text)
                                itemValue.text = text;
                        }
                        return itemValue;
                    };
                    SurveyPropertyItemValuesEditor.prototype.onBeforeApply = function() {
                        if (this.koActiveView() != "form") {
                            this.updateItems(this.koItemsText());
                        }
                        _super.prototype.onBeforeApply.call(this);
                    };
                    SurveyPropertyItemValuesEditor.prototype.updateItems = function(text) {
                        var items = [];
                        if (text) {
                            var texts = text.split("\n");
                            for (var i = 0; i < texts.length; i++) {
                                if (!texts[i])
                                    continue;
                                var valueItem = new __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["ItemValue"](texts[i]);
                                var item = {
                                    value: valueItem.value,
                                    text: (valueItem.hasText ? valueItem.text : "")
                                };
                                items.push(item);
                            }
                        }
                        this.koItems(this.getItemsFromValue(items));
                    };
                    SurveyPropertyItemValuesEditor.prototype.getItemsText = function() {
                        var text = [];
                        var items = this.koItems();
                        for (var i = 0; i < items.length; i++) {
                            var item = items[i];
                            if (this.isValueEmpty(item.koValue()))
                                continue;
                            var itemText = item.koValue();
                            if (item.koText())
                                itemText += __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["ItemValue"].Separator + item.koText();
                            text.push(itemText);
                        }
                        return text.join("\n");
                    };
                    SurveyPropertyItemValuesEditor.prototype.isValueEmpty = function(val) {
                        return !val;
                    };
                    return SurveyPropertyItemValuesEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */ ]));

                __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("itemvalues", function() {
                    return new SurveyPropertyItemValuesEditor();
                });


                /***/
            }),
            /* 29 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__ = __webpack_require__(5);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__questionEditors_questionEditor__ = __webpack_require__(9);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyDropdownColumnsEditor;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return SurveyPropertyMatrixDropdownColumnsItem;
                });







                var SurveyPropertyDropdownColumnsEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyDropdownColumnsEditor, _super);

                    function SurveyPropertyDropdownColumnsEditor() {
                        var _this = _super.call(this) || this;
                        var self = _this;
                        _this.koEditItem = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
                        _this.koIsList = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](true);
                        _this.koEditItem.subscribe(function(newValue) {
                            if (self.koEditItem() != null) {
                                self.columnEditor = new __WEBPACK_IMPORTED_MODULE_4__questionEditors_questionEditor__["b" /* SurveyQuestionEditor */ ](self.koEditItem().editColumn, null, "matrixdropdowncolumn@" + self.koEditItem().koCellType());
                            } else {
                                if (self.columnEditor)
                                    self.columnEditor.apply();
                                self.columnEditor = null;
                            }
                            self.koIsList(self.koEditItem() == null);
                        });
                        _this.onEditItemClick = function(item) {
                            self.koEditItem(item);
                        };
                        _this.onCancelEditItemClick = function() {
                            if (self.columnEditor && self.columnEditor.hasError())
                                return;
                            self.koEditItem(null);
                        };
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyDropdownColumnsEditor.prototype, "editorType", {
                        get: function() {
                            return "matrixdropdowncolumns";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyDropdownColumnsEditor.prototype.hasError = function() {
                        var result = this.columnEditor != null ? this.columnEditor.hasError() : false;
                        for (var i = 0; i < this.koItems().length; i++) {
                            result = result || this.koItems()[i].hasError();
                        }
                        return result;
                    };
                    SurveyPropertyDropdownColumnsEditor.prototype.onBeforeApply = function() {
                        if (this.columnEditor)
                            this.columnEditor.apply();
                        _super.prototype.onBeforeApply.call(this);
                    };
                    SurveyPropertyDropdownColumnsEditor.prototype.createNewEditorItem = function() {
                        return new SurveyPropertyMatrixDropdownColumnsItem(new __WEBPACK_IMPORTED_MODULE_6_survey_knockout__["MatrixDropdownColumn"]("", this.options));
                    };
                    SurveyPropertyDropdownColumnsEditor.prototype.createEditorItem = function(item) {
                        return new SurveyPropertyMatrixDropdownColumnsItem(item, this.options);
                    };
                    SurveyPropertyDropdownColumnsEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        var columItem = editorItem;
                        columItem.apply();
                        return columItem.column;
                    };
                    return SurveyPropertyDropdownColumnsEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */ ]));

                var SurveyPropertyMatrixDropdownColumnsItem = (function() {
                    function SurveyPropertyMatrixDropdownColumnsItem(column, options) {
                        if (options === void 0) {
                            options = null;
                        }
                        this.column = column;
                        this.options = options;
                        this.editColumn = new __WEBPACK_IMPORTED_MODULE_6_survey_knockout__["MatrixDropdownColumn"](column.name, column.title);
                        //TODO set directly
                        if (column["locOwner"])
                            this.editColumn["locOwner"] = column["locOwner"];
                        this.copyColumn(this.column, this.editColumn);
                        this.cellTypeChoices = this.getPropertyChoices("cellType");
                        this.koName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.name);
                        this.koCellType = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.cellType);
                        this.koTitle = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.name === column.title ? "" : column.title);
                        this.koIsRequired = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](this.column.isRequired);
                        this.koHasError = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
                        var self = this;
                        this.koCanEdit = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function() {
                            return self.koCellType() != "default";
                        });
                        this.koEditorName = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function() {
                            return __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */ ].getString("pe.columnEdit")["format"](self.koName());
                        });
                    }
                    SurveyPropertyMatrixDropdownColumnsItem.prototype.hasError = function() {
                        this.koHasError(!this.koName());
                        return this.koHasError();
                    };
                    SurveyPropertyMatrixDropdownColumnsItem.prototype.apply = function() {
                        this.copyColumn(this.editColumn, this.column);
                        this.column.name = this.koName();
                        this.column.title = this.koTitle();
                        this.column.cellType = this.koCellType();
                        this.column.isRequired = this.koIsRequired();
                    };
                    SurveyPropertyMatrixDropdownColumnsItem.prototype.copyColumn = function(src, dest) {
                        dest.hasOther = src.hasOther;
                        dest.choices = src.choices;
                        dest.colCount = src.colCount;
                        dest.optionsCaption = src.optionsCaption;
                        dest.choicesOrder = src.choicesOrder;
                        dest.inputType = src.inputType;
                        dest.placeHolder = src.placeHolder;
                        dest.choicesByUrl = src.choicesByUrl;
                    };
                    SurveyPropertyMatrixDropdownColumnsItem.prototype.getPropertyChoices = function(propetyName) {
                        var properties = __WEBPACK_IMPORTED_MODULE_6_survey_knockout__["JsonObject"].metaData.getProperties("matrixdropdowncolumn");
                        for (var i = 0; i < properties.length; i++) {
                            if (properties[i].name == propetyName)
                                return properties[i].choices;
                        }
                        return [];
                    };
                    return SurveyPropertyMatrixDropdownColumnsItem;
                }());

                __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("matrixdropdowncolumns", function() {
                    return new SurveyPropertyDropdownColumnsEditor();
                });


                /***/
            }),
            /* 30 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyModalEditor__ = __webpack_require__(8);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyResultfullEditor;
                });






                var SurveyPropertyResultfullEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyResultfullEditor, _super);

                    function SurveyPropertyResultfullEditor() {
                        var _this = _super.call(this) || this;
                        _this.koUrl = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        _this.koPath = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        _this.koValueName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        _this.koTitleName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        _this.createSurvey();
                        var self = _this;
                        _this.koUrl.subscribe(function(newValue) {
                            self.question.choicesByUrl.url = newValue;
                            self.run();
                        });
                        _this.koPath.subscribe(function(newValue) {
                            self.question.choicesByUrl.path = newValue;
                            self.run();
                        });
                        _this.koValueName.subscribe(function(newValue) {
                            self.question.choicesByUrl.valueName = newValue;
                            self.run();
                        });
                        _this.koTitleName.subscribe(function(newValue) {
                            self.question.choicesByUrl.titleName = newValue;
                            self.run();
                        });
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "editorType", {
                        get: function() {
                            return "restfull";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "restfullValue", {
                        get: function() {
                            return this.value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyResultfullEditor.prototype.getValueText = function(value) {
                        if (!value || !value.url)
                            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.empty");
                        var str = value.url;
                        if (str.length > 20) {
                            str = str.substr(0, 20) + "...";
                        }
                        return str;
                    };
                    SurveyPropertyResultfullEditor.prototype.onValueChanged = function() {
                        var val = this.restfullValue;
                        this.koUrl(val ? val.url : "");
                        this.koPath(val ? val.path : "");
                        this.koValueName(val ? val.valueName : "");
                        this.koTitleName(val ? val.titleName : "");
                    };
                    SurveyPropertyResultfullEditor.prototype.onBeforeApply = function() {
                        var val = new __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["ChoicesRestfull"]();
                        val.url = this.koUrl();
                        val.path = this.koPath();
                        val.valueName = this.koValueName();
                        val.titleName = this.koTitleName();
                        this.setValueCore(val);
                    };
                    SurveyPropertyResultfullEditor.prototype.run = function() {
                        this.question.choicesByUrl.run();
                    };
                    SurveyPropertyResultfullEditor.prototype.createSurvey = function() {
                        this.survey = new __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["Survey"]();
                        this.survey.showNavigationButtons = false;
                        this.survey.showQuestionNumbers = "off";
                        var page = this.survey.addNewPage("page1");
                        this.question = page.addNewQuestion("dropdown", "q1");
                        this.question.title = __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.testService");
                        this.question.choices = [];
                    };
                    return SurveyPropertyResultfullEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyModalEditor__["a" /* SurveyPropertyModalEditor */ ]));

                __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("restfull", function() {
                    return new SurveyPropertyResultfullEditor();
                });


                /***/
            }),
            /* 31 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__propertyItemsEditor__ = __webpack_require__(5);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__surveyHelper__ = __webpack_require__(6);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5__propertyValidatorsEditor__ = __webpack_require__(16);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_6_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_survey_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_7_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_7_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyTextItemsEditor;
                });








                var SurveyPropertyTextItemsEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyTextItemsEditor, _super);

                    function SurveyPropertyTextItemsEditor() {
                        return _super.call(this) || this;
                    }
                    Object.defineProperty(SurveyPropertyTextItemsEditor.prototype, "editorType", {
                        get: function() {
                            return "textitems";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyTextItemsEditor.prototype.createNewEditorItem = function() {
                        var objs = [];
                        var items = this.koItems();
                        for (var i = 0; i < items.length; i++) {
                            objs.push({
                                name: items[i].koName()
                            });
                        }
                        var editItem = {
                            koName: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](__WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */ ].getNewName(objs, "text")),
                            koTitle: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](),
                            koIsRequired: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](false)
                        };
                        this.createValidatorsEditor(editItem, []);
                        return editItem;
                    };
                    SurveyPropertyTextItemsEditor.prototype.createEditorItem = function(item) {
                        var editItem = {
                            koName: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](item.name),
                            koTitle: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](item.title),
                            koIsRequired: __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](item.isRequired)
                        };
                        this.createValidatorsEditor(editItem, item.validators);
                        return editItem;
                    };
                    SurveyPropertyTextItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        var itemText = new __WEBPACK_IMPORTED_MODULE_6_survey_knockout__["MultipleTextItem"](editorItem.koName(), editorItem.koTitle());
                        itemText.isRequired = editorItem.koIsRequired();
                        itemText.validators = editorItem.validators;
                        return itemText;
                    };
                    SurveyPropertyTextItemsEditor.prototype.createValidatorsEditor = function(item, validators) {
                        item.validators = validators.slice();
                        var self = this;
                        var onItemChanged = function(newValue) {
                            item.validators = newValue;
                            item.koText(self.getText(newValue.length));
                        };
                        var propertyEditor = new __WEBPACK_IMPORTED_MODULE_5__propertyValidatorsEditor__["a" /* SurveyPropertyValidatorsEditor */ ]();
                        item.editor = propertyEditor;
                        propertyEditor.onChanged = function(newValue) {
                            onItemChanged(newValue);
                        };
                        propertyEditor.object = item;
                        propertyEditor.title(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.editProperty")["format"]("Validators"));
                        propertyEditor.value = item.validators;
                        item.koText = __WEBPACK_IMPORTED_MODULE_7_knockout__["observable"](this.getText(validators.length));
                    };
                    SurveyPropertyTextItemsEditor.prototype.getText = function(length) {
                        return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.items")["format"](length);
                    };
                    return SurveyPropertyTextItemsEditor;
                }(__WEBPACK_IMPORTED_MODULE_1__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */ ]));

                __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("textitems", function() {
                    return new SurveyPropertyTextItemsEditor();
                });


                /***/
            }),
            /* 32 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__ = __webpack_require__(5);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(4);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(2);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout__ = __webpack_require__(1);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_5_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_survey_knockout__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyPropertyTriggersEditor;
                });
                /* unused harmony export SurveyPropertyTrigger */
                /* unused harmony export SurveyPropertyVisibleTrigger */
                /* unused harmony export SurveyPropertySetValueTrigger */
                /* unused harmony export SurveyPropertyTriggerObjects */






                var SurveyPropertyTriggersEditor = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyTriggersEditor, _super);

                    function SurveyPropertyTriggersEditor() {
                        var _this = _super.call(this) || this;
                        _this.availableTriggers = [];
                        _this.triggerClasses = [];
                        var self = _this;
                        _this.onDeleteClick = function() {
                            self.koItems.remove(self.koSelected());
                        };
                        _this.onAddClick = function(triggerType) {
                            self.addItem(triggerType);
                        };
                        _this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
                        _this.koPages = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
                        _this.koQuestions = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
                        _this.triggerClasses = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.getChildrenClasses("surveytrigger", true);
                        _this.availableTriggers = _this.getAvailableTriggers();
                        return _this;
                    }
                    Object.defineProperty(SurveyPropertyTriggersEditor.prototype, "editorType", {
                        get: function() {
                            return "triggers";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyPropertyTriggersEditor.prototype.onValueChanged = function() {
                        if (this.object) {
                            this.koPages(this.getNames(this.object.pages));
                            this.koQuestions(this.getNames(this.object.getAllQuestions()));
                        }
                        _super.prototype.onValueChanged.call(this);
                        if (this.koSelected) {
                            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
                        }
                    };
                    SurveyPropertyTriggersEditor.prototype.addItem = function(triggerType) {
                        var trigger = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.createClass(triggerType);
                        var triggerItem = this.createPropertyTrigger(trigger);
                        this.koItems.push(triggerItem);
                        this.koSelected(triggerItem);
                    };
                    SurveyPropertyTriggersEditor.prototype.createEditorItem = function(item) {
                        var jsonObj = new __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"]();
                        var trigger = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.createClass(item.getType());
                        jsonObj.toObject(item, trigger);
                        return this.createPropertyTrigger(trigger);
                    };
                    SurveyPropertyTriggersEditor.prototype.createItemFromEditorItem = function(editorItem) {
                        var editorTrigger = editorItem;
                        return editorTrigger.createTrigger();
                    };
                    SurveyPropertyTriggersEditor.prototype.getAvailableTriggers = function() {
                        var result = [];
                        for (var i = 0; i < this.triggerClasses.length; i++) {
                            result.push(this.triggerClasses[i].name);
                        }
                        return result;
                    };
                    SurveyPropertyTriggersEditor.prototype.getNames = function(items) {
                        var names = [];
                        for (var i = 0; i < items.length; i++) {
                            var item = items[i];
                            if (item["name"]) {
                                names.push(item["name"]);
                            }
                        }
                        return names;
                    };
                    SurveyPropertyTriggersEditor.prototype.createPropertyTrigger = function(trigger) {
                        var triggerItem = null;
                        if (trigger.getType() == "visibletrigger") {
                            triggerItem = new SurveyPropertyVisibleTrigger(trigger, this.koPages, this.koQuestions);
                        }
                        if (trigger.getType() == "setvaluetrigger") {
                            triggerItem = new SurveyPropertySetValueTrigger(trigger, this.koQuestions);
                        }
                        if (!triggerItem) {
                            triggerItem = new SurveyPropertyTrigger(trigger);
                        }
                        return triggerItem;
                    };
                    return SurveyPropertyTriggersEditor;
                }(__WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */ ]));

                var SurveyPropertyTrigger = (function() {
                    function SurveyPropertyTrigger(trigger) {
                        this.trigger = trigger;
                        this.operators = ["empty", "notempty", "equal", "notequal", "contains", "notcontains", "greater", "less", "greaterorequal", "lessorequal"];
                        this.availableOperators = [];
                        this.createOperators();
                        this.triggerType = trigger.getType();
                        this.koType = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](this.triggerType);
                        this.koName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.name);
                        this.koOperator = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.operator);
                        this.koValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.value);
                        var self = this;
                        this.koRequireValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function() {
                            return self.koOperator() != "empty" && self.koOperator() != "notempty";
                        });
                        this.koIsValid = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function() {
                            if (self.koName() && (!self.koRequireValue() || self.koValue()))
                                return true;
                            return false;
                        });
                        this.koText = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function() {
                            self.koName();
                            self.koOperator();
                            self.koValue();
                            return self.getText();
                        });
                    }
                    SurveyPropertyTrigger.prototype.createTrigger = function() {
                        var trigger = __WEBPACK_IMPORTED_MODULE_5_survey_knockout__["JsonObject"].metaData.createClass(this.triggerType);
                        trigger.name = this.koName();
                        trigger.operator = this.koOperator();
                        trigger.value = this.koValue();
                        return trigger;
                    };
                    SurveyPropertyTrigger.prototype.createOperators = function() {
                        for (var i = 0; i < this.operators.length; i++) {
                            var name = this.operators[i];
                            this.availableOperators.push({
                                name: name,
                                text: __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("op." + name)
                            });
                        }
                    };
                    SurveyPropertyTrigger.prototype.getText = function() {
                        if (!this.koIsValid())
                            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.triggerNotSet");
                        return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.triggerRunIf") + " '" + this.koName() + "' " + this.getOperatorText() + this.getValueText();
                    };
                    SurveyPropertyTrigger.prototype.getOperatorText = function() {
                        var op = this.koOperator();
                        for (var i = 0; i < this.availableOperators.length; i++) {
                            if (this.availableOperators[i].name == op)
                                return this.availableOperators[i].text;
                        }
                        return op;
                    };
                    SurveyPropertyTrigger.prototype.getValueText = function() {
                        if (!this.koRequireValue())
                            return "";
                        return " " + this.koValue();
                    };
                    return SurveyPropertyTrigger;
                }());

                var SurveyPropertyVisibleTrigger = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertyVisibleTrigger, _super);

                    function SurveyPropertyVisibleTrigger(trigger, koPages, koQuestions) {
                        var _this = _super.call(this, trigger) || this;
                        _this.trigger = trigger;
                        _this.pages = new SurveyPropertyTriggerObjects(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.triggerMakePagesVisible"), koPages(), trigger.pages);
                        _this.questions = new SurveyPropertyTriggerObjects(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */ ].getString("pe.triggerMakeQuestionsVisible"), koQuestions(), trigger.questions);
                        return _this;
                    }
                    SurveyPropertyVisibleTrigger.prototype.createTrigger = function() {
                        var trigger = _super.prototype.createTrigger.call(this);
                        trigger.pages = this.pages.koChoosen();
                        trigger.questions = this.questions.koChoosen();
                        return trigger;
                    };
                    return SurveyPropertyVisibleTrigger;
                }(SurveyPropertyTrigger));

                var SurveyPropertySetValueTrigger = (function(_super) {
                    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */ ](SurveyPropertySetValueTrigger, _super);

                    function SurveyPropertySetValueTrigger(trigger, koQuestions) {
                        var _this = _super.call(this, trigger) || this;
                        _this.trigger = trigger;
                        _this.koQuestions = koQuestions;
                        _this.kosetToName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.setToName);
                        _this.kosetValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.setValue);
                        _this.koisVariable = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.isVariable);
                        return _this;
                    }
                    SurveyPropertySetValueTrigger.prototype.createTrigger = function() {
                        var trigger = _super.prototype.createTrigger.call(this);
                        trigger.setToName = this.kosetToName();
                        trigger.setValue = this.kosetValue();
                        trigger.isVariable = this.koisVariable();
                        return trigger;
                    };
                    return SurveyPropertySetValueTrigger;
                }(SurveyPropertyTrigger));

                var SurveyPropertyTriggerObjects = (function() {
                    function SurveyPropertyTriggerObjects(title, allObjects, choosenObjects) {
                        this.title = title;
                        this.koChoosen = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](choosenObjects);
                        var array = [];
                        for (var i = 0; i < allObjects.length; i++) {
                            var item = allObjects[i];
                            if (choosenObjects.indexOf(item) < 0) {
                                array.push(item);
                            }
                        }
                        this.koObjects = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](array);
                        this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        this.koChoosenSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
                        var self = this;
                        this.onDeleteClick = function() {
                            self.deleteItem();
                        };
                        this.onAddClick = function() {
                            self.addItem();
                        };
                    }
                    SurveyPropertyTriggerObjects.prototype.deleteItem = function() {
                        this.changeItems(this.koChoosenSelected(), this.koChoosen, this.koObjects);
                    };
                    SurveyPropertyTriggerObjects.prototype.addItem = function() {
                        this.changeItems(this.koSelected(), this.koObjects, this.koChoosen);
                    };
                    SurveyPropertyTriggerObjects.prototype.changeItems = function(item, removedFrom, addTo) {
                        removedFrom.remove(item);
                        addTo.push(item);
                        removedFrom.sort();
                        addTo.sort();
                    };
                    return SurveyPropertyTriggerObjects;
                }());

                __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */ ].registerEditor("triggers", function() {
                    return new SurveyPropertyTriggersEditor();
                });


                /***/
            }),
            /* 33 */
            /***/
            (function(module, exports) {

                var g;

                // This works in non-strict mode
                g = (function() {
                    return this;
                })();

                try {
                    // This works if eval is allowed (see CSP)
                    g = g || Function("return this")() || (1, eval)("this");
                } catch (e) {
                    // This works if the window reference is available
                    if (typeof window === "object")
                        g = window;
                }

                // g can still be undefined, but nothing to do about it...
                // We return undefined, instead of nothing here, so it's
                // easier to handle this case. if(!global) { ...}

                module.exports = g;


                /***/
            }),
            /* 34 */
            /***/
            (function(module, exports) {

                module.exports = __WEBPACK_EXTERNAL_MODULE_34__;

                /***/
            }),
            /* 35 */
            /***/
            (function(module, exports) {

                module.exports = "<div class=\"svd_container\">\r\n    <ul class=\"navbar-default container-fluid nav nav-tabs svd_menu\">\r\n        <li data-bind=\"css: {active: koViewType() == 'designer'}\"><a href=\"#\" data-bind=\"click:selectDesignerClick, text: $root.getLocString('ed.designer')\"></a></li>\r\n        <li data-bind=\"visible: showJSONEditorTab, css: {active: koViewType() == 'editor'}\"><a href=\"#\" data-bind=\"click:selectEditorClick, text: $root.getLocString('ed.jsonEditor')\"></a></li>\r\n        <li data-bind=\"visible: showTestSurveyTab, css: {active: koViewType() == 'test'}\"><a href=\"#\" data-bind=\"click:selectTestClick, text: $root.getLocString('ed.testSurvey')\"></a></li>\r\n        <li data-bind=\"visible: showEmbededSurveyTab, css: {active: koViewType() == 'embed'}\"><a href=\"#\" data-bind=\"click:selectEmbedClick, text: $root.getLocString('ed.embedSurvey')\"></a></li>\r\n\r\n        <li class=\"svd_actions\" data-bind=\"visible: koIsShowDesigner\">\r\n            <button type=\"button\" class=\"btn btn-primary\" data-bind=\"enable:undoRedo.koCanUndo, click: doUndoClick\"><span data-bind=\"text: $root.getLocString('ed.undo')\"></span></button>\r\n        </li>\r\n        <li class=\"svd_actions\" data-bind=\"visible: koIsShowDesigner\">\r\n            <button type=\"button\" class=\"btn btn-primary\" data-bind=\"enable:undoRedo.koCanRedo, click: doRedoClick\"><span data-bind=\"text: $root.getLocString('ed.redo')\"></span></button>\r\n        </li>\r\n        <li class=\"svd_actions\" data-bind=\"visible: (koIsShowDesigner() && koShowOptions())\">\r\n            <div class=\"btn-group inline\">\r\n                <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" data-bind=\"text: $root.getLocString('ed.options')\">\r\n                    Options \r\n                    <span class=\"caret\"></span>\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li data-bind=\"css: {active: koGenerateValidJSON}\"><a href=\"#\" data-bind=\"click:generateValidJSONClick, text: $root.getLocString('ed.generateValidJSON')\"></a></li>\r\n                    <li data-bind=\"css: {active: !koGenerateValidJSON()}\"><a href=\"#\" data-bind=\"click:generateReadableJSONClick, text: $root.getLocString('ed.generateReadableJSON')\"></a></li>\r\n                </ul>\r\n            </div>\r\n        </li>\r\n<li class=\"svd_actions\"><button type=\"button\" data-bind=\"click:saveEditorClick, text: $root.getLocString('ed.saveEditor')\" id=\"btnSaveEditor\" class=\"btn btn-primary\"><span></span></button></li> <li class=\"svd_actions\"><button id=\"btnSaveEditSurvey\" type=\"button\" data-bind=\"click:saveEditSurveyClick, text: $root.getLocString('ed.saveEditSurvey')\" class=\"btn btn-success hidden\"><span></span></button></li>        <li class=\"svd_actions\" data-bind=\"visible: koViewType() == 'test'\">\r\n            <div class=\"btn-group inline\">\r\n                <button type=\"button\" id=\"surveyTestWidth\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    <span data-bind=\"text: $root.getLocString('ed.testSurveyWidth') + ' ' + $root.koTestSurveyWidth()\"></span>\r\n                    <span class=\"caret\"></span>\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"surveyTestWidth\">\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '100%')\">100%</a></li>\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '1200px')\">1200px</a></li>\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '1000px')\">1000px</a></li>\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '800px')\">800px</a></li>\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '600px')\">600px</a></li>\r\n                    <li><a href=\"#\" data-bind=\"click: koTestSurveyWidth.bind($data, '400px')\">400px</a></li>\r\n                </ul>\r\n            </div>\r\n        </li>\r\n        <li class=\"svd_actions\">\r\n            <button type=\"button\" class=\"btn btn-primary svd_save_btn\" data-bind=\"click: saveButtonClick, visible: koShowSaveButton\"><span data-bind=\"text: $root.getLocString('ed.saveSurvey')\"></span></button>\r\n        </li>\r\n    </ul>\r\n\r\n    <div class=\"panel svd_content\">\r\n        <div class=\"row svd_survey_designer\"  data-bind=\"visible: koViewType() == 'designer'\">\r\n            <div class=\"col-lg-2 col-md-2 col-sm-1 col-xs-1 panel panel-default svd_toolbox\">\r\n                <div class=\"btn-group-vertical\" style=\"width:100%;padding-right:2px\">\r\n                    <!-- ko foreach: toolbox.koItems -->\r\n                    <div class=\"btn btn-default\" style=\"text-align:left; margin:1px;min-height:37px; width:100%\" draggable=\"true\" data-bind=\"click: $root.clickToolboxItem, event:{dragstart: function(el, e) { $root.draggingToolboxItem($data, e); return true;}, dragend: function(el, e) { $root.dragEnd(); }}\">\r\n                        <span data-bind=\"css: iconName, attr: {title: title}\"></span>\r\n                        <span class=\"svd_toolbox_item_text hidden-sm hidden-xs\" data-bind=\"text:title\"></span>\r\n                    </div>\r\n                    <!-- /ko  -->\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-7 col-md-7 col-sm-8 col-xs-11 svd_editors\">\r\n                <div class=\"svd_pages_editor\" data-bind=\"template: { name: 'pageeditor', data: pagesEditor }\"></div>\r\n                <div class=\"svd_questions_editor\" id=\"scrollableDiv\" data-bind=\"style: {height: koDesignerHeight}\">\r\n                    <div id=\"surveyjs\"></div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-3 col-md-3 col-sm-3 hidden-xs panel panel-default svd_properties\">\r\n                <div class=\"panel-heading input-group\">\r\n                    <div class=\"custom-select\">\r\n                        <select id=\"objectSelector\" class=\"form-control\" data-bind=\"options: koObjects, optionsText: 'text', value: koSelectedObject\"></select>\r\n                    </div>\r\n                    <div class=\"input-group-btn\">\r\n                        <button class=\"btn btn-default\" type=\"button\" data-bind=\"enable: koCanDeleteObject, click: deleteCurrentObject, attr: { title: $root.getLocString('ed.delSelObject')}\"><span class=\"glyphicon glyphicon-remove\"></span></button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"svd_object_editor\" data-bind=\"style: {height: koDesignerHeight}\">\r\n                    <div data-bind=\"template: { name: 'objecteditor', data: selectedObjectEditor }\"></div>\r\n                </div>\r\n                <div class=\"panel-footer\" data-bind=\"visible:surveyVerbs.koHasVerbs\">\r\n                    <div data-bind=\"template: { name: 'objectverbs', data: surveyVerbs }\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div data-bind=\"visible: koViewType() == 'editor'\">\r\n            <div data-bind=\"template: { name: 'jsoneditor', data: jsonEditor }\"></div>\r\n        </div>\r\n\r\n        <div id=\"surveyjsTest\" data-bind=\"visible: koViewType() == 'test', style: {width: koTestSurveyWidth}\">\r\n            <div id=\"surveyjsExample\"></div>\r\n            <div id=\"surveyjsExampleResults\"></div>\r\n            <button id=\"surveyjsExamplereRun\" data-bind=\"click:selectTestClick, text: $root.getLocString('ed.testSurveyAgain')\" style=\"display:none\">Test Again</button>\r\n        </div>\r\n\r\n        <div id=\"surveyjsEmbed\" data-bind=\"visible: koViewType() == 'embed'\">\r\n            <div data-bind=\"template: { name: 'surveyembeding', data: surveyEmbeding }\"></div>\r\n        </div>\r\n    </div>\r\n    <div data-bind=\"template: { name: 'questioneditor', data: questionEditorWindow }\"></div>\r\n</div>";

                /***/
            }),
            /* 36 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"jsoneditor\">\r\n    <div data-bind=\"visible: !hasAceEditor\">\r\n        <textarea class=\"svd_json_editor_area\" data-bind=\"textInput:koText\"></textarea>\r\n        <!-- ko foreach: koErrors -->\r\n        <div>\r\n            <span>Error: </span><span data-bind=\"text: text\"></span>\r\n        </div>\r\n        <!-- /ko  -->\r\n    </div>\r\n    <div id=\"surveyjsJSONEditor\" class=\"svd_json_editor\"></div>\r\n</script>";

                /***/
            }),
            /* 37 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"objecteditor\">\r\n    <table class=\"table svd_table-nowrap\">\r\n        <tbody data-bind=\"foreach: koProperties\">\r\n            <tr data-bind=\"click: $parent.changeActiveProperty($data), css: {'active': $parent.koActiveProperty() == $data}\">\r\n                <td data-bind=\"text: displayName, attr: {title: title}\" width=\"50%\"></td>\r\n                <td width=\"50%\">\r\n                    <span data-bind=\"text: koText, visible: $parent.koActiveProperty() != $data || disabled, attr: {title: koText}\" style=\"text-overflow:ellipsis;white-space:nowrap;overflow:hidden\"></span>\r\n                    <div data-bind=\"visible: $parent.koActiveProperty() == $data && !disabled\">\r\n                        <!-- ko template: { name: 'propertyeditor-' + editorType, data: $data } -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</script>";

                /***/
            }),
            /* 38 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"objectverbs\">\r\n    <!-- ko foreach: koVerbs -->\r\n        <div class=\"row\">\r\n            <div class=\"input-group\">\r\n                <span  class=\"input-group-addon\" data-bind=\"text:text\"></span>\r\n                <select class=\"form-control\" data-bind=\"options: koItems, optionsText: 'text', optionsValue:'value', value: koSelectedItem\"></select>\r\n            </div>\r\n        </div>\r\n    <!-- /ko  -->\r\n</script>";

                /***/
            }),
            /* 39 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"pageeditor\">\r\n    <ul class=\"nav nav-tabs\" data-bind=\"tabs:true\">\r\n        <!-- ko foreach: koPages -->\r\n        <li data-bind=\"css: {active: koSelected()},event:{\r\n           keydown:function(el, e){ $parent.keyDown(el, e); },\r\n           dragstart:function(el, e){ $parent.dragStart(el); return true; },\r\n           dragover:function(el, e){ $parent.dragOver(el);},\r\n           dragend:function(el, e){ $parent.dragEnd();},\r\n           drop:function(el, e){ $parent.dragDrop(el);}\r\n         }\"> \r\n            <a class=\"svd_page_nav\" href=\"#\" data-bind=\"click:$parent.selectPageClick\">\r\n                <span data-bind=\"text: title\"></span>\r\n            </a>\r\n        </li>\r\n        <!-- /ko  -->\r\n        <li><button class=\"btn btn-default svd_add_new_page_btn\" data-bind=\"click:addNewPageClick, attr: {title:  $root.getLocString('ed.addNewPage')}\" ><span class=\"glyphicon glyphicon-plus\"></span></button></li>\r\n    </ul>\r\n</script>";

                /***/
            }),
            /* 40 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-boolean\">\r\n    <input class=\"form-control\" type=\"checkbox\" data-bind=\"checked: koValue\" />\r\n</script>";

                /***/
            }),
            /* 41 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-dropdown\">\r\n    <div class=\"custom-select\">\r\n        <select class=\"form-control\" data-bind=\"value: koValue, options: choices\"  style=\"width:100%\"></select>\r\n    </div>\r\n</script>";

                /***/
            }),
            /* 42 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-expression\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"propertyeditorcontent-expression\">\r\n    <div>\r\n        <textarea class=\"form-control\" data-bind=\"value:koValue\" style=\"width:100%\" rows=\"8\" autofocus=\"autofocus\"></textarea>\r\n        <span data-bind=\"text:$root.getLocString('pe.expressionHelp')\" style=\"white-space:normal\"></span>\r\n    </div>\r\n</script>\r\n";

                /***/
            }),
            /* 43 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-html\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"propertyeditorcontent-html\">\r\n    <textarea class=\"form-control\" data-bind=\"value:koValue\" style=\"width:100%\" rows=\"10\" autofocus=\"autofocus\"></textarea>\r\n</script>\r\n";

                /***/
            }),
            /* 44 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-itemvalues\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" class=\"btn-xs\" id=\"propertyeditorcontent-itemvalues\">\r\n    <div style=\"margin-bottom:3px\">\r\n        <button class=\"btn-xs\" data-bind=\"css: {'btn btn-primary':koActiveView() == 'form', 'btn-link':koActiveView() != 'form'}, click:changeToFormViewClick, text: $root.getLocString('pe.formEntry')\"></button>\r\n        <button class=\"btn-xs\" data-bind=\"css: {'btn btn-primary':koActiveView() != 'form', 'btn-link':koActiveView() == 'form'}, click:changeToTextViewClick, text: $root.getLocString('pe.fastEntry')\"></button>\r\n    </div>\r\n    <div data-bind=\"visible:koActiveView() == 'form'\" style=\"overflow-y: auto; overflow-x:hidden; max-height:400px;min-height:200px\">\r\n        <table class=\"table\" >\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th data-bind=\"text: $root.getLocString('pe.value')\"></th>\r\n                    <th data-bind=\"text: $root.getLocString('pe.text')\"></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <!-- ko foreach: koItems -->\r\n                <tr>\r\n                    <td>\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <button type=\"button\" class=\"btn btn-xs\" data-bind=\"visible: $index() > 0, click: $parent.onMoveUpClick\"><span class=\"glyphicon glyphicon-arrow-up\" aria-hidden=\"true\"></span></button>\r\n                            <button type=\"button\" class=\"btn btn-xs\" style=\"float:none\" data-bind=\"visible: $index() < $parent.koItems().length - 1, click: $parent.onMoveDownClick\"><span class=\"glyphicon glyphicon-arrow-down\" aria-hidden=\"true\"></span></button>\r\n                        </div>\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" class=\"form-control\" data-bind=\"value:koValue\" style=\"width:200px\" />\r\n                        <div class=\"alert alert-danger no-padding\" role=\"alert\" data-bind=\"visible:koHasError, text: $root.getLocString('pe.enterNewValue')\"></div>\r\n                    </td>\r\n                    <td><input type=\"text\" class=\"form-control\" data-bind=\"value:koText\" style=\"width:200px\" /></td>\r\n                    <td><button type=\"button\" class=\"btn btn-xs\" data-bind=\"click: $parent.onDeleteClick\"><span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></button></td>\r\n                </tr>\r\n                <!-- /ko -->\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"row btn-toolbar\" data-bind=\"visible:koActiveView() == 'form'\">\r\n        <input type=\"button\" class=\"btn btn-success\" data-bind=\"click: onAddClick, value: $root.getLocString('pe.addNew')\" />\r\n        <input type=\"button\" class=\"btn btn-danger\" data-bind=\"click: onClearClick, value: $root.getLocString('pe.removeAll')\" />\r\n    </div>\r\n    <div data-bind=\"visible:koActiveView() != 'form'\">\r\n        <textarea class=\"form-control\" data-bind=\"textInput: koItemsText\" style=\"overflow-y: auto; overflow-x:hidden; max-height:400px; min-height:250px; width:100%\"></textarea>\r\n    </div>\r\n</script>\r\n";

                /***/
            }),
            /* 45 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-matrixdropdowncolumns\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" id=\"propertyeditorcontent-matrixdropdowncolumns\">\r\n    <table class=\"table\" data-bind=\"visible: koIsList\">\r\n        <thead>\r\n            <tr>\r\n                <th data-bind=\"text: $root.getLocString('pe.required')\"></th>\r\n                <th data-bind=\"text: $root.getLocString('pe.cellType')\"></th>\r\n                <th data-bind=\"text: $root.getLocString('pe.name')\"></th>\r\n                <th data-bind=\"text: $root.getLocString('pe.title')\"></th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <!-- ko foreach: koItems -->\r\n            <tr>\r\n                <td>\r\n                    <input type=\"checkbox\" data-bind=\"checked: koIsRequired\" />\r\n                    <button type=\"button\" class=\"btn\" data-bind=\"visible: koCanEdit, click: $parent.onEditItemClick\">\r\n                        <span class=\"glyphicon glyphicon-edit\"></span>\r\n                    </button>\r\n                </td>\r\n                <td>\r\n                    <select class=\"form-control\" data-bind=\"options: cellTypeChoices, value: koCellType\"  style=\"width:110px\"></select>\r\n                </td>\r\n                <td>\r\n                    <input type=\"text\" class=\"form-control\" data-bind=\"value:koName\" style=\"width:100px\" />\r\n                    <div class=\"alert alert-danger no-padding\" role=\"alert\" data-bind=\"visible:koHasError, text: $root.getLocString('pe.enterNewValue')\"></div>\r\n                </td>\r\n                <td><input type=\"text\" class=\"form-control\" data-bind=\"value:koTitle\" style=\"width:120px\" /></td>\r\n                <td><button type=\"button\" class=\"btn\" data-bind=\"click: $parent.onDeleteClick\"><span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></button></td>\r\n            </tr>\r\n            <!-- /ko -->\r\n            <tr>\r\n                <td colspan=\"3\">\r\n                    <div class=\"row btn-toolbar\">\r\n                        <input type=\"button\" class=\"btn btn-success\" data-bind=\"click: onAddClick, value: $root.getLocString('pe.addNew')\"/>\r\n                        <input type=\"button\" class=\"btn btn-danger\" data-bind=\"click: onClearClick, value: $root.getLocString('pe.removeAll')\"\" />\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n     <!-- ko if: !koIsList() -->\r\n        <div style=\"padding: 5px\">\r\n            <button type=\"button\" class=\"btn\" data-bind=\"click: onCancelEditItemClick\">\r\n                <span class=\"glyphicon glyphicon-list-alt\"></span>\r\n            </button>\r\n            <span data-bind=\"text: koEditItem().koEditorName\"></span>\r\n        </div>\r\n        <!-- ko template: { name: \"questioneditor-content\", data: columnEditor } -->\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n";

                /***/
            }),
            /* 46 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-modal\">\r\n    <div class=\"input-group\" data-bind=\"visible:!editor.isEditable\">\r\n        <a data-toggle=\"modal\" data-bind=\"attr: {'data-target' : modalNameTarget}\"><span data-bind=\"text: koText\"></span></a>\r\n        <div class=\"input-group-btn\">\r\n            <button class=\"btn btn-default\" data-toggle=\"modal\" style=\"padding: 2px;\" data-bind=\"attr: {'data-target' : modalNameTarget}\">\r\n                <span class=\"glyphicon glyphicon-edit\" aria-hidden=\"true\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group\" data-bind=\"visible:editor.isEditable\" style=\"display:table\">\r\n        <input class=\"form-control\" type=\"text\" data-bind=\"value: koValue\" style=\"display:table-cell; width:100%\" />\r\n        <div class=\"input-group-btn\">\r\n            <button type=\"button\" class=\"btn btn-default\" style=\"display:table-cell; padding: 2px;\"  data-toggle=\"modal\" data-bind=\"attr: {'data-target' : modalNameTarget}\">\r\n                <span class=\"glyphicon glyphicon-edit\" aria-hidden=\"true\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div data-bind=\"attr: {id : modalName}\" class=\"modal fade\" role=\"dialog\">\r\n        <div class=\"modal-dialog\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    <h4 class=\"modal-title\" data-bind=\"text:editor.title\"></h4>\r\n                </div>  \r\n                <div class=\"modal-body svd_notopbottompaddings\">\r\n                    <!-- ko template: { name: 'propertyeditorcontent-' + editorType, data: editor } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"click: editor.onApplyClick, value: $root.getLocString('pe.apply')\" style=\"width:100px\" />\r\n                    <input type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" data-bind=\"click: editor.onApplyClick, value: $root.getLocString('pe.ok')\" style=\"width:100px\" />\r\n                    <input type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" data-bind=\"click: editor.onResetClick, value: $root.getLocString('pe.cancel')\" style=\"width:100px\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n";

                /***/
            }),
            /* 47 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-number\">\r\n    <input class=\"form-control\" type=\"number\" data-bind=\"value: koValue\" style=\"width:100%\" />\r\n</script>";

                /***/
            }),
            /* 48 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-restfull\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"propertyeditorcontent-restfull\">\r\n    <form>\r\n        <div class=\"form-group\">\r\n            <label for=\"url\">Url:</label>\r\n            <input id=\"url\" type=\"text\" data-bind=\"value:koUrl\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"path\">Path:</label>\r\n            <input id=\"path\" type=\"text\" data-bind=\"value:koPath\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"valueName\">valueName:</label>\r\n            <input id=\"valueName\" type=\"text\" data-bind=\"value:koValueName\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"titleName\">titleName:</label>\r\n            <input id=\"titleName\" type=\"text\" data-bind=\"value:koTitleName\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"titleName\"><span data-bind=\"text:$root.getLocString('pe.testService')\"></span></label>\r\n            <select class=\"form-control\" data-bind=\"options: question.koVisibleChoices, optionsText: 'text', optionsValue: 'value', optionsCaption: question.optionsCaption\"></select>\r\n        </div>\r\n    </form>\r\n</script>\r\n";

                /***/
            }),
            /* 49 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-string\">\r\n    <input class=\"form-control\" type=\"text\" data-bind=\"value: koValue\" style=\"width:100%\" />\r\n</script>";

                /***/
            }),
            /* 50 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-text\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"propertyeditorcontent-text\">\r\n    <textarea class=\"form-control\" data-bind=\"value:koValue\" style=\"width:100%\" rows=\"10\" autofocus=\"autofocus\"></textarea>\r\n</script>\r\n";

                /***/
            }),
            /* 51 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-textitems\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" id=\"propertyeditorcontent-textitems\">\r\n<div class=\"panel\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th data-bind=\"text: $root.getLocString('pe.isRequired')\"></th>\r\n                <th data-bind=\"text: $root.getLocString('pe.name')\"></th>\r\n                <th data-bind=\"text: $root.getLocString('pe.title')\"></th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <!-- ko foreach: koItems -->\r\n            <tr>\r\n                <td><input type=\"checkbox\" data-bind=\"checked: koIsRequired\" /></td>\r\n                <td><input type=\"text\" class=\"form-control\" data-bind=\"value:koName\" style=\"width:180px\" /></td>\r\n                <td><input type=\"text\" class=\"form-control\" data-bind=\"value:koTitle\" style=\"width:180px\" /></td>\r\n                <td><button type=\"button\" class=\"btn\" data-bind=\"click: $parent.onDeleteClick\"><span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></button></td>\r\n            </tr>\r\n            <!-- /ko -->\r\n            <tr>\r\n                <td colspan=\"4\"><input type=\"button\" class=\"btn btn-success\" data-bind=\"click: onAddClick, value: $root.getLocString('pe.addNew')\"/></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n</script>";

                /***/
            }),
            /* 52 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-triggers\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" id=\"propertyeditorcontent-triggers\">\r\n<div class=\"panel\">\r\n    <div class=\"row\" style=\"margin-bottom:10px\">\r\n        <div class=\"col-lg-12\">\r\n            <div class=\"input-group form-inline\">\r\n                <div class=\"input-group-btn\">\r\n                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span class=\"glyphicon glyphicon-plus\"></span>\r\n                    </button>\r\n                    <ul class=\"dropdown-menu\">\r\n                        <!-- ko foreach: availableTriggers -->\r\n                        <li><a data-bind=\"click: $parent.onAddClick($data)\"><span data-bind=\"text:$data\"></span></a></li>\r\n                        <!-- /ko  -->\r\n                    </ul>\r\n                </div>\r\n                <select class=\"form-control\" data-bind=\"options: koItems, optionsText: 'koText', value: koSelected\"></select>\r\n                <span class=\"input-group-btn\">\r\n                    <button type=\"button\" data-bind=\"enable: koSelected() != null, click: onDeleteClick\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-remove\"></span></button>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div data-bind=\"visible: koSelected() == null\">\r\n        <div data-bind=\"visible: koQuestions().length == 0, text: $root.getLocString('pe.noquestions')\"></div>\r\n        <div data-bind=\"visible: koQuestions().length > 0, text: $root.getLocString('pe.createtrigger')\"></div>\r\n    </div>\r\n    <div data-bind=\"visible: koSelected() != null\">\r\n        <div data-bind=\"with: koSelected\">\r\n            <div class=\"row\"  style=\"margin-bottom:10px\">\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group  form-inline\">\r\n                        <div class=\"form-group\">\r\n                            <span class=\"input-group\" data-bind=\"text: $root.getLocString('pe.triggerOn')\"></span>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <select class=\"form-control\" data-bind=\"options:$parent.koQuestions, value: koName\"></select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group\">\r\n                        <select class=\"form-control\" data-bind=\"options:availableOperators, optionsValue: 'name', optionsText: 'text', value:koOperator\"></select>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group\">\r\n                        <input class=\"form-control\" type=\"text\" data-bind=\"visible: koRequireValue, value:koValue\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- ko if: koType() == 'visibletrigger' -->\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-6 col-sm-6\">\r\n                    <!-- ko template: { name: 'propertyeditor-triggersitems', data: pages } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n                <div class=\"col-lg-6 col-sm-6\">\r\n                    <!-- ko template: { name: 'propertyeditor-triggersitems', data: questions } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: koType() == 'completetrigger' -->\r\n            <div class=\"row\">\r\n               <div style=\"margin: 10px\" data-bind=\"text: $root.getLocString('pe.triggerCompleteText')\"></div>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: koType() == 'setvaluetrigger' -->\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group form-inline\">\r\n                        <div>\r\n                            <span data-bind=\"text: $root.getLocString('pe.triggerSetToName')\"></span>\r\n                        </div>\r\n                        <input class=\"form-control\" type=\"text\" data-bind=\"value:kosetToName\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group form-inline\">\r\n                        <div>\r\n                            <span data-bind=\"text: $root.getLocString('pe.triggerSetValue')\"></span>\r\n                        </div>\r\n                        <input class=\"form-control\" type=\"text\" data-bind=\"value:kosetValue\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-4 col-sm-4\">\r\n                    <div class=\"input-group\">\r\n                        <input type=\"checkbox\" data-bind=\"checked: koisVariable\" /> <span data-bind=\"text: $root.getLocString('pe.triggerIsVariable')\"></span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-8 col-sm-8\">\r\n                </div>\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n</div>\r\n</script>";

                /***/
            }),
            /* 53 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-triggersitems\">\r\n    <div class=\"panel no-margins no-padding\">\r\n        <div data-bind=\"text: title\" style=\"margin-bottom:10px\"></div>\r\n        <div class=\"input-group\">\r\n            <select class=\"form-control\" multiple=\"multiple\" data-bind=\"options:koChoosen, value: koChoosenSelected\"></select>\r\n            <span class=\"input-group-btn\" style=\"vertical-align:top\">\r\n                <button type=\"button\" data-bind=\"enable: koChoosenSelected() != null, click: onDeleteClick\" class=\"btn\"><span class=\"glyphicon glyphicon-remove\"></span></button>\r\n            </span>\r\n        </div>\r\n        <div class=\"input-group\" style=\"margin-top:5px\">\r\n            <select class=\"form-control\" data-bind=\"options:koObjects, value: koSelected\"></select>\r\n            <span class=\"input-group-btn\">\r\n                <button type=\"button\" class=\"btn btn-default\" data-bind=\"enable: koSelected() != null, click: onAddClick\" class=\"btn btn-success\"><span class=\"glyphicon glyphicon-plus\"></span></button>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</script>";

                /***/
            }),
            /* 54 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"propertyeditor-validators\">\r\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" id=\"propertyeditorcontent-validators\">\r\n<div class=\"panel\">\r\n    <div class=\"panel-heading\">\r\n        <div class=\"row input-group\">\r\n            <button type=\"button\" class=\"dropdown-toggle input-group-addon\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <span class=\"glyphicon glyphicon-plus\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu input-group\">\r\n                <!-- ko foreach: availableValidators -->\r\n                <li><a href=\"#\" data-bind=\"click: $parent.onAddClick($data)\"><span data-bind=\"text:$data\"></span></a></li>\r\n                <!-- /ko  -->\r\n            </ul>\r\n            <select class=\"form-control\" data-bind=\"options: koItems, optionsText: 'text', value: koSelected\"></select>\r\n            <span class=\"input-group-btn\">\r\n                <button type=\"button\" data-bind=\"enable: koSelected() != null, click: onDeleteClick\" class=\"btn\"><span class=\"glyphicon glyphicon-remove\"></span></button>\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div data-bind=\"template: { name: 'objecteditor', data: selectedObjectEditor }\"></div>\r\n</div>\r\n</script>";

                /***/
            }),
            /* 55 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"questioneditor-content\">\r\n    <ul class=\"nav nav-tabs\" data-bind=\"foreach: koTabs\">\r\n        <li role=\"presentation\" data-bind=\"css: {active: $parent.koActiveTab() == $data.name}, click: $parent.onTabClick\"><a><span data-bind=\"text:$data.title\"></span></a></li>\r\n    </ul>               \r\n    <!-- ko foreach: koTabs -->\r\n    <div data-bind=\"visible:$parent.koActiveTab() == $data.name\" style=\"margin-top:5px\">\r\n        <!-- ko template: { name: $data.htmlTemplate, data: $data.templateObject } -->\r\n        <!-- /ko -->\r\n    </div>\r\n    <!-- /ko  -->\r\n</script>";

                /***/
            }),
            /* 56 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"questioneditor\">\r\n    <div id=\"surveyquestioneditorwindow\" class=\"modal fade\" role=\"dialog\"data-bind=\"with:koEditor\">\r\n        <div class=\"modal-dialog\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    <h4 class=\"modal-title\" data-bind=\"text:koTitle\"></h4>\r\n                </div>  \r\n                <div class=\"modal-body svd_notopbottompaddings\">\r\n                    <!-- ko template: { name: \"questioneditor-content\", data: $data } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"click: onApplyClick, value: $root.getLocString('pe.apply')\" style=\"width:100px\" />\r\n                    <input type=\"button\" class=\"btn btn-default\" data-bind=\"click: onOkClick, value: $root.getLocString('pe.ok')\" style=\"width:100px\" />\r\n                    <input type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" data-bind=\"click: onResetClick, value: $root.getLocString('pe.cancel')\" style=\"width:100px\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n";

                /***/
            }),
            /* 57 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"questioneditortab-general\">\r\n    <div>\r\n        <!-- ko foreach: properties.rows -->\r\n        <div class=\"form-group\">\r\n            <!-- ko foreach: properties -->\r\n                    <div class=\"alert alert-danger\" role=\"alert\" data-bind=\"visible:koHasError\">\r\n                        <span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\r\n                        <span class=\"sr-only\">Error:</span>\r\n                        <span  data-bind=\"text:koErrorText\"></span>\r\n                    </div>            \r\n                    <!-- ko if: editType != 'check' -->\r\n                        <label data-bind=\"text:title\"></label>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: editType == 'text' -->\r\n                        <input type=\"text\" class=\"form-control\" data-bind=\"value: koValue, disable: disabled\" />\r\n                    <!-- /ko -->\r\n                    <!-- ko if: editType == 'textarea' -->\r\n                        <textarea type=\"text\" rows=\"2\" class=\"form-control\" data-bind=\"value: koValue, disable: disabled\"></textarea>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: editType == 'check' -->\r\n                        <span class=\"checkbox-inline\"><input type=\"checkbox\" data-bind=\"checked: koValue, disable: disabled\"><label data-bind=\"text:title\"></label></span>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: editType == 'dropdown' -->\r\n                        <select class=\"form-control\"  data-bind=\"value: koValue, options: choices, disable: disabled\"></select>\r\n                    <!-- /ko -->\r\n            <!-- /ko  -->\r\n        </div>\r\n        <!-- /ko  -->\r\n    </div>\r\n</script>\r\n";

                /***/
            }),
            /* 58 */
            /***/
            (function(module, exports) {

                module.exports = "<script type=\"text/html\" id=\"surveyembeding\">\r\n    <div class=\"row\">\r\n        <select data-bind=\"value:koLibraryVersion\">\r\n            <option value=\"angular\" data-bind=\"text: $root.getLocString('ew.angular')\"></option>\r\n            <option value=\"jquery\" data-bind=\"text: $root.getLocString('ew.jquery')\"></option>\r\n            <option value=\"knockout\" data-bind=\"text: $root.getLocString('ew.knockout')\"></option>\r\n            <option value=\"react\" data-bind=\"text: $root.getLocString('ew.react')\"></option>\r\n            <option value=\"vue\" data-bind=\"text: $root.getLocString('ew.vue')\"></option>\r\n        </select>\r\n        <select data-bind=\"value:koScriptUsing\">\r\n            <option value=\"bootstrap\" data-bind=\"text: $root.getLocString('ew.bootstrap')\"></option>\r\n            <option value=\"standard\" data-bind=\"text: $root.getLocString('ew.standard')\"></option>\r\n        </select>\r\n        <select data-bind=\"value:koShowAsWindow\">\r\n            <option value=\"page\" data-bind=\"text: $root.getLocString('ew.showOnPage')\"></option>\r\n            <option value=\"window\" data-bind=\"text: $root.getLocString('ew.showInWindow')\"></option>\r\n        </select>\r\n        <label class=\"checkbox-inline\" data-bind=\"visible:koHasIds\">\r\n            <input type=\"checkbox\" data-bind=\"checked:koLoadSurvey\" />\r\n            <span data-bind=\"text: $root.getLocString('ew.loadFromServer')\"></span>\r\n        </label>\r\n    </div>\r\n    <div class=\"panel\">\r\n        <div class=\"panel-heading\" data-bind=\"text: $root.getLocString('ew.titleScript')\"></div>\r\n        <div data-bind=\"visible:hasAceEditor\">\r\n            <div id=\"surveyEmbedingHead\" style=\"height:70px;width:100%\"></div>\r\n        </div>\r\n        <textarea data-bind=\"visible:!hasAceEditor, text: koHeadText\" style=\"height:70px;width:100%\"></textarea>\r\n    </div>\r\n    <div class=\"panel\" data-bind=\"visible: koVisibleHtml\">\r\n        <div class=\"panel-heading\"  data-bind=\"text: $root.getLocString('ew.titleHtml')\"></div>\r\n        <div data-bind=\"visible:hasAceEditor\">\r\n            <div id=\"surveyEmbedingBody\" style=\"height:30px;width:100%\"></div>\r\n        </div>\r\n        <textarea data-bind=\"visible:!hasAceEditor, text: koBodyText\" style=\"height:30px;width:100%\"></textarea>\r\n    </div>\r\n    <div class=\"panel\">\r\n        <div class=\"panel-heading\"  data-bind=\"text: $root.getLocString('ew.titleJavaScript')\"></div>\r\n        <div data-bind=\"visible:hasAceEditor\">\r\n            <div id=\"surveyEmbedingJava\" style=\"height:300px;width:100%\"></div>\r\n        </div>\r\n        <textarea data-bind=\"visible:!hasAceEditor, text: koJavaText\" style=\"height:300px;width:100%\"></textarea>\r\n    </div>\r\n</script>";

                /***/
            }),
            /* 59 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = "" + __webpack_require__(35) + "\n" + __webpack_require__(36) + "\n" + __webpack_require__(37) + "\n" + __webpack_require__(38) + "\n" + __webpack_require__(39) + "\n" + __webpack_require__(58) + "\n" + __webpack_require__(56) + "\n" + __webpack_require__(55) + "\n" + __webpack_require__(57) + "\n" + __webpack_require__(40) + "\n" + __webpack_require__(41) + "\n" + __webpack_require__(43) + "\n" + __webpack_require__(42) + "\n" + __webpack_require__(44) + "\n" + __webpack_require__(45) + "\n" + __webpack_require__(46) + "\n" + __webpack_require__(47) + "\n" + __webpack_require__(48) + "\n" + __webpack_require__(49) + "\n" + __webpack_require__(50) + "\n" + __webpack_require__(51) + "\n" + __webpack_require__(52) + "\n" + __webpack_require__(53) + "\n" + __webpack_require__(54) + "";

                /***/
            }),
            /* 60 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(0);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
                /* harmony import */
                var __WEBPACK_IMPORTED_MODULE_1__textWorker__ = __webpack_require__(10);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return SurveyJSONEditor;
                });


                var SurveyJSONEditor = (function() {
                    function SurveyJSONEditor() {
                        this.isProcessingImmediately = false;
                        this.timeoutId = -1;
                        this.koText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
                        this.koErrors = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
                        var self = this;
                        this.koText.subscribe(function(newValue) {
                            self.onJsonEditorChanged();
                        });
                    }
                    SurveyJSONEditor.prototype.init = function() {
                        if (!this.hasAceEditor)
                            return;
                        debugger;
                        this.aceEditor = ace.edit("surveyjsJSONEditor");
                        var self = this;
                        //TODO add event to change ace theme and mode
                        //this.aceEditor.setTheme("ace/theme/monokai");
                        //this.aceEditor.session.setMode("ace/mode/json");
                        this.aceEditor.setShowPrintMargin(false);
                        this.aceEditor.getSession().on("change", function() {
                            self.onJsonEditorChanged();
                        });
                        this.aceEditor.getSession().setUseWorker(true);
                        __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */ ].newLineChar = this.aceEditor.session.doc.getNewLineCharacter();
                    };
                    Object.defineProperty(SurveyJSONEditor.prototype, "hasAceEditor", {
                        get: function() {
                            return typeof ace !== "undefined";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyJSONEditor.prototype, "text", {
                        get: function() {
                            if (!this.hasAceEditor)
                                return this.koText();
                            return this.aceEditor.getValue();
                        },
                        set: function(value) {
                            this.isProcessingImmediately = true;
                            this.koText(value);
                            if (this.aceEditor) {
                                this.aceEditor.setValue(value);
                                this.aceEditor.renderer.updateFull(true);
                            }
                            this.processJson(value);
                            this.isProcessingImmediately = false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyJSONEditor.prototype.show = function(value) {
                        this.text = value;
                        if (this.aceEditor) {
                            this.aceEditor.focus();
                        }
                    };
                    Object.defineProperty(SurveyJSONEditor.prototype, "isJsonCorrect", {
                        get: function() {
                            this.textWorker = new __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */ ](this.text);
                            return this.textWorker.isJsonCorrect;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurveyJSONEditor.prototype, "survey", {
                        get: function() {
                            return this.textWorker.survey;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurveyJSONEditor.prototype.onJsonEditorChanged = function() {
                        if (this.timeoutId > -1) {
                            clearTimeout(this.timeoutId);
                        }
                        if (this.isProcessingImmediately) {
                            this.timeoutId = -1;
                        } else {
                            var self = this;
                            this.timeoutId = setTimeout(function() {
                                self.timeoutId = -1;
                                self.processJson(self.text);
                            }, SurveyJSONEditor.updateTextTimeout);
                        }
                    };
                    SurveyJSONEditor.prototype.processJson = function(text) {
                        this.textWorker = new __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */ ](text);
                        if (this.aceEditor) {
                            this.aceEditor.getSession().setAnnotations(this.createAnnotations(text, this.textWorker.errors));
                        } else {
                            this.koErrors(this.textWorker.errors);
                        }
                    };
                    SurveyJSONEditor.prototype.createAnnotations = function(text, errors) {
                        var annotations = new Array();
                        for (var i = 0; i < errors.length; i++) {
                            var error = errors[i];
                            var annotation = {
                                row: error.position.start.row,
                                column: error.position.start.column,
                                text: error.text,
                                type: "error"
                            };
                            annotations.push(annotation);
                        }
                        return annotations;
                    };
                    return SurveyJSONEditor;
                }());

                SurveyJSONEditor.updateTextTimeout = 1000;


                /***/
            }),
            /* 61 */
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(global) {
                    Object.defineProperty(__webpack_exports__, "__esModule", {
                        value: true
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_0__main_scss__ = __webpack_require__(25);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_0__main_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__main_scss__);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(24);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_2_bootstrap__ = __webpack_require__(34);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_2_bootstrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bootstrap__);
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_3__dragdrophelper__ = __webpack_require__(12);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "DragDropHelper", function() {
                        return __WEBPACK_IMPORTED_MODULE_3__dragdrophelper__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__ = __webpack_require__(4);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyEditorBase", function() {
                        return __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyStringPropertyEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__["b"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyDropdownPropertyEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__["c"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyBooleanPropertyEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__["d"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyNumberPropertyEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_4__propertyEditors_propertyEditorBase__["e"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_5__propertyEditors_propertyTextItemsEditor__ = __webpack_require__(31);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyTextItemsEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_5__propertyEditors_propertyTextItemsEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_6__propertyEditors_propertyItemsEditor__ = __webpack_require__(5);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyItemsEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_6__propertyEditors_propertyItemsEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyItemValuesEditor__ = __webpack_require__(28);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyItemValuesEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyItemValuesEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_8__propertyEditors_propertyMatrixDropdownColumnsEditor__ = __webpack_require__(29);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyDropdownColumnsEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_8__propertyEditors_propertyMatrixDropdownColumnsEditor__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyMatrixDropdownColumnsItem", function() {
                        return __WEBPACK_IMPORTED_MODULE_8__propertyEditors_propertyMatrixDropdownColumnsEditor__["b"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_9__propertyEditors_propertyModalEditor__ = __webpack_require__(8);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyModalEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_9__propertyEditors_propertyModalEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_10__propertyEditors_propertyRestfullEditor__ = __webpack_require__(30);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyResultfullEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_10__propertyEditors_propertyRestfullEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_11__propertyEditors_propertyTriggersEditor__ = __webpack_require__(32);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyTriggersEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_11__propertyEditors_propertyTriggersEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_12__propertyEditors_propertyValidatorsEditor__ = __webpack_require__(16);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyValidatorsEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_12__propertyEditors_propertyValidatorsEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_13__surveyObjects__ = __webpack_require__(21);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyObjects", function() {
                        return __WEBPACK_IMPORTED_MODULE_13__surveyObjects__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_14__editorLocalization__ = __webpack_require__(2);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "editorLocalization", function() {
                        return __WEBPACK_IMPORTED_MODULE_14__editorLocalization__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_15__questionEditors_questionEditorGeneralProperties__ = __webpack_require__(18);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorGeneralProperties", function() {
                        return __WEBPACK_IMPORTED_MODULE_15__questionEditors_questionEditorGeneralProperties__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorGeneralRow", function() {
                        return __WEBPACK_IMPORTED_MODULE_15__questionEditors_questionEditorGeneralProperties__["b"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorGeneralProperty", function() {
                        return __WEBPACK_IMPORTED_MODULE_15__questionEditors_questionEditorGeneralProperties__["c"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_16__questionEditors_questionEditorDefinition__ = __webpack_require__(17);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorDefinition", function() {
                        return __WEBPACK_IMPORTED_MODULE_16__questionEditors_questionEditorDefinition__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_17__questionEditors_questionEditor__ = __webpack_require__(9);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPropertyEditorShowWindow", function() {
                        return __WEBPACK_IMPORTED_MODULE_17__questionEditors_questionEditor__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_17__questionEditors_questionEditor__["b"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorTabGeneral", function() {
                        return __WEBPACK_IMPORTED_MODULE_17__questionEditors_questionEditor__["c"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorTabProperty", function() {
                        return __WEBPACK_IMPORTED_MODULE_17__questionEditors_questionEditor__["d"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_18__questionToolbox__ = __webpack_require__(19);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "QuestionToolbox", function() {
                        return __WEBPACK_IMPORTED_MODULE_18__questionToolbox__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_19__objectProperty__ = __webpack_require__(13);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyObjectProperty", function() {
                        return __WEBPACK_IMPORTED_MODULE_19__objectProperty__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_20__objectEditor__ = __webpack_require__(7);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyObjectEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_20__objectEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_21__pagesEditor__ = __webpack_require__(15);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyPagesEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_21__pagesEditor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_22__textWorker__ = __webpack_require__(10);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyTextWorker", function() {
                        return __WEBPACK_IMPORTED_MODULE_22__textWorker__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_23__surveyHelper__ = __webpack_require__(6);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "ObjType", function() {
                        return __WEBPACK_IMPORTED_MODULE_23__surveyHelper__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyHelper", function() {
                        return __WEBPACK_IMPORTED_MODULE_23__surveyHelper__["b"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_24__surveyEmbedingWindow__ = __webpack_require__(20);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyEmbedingWindow", function() {
                        return __WEBPACK_IMPORTED_MODULE_24__surveyEmbedingWindow__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_25__objectVerbs__ = __webpack_require__(14);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyVerbs", function() {
                        return __WEBPACK_IMPORTED_MODULE_25__objectVerbs__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyVerbItem", function() {
                        return __WEBPACK_IMPORTED_MODULE_25__objectVerbs__["b"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyVerbChangeTypeItem", function() {
                        return __WEBPACK_IMPORTED_MODULE_25__objectVerbs__["c"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyVerbChangePageItem", function() {
                        return __WEBPACK_IMPORTED_MODULE_25__objectVerbs__["d"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_26__undoredo__ = __webpack_require__(23);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyUndoRedo", function() {
                        return __WEBPACK_IMPORTED_MODULE_26__undoredo__["a"];
                    });
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "UndoRedoItem", function() {
                        return __WEBPACK_IMPORTED_MODULE_26__undoredo__["b"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_27__surveyjsObjects__ = __webpack_require__(22);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyForDesigner", function() {
                        return __WEBPACK_IMPORTED_MODULE_27__surveyjsObjects__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_28__editor__ = __webpack_require__(26);
                    /* harmony reexport (binding) */
                    __webpack_require__.d(__webpack_exports__, "SurveyEditor", function() {
                        return __WEBPACK_IMPORTED_MODULE_28__editor__["a"];
                    });
                    /* harmony import */
                    var __WEBPACK_IMPORTED_MODULE_29__localization_french__ = __webpack_require__(27);
                    /* harmony export (binding) */
                    __webpack_require__.d(__webpack_exports__, "Version", function() {
                        return Version;
                    });
                    // styles

                    var Version;
                    Version = "" + "0.12.8";

                    global["jQuery"] = __WEBPACK_IMPORTED_MODULE_1_jquery__;









                    //editorLocalization


                    /* WEBPACK VAR INJECTION */
                }.call(__webpack_exports__, __webpack_require__(33)))

                /***/
            })
            /******/
        ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,